
slip:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	f3 0f 1e fa          	endbr64
    3004:	48 83 ec 08          	sub    $0x8,%rsp
    3008:	48 8b 05 c9 cf 01 00 	mov    0x1cfc9(%rip),%rax        # 1ffd8 <__gmon_start__@Base>
    300f:	48 85 c0             	test   %rax,%rax
    3012:	74 02                	je     3016 <_init+0x16>
    3014:	ff d0                	call   *%rax
    3016:	48 83 c4 08          	add    $0x8,%rsp
    301a:	c3                   	ret

Disassembly of section .plt:

0000000000003020 <free@plt-0x10>:
    3020:	ff 35 e2 cf 01 00    	push   0x1cfe2(%rip)        # 20008 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	ff 25 e4 cf 01 00    	jmp    *0x1cfe4(%rip)        # 20010 <_GLOBAL_OFFSET_TABLE_+0x10>
    302c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003030 <free@plt>:
    3030:	ff 25 e2 cf 01 00    	jmp    *0x1cfe2(%rip)        # 20018 <free@GLIBC_2.2.5>
    3036:	68 00 00 00 00       	push   $0x0
    303b:	e9 e0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003040 <__errno_location@plt>:
    3040:	ff 25 da cf 01 00    	jmp    *0x1cfda(%rip)        # 20020 <__errno_location@GLIBC_2.2.5>
    3046:	68 01 00 00 00       	push   $0x1
    304b:	e9 d0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003050 <strncpy@plt>:
    3050:	ff 25 d2 cf 01 00    	jmp    *0x1cfd2(%rip)        # 20028 <strncpy@GLIBC_2.2.5>
    3056:	68 02 00 00 00       	push   $0x2
    305b:	e9 c0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003060 <strcpy@plt>:
    3060:	ff 25 ca cf 01 00    	jmp    *0x1cfca(%rip)        # 20030 <strcpy@GLIBC_2.2.5>
    3066:	68 03 00 00 00       	push   $0x3
    306b:	e9 b0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003070 <ferror@plt>:
    3070:	ff 25 c2 cf 01 00    	jmp    *0x1cfc2(%rip)        # 20038 <ferror@GLIBC_2.2.5>
    3076:	68 04 00 00 00       	push   $0x4
    307b:	e9 a0 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003080 <isatty@plt>:
    3080:	ff 25 ba cf 01 00    	jmp    *0x1cfba(%rip)        # 20040 <isatty@GLIBC_2.2.5>
    3086:	68 05 00 00 00       	push   $0x5
    308b:	e9 90 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003090 <fread@plt>:
    3090:	ff 25 b2 cf 01 00    	jmp    *0x1cfb2(%rip)        # 20048 <fread@GLIBC_2.2.5>
    3096:	68 06 00 00 00       	push   $0x6
    309b:	e9 80 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030a0 <atof@plt>:
    30a0:	ff 25 aa cf 01 00    	jmp    *0x1cfaa(%rip)        # 20050 <atof@GLIBC_2.2.5>
    30a6:	68 07 00 00 00       	push   $0x7
    30ab:	e9 70 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030b0 <fclose@plt>:
    30b0:	ff 25 a2 cf 01 00    	jmp    *0x1cfa2(%rip)        # 20058 <fclose@GLIBC_2.2.5>
    30b6:	68 08 00 00 00       	push   $0x8
    30bb:	e9 60 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030c0 <strlen@plt>:
    30c0:	ff 25 9a cf 01 00    	jmp    *0x1cf9a(%rip)        # 20060 <strlen@GLIBC_2.2.5>
    30c6:	68 09 00 00 00       	push   $0x9
    30cb:	e9 50 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030d0 <printf@plt>:
    30d0:	ff 25 92 cf 01 00    	jmp    *0x1cf92(%rip)        # 20068 <printf@GLIBC_2.2.5>
    30d6:	68 0a 00 00 00       	push   $0xa
    30db:	e9 40 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030e0 <strrchr@plt>:
    30e0:	ff 25 8a cf 01 00    	jmp    *0x1cf8a(%rip)        # 20070 <strrchr@GLIBC_2.2.5>
    30e6:	68 0b 00 00 00       	push   $0xb
    30eb:	e9 30 ff ff ff       	jmp    3020 <_init+0x20>

00000000000030f0 <__assert_fail@plt>:
    30f0:	ff 25 82 cf 01 00    	jmp    *0x1cf82(%rip)        # 20078 <__assert_fail@GLIBC_2.2.5>
    30f6:	68 0c 00 00 00       	push   $0xc
    30fb:	e9 20 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003100 <memset@plt>:
    3100:	ff 25 7a cf 01 00    	jmp    *0x1cf7a(%rip)        # 20080 <memset@GLIBC_2.2.5>
    3106:	68 0d 00 00 00       	push   $0xd
    310b:	e9 10 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003110 <calloc@plt>:
    3110:	ff 25 72 cf 01 00    	jmp    *0x1cf72(%rip)        # 20088 <calloc@GLIBC_2.2.5>
    3116:	68 0e 00 00 00       	push   $0xe
    311b:	e9 00 ff ff ff       	jmp    3020 <_init+0x20>

0000000000003120 <strcmp@plt>:
    3120:	ff 25 6a cf 01 00    	jmp    *0x1cf6a(%rip)        # 20090 <strcmp@GLIBC_2.2.5>
    3126:	68 0f 00 00 00       	push   $0xf
    312b:	e9 f0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003130 <fprintf@plt>:
    3130:	ff 25 62 cf 01 00    	jmp    *0x1cf62(%rip)        # 20098 <fprintf@GLIBC_2.2.5>
    3136:	68 10 00 00 00       	push   $0x10
    313b:	e9 e0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003140 <ftell@plt>:
    3140:	ff 25 5a cf 01 00    	jmp    *0x1cf5a(%rip)        # 200a0 <ftell@GLIBC_2.2.5>
    3146:	68 11 00 00 00       	push   $0x11
    314b:	e9 d0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003150 <strtol@plt>:
    3150:	ff 25 52 cf 01 00    	jmp    *0x1cf52(%rip)        # 200a8 <strtol@GLIBC_2.2.5>
    3156:	68 12 00 00 00       	push   $0x12
    315b:	e9 c0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003160 <clearerr@plt>:
    3160:	ff 25 4a cf 01 00    	jmp    *0x1cf4a(%rip)        # 200b0 <clearerr@GLIBC_2.2.5>
    3166:	68 13 00 00 00       	push   $0x13
    316b:	e9 b0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003170 <memcpy@plt>:
    3170:	ff 25 42 cf 01 00    	jmp    *0x1cf42(%rip)        # 200b8 <memcpy@GLIBC_2.14>
    3176:	68 14 00 00 00       	push   $0x14
    317b:	e9 a0 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003180 <fileno@plt>:
    3180:	ff 25 3a cf 01 00    	jmp    *0x1cf3a(%rip)        # 200c0 <fileno@GLIBC_2.2.5>
    3186:	68 15 00 00 00       	push   $0x15
    318b:	e9 90 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003190 <malloc@plt>:
    3190:	ff 25 32 cf 01 00    	jmp    *0x1cf32(%rip)        # 200c8 <malloc@GLIBC_2.2.5>
    3196:	68 16 00 00 00       	push   $0x16
    319b:	e9 80 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031a0 <fseek@plt>:
    31a0:	ff 25 2a cf 01 00    	jmp    *0x1cf2a(%rip)        # 200d0 <fseek@GLIBC_2.2.5>
    31a6:	68 17 00 00 00       	push   $0x17
    31ab:	e9 70 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031b0 <realloc@plt>:
    31b0:	ff 25 22 cf 01 00    	jmp    *0x1cf22(%rip)        # 200d8 <realloc@GLIBC_2.2.5>
    31b6:	68 18 00 00 00       	push   $0x18
    31bb:	e9 60 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031c0 <fopen@plt>:
    31c0:	ff 25 1a cf 01 00    	jmp    *0x1cf1a(%rip)        # 200e0 <fopen@GLIBC_2.2.5>
    31c6:	68 19 00 00 00       	push   $0x19
    31cb:	e9 50 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031d0 <getopt@plt>:
    31d0:	ff 25 12 cf 01 00    	jmp    *0x1cf12(%rip)        # 200e8 <getopt@GLIBC_2.2.5>
    31d6:	68 1a 00 00 00       	push   $0x1a
    31db:	e9 40 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031e0 <sprintf@plt>:
    31e0:	ff 25 0a cf 01 00    	jmp    *0x1cf0a(%rip)        # 200f0 <sprintf@GLIBC_2.2.5>
    31e6:	68 1b 00 00 00       	push   $0x1b
    31eb:	e9 30 fe ff ff       	jmp    3020 <_init+0x20>

00000000000031f0 <exit@plt>:
    31f0:	ff 25 02 cf 01 00    	jmp    *0x1cf02(%rip)        # 200f8 <exit@GLIBC_2.2.5>
    31f6:	68 1c 00 00 00       	push   $0x1c
    31fb:	e9 20 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003200 <fwrite@plt>:
    3200:	ff 25 fa ce 01 00    	jmp    *0x1cefa(%rip)        # 20100 <fwrite@GLIBC_2.2.5>
    3206:	68 1d 00 00 00       	push   $0x1d
    320b:	e9 10 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003210 <aligned_alloc@plt>:
    3210:	ff 25 f2 ce 01 00    	jmp    *0x1cef2(%rip)        # 20108 <aligned_alloc@GLIBC_2.16>
    3216:	68 1e 00 00 00       	push   $0x1e
    321b:	e9 00 fe ff ff       	jmp    3020 <_init+0x20>

0000000000003220 <getc@plt>:
    3220:	ff 25 ea ce 01 00    	jmp    *0x1ceea(%rip)        # 20110 <getc@GLIBC_2.2.5>
    3226:	68 1f 00 00 00       	push   $0x1f
    322b:	e9 f0 fd ff ff       	jmp    3020 <_init+0x20>

Disassembly of section .plt.got:

0000000000003230 <__cxa_finalize@plt>:
    3230:	ff 25 b2 cd 01 00    	jmp    *0x1cdb2(%rip)        # 1ffe8 <__cxa_finalize@GLIBC_2.2.5>
    3236:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000003240 <_start>:
    3240:	f3 0f 1e fa          	endbr64
    3244:	31 ed                	xor    %ebp,%ebp
    3246:	49 89 d1             	mov    %rdx,%r9
    3249:	5e                   	pop    %rsi
    324a:	48 89 e2             	mov    %rsp,%rdx
    324d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    3251:	50                   	push   %rax
    3252:	54                   	push   %rsp
    3253:	45 31 c0             	xor    %r8d,%r8d
    3256:	31 c9                	xor    %ecx,%ecx
    3258:	48 8d 3d d1 00 00 00 	lea    0xd1(%rip),%rdi        # 3330 <main>
    325f:	ff 15 53 cd 01 00    	call   *0x1cd53(%rip)        # 1ffb8 <__libc_start_main@GLIBC_2.34>
    3265:	f4                   	hlt
    3266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    326d:	00 00 00 

0000000000003270 <deregister_tm_clones>:
    3270:	48 8d 3d 99 d1 01 00 	lea    0x1d199(%rip),%rdi        # 20410 <__TMC_END__>
    3277:	48 8d 05 92 d1 01 00 	lea    0x1d192(%rip),%rax        # 20410 <__TMC_END__>
    327e:	48 39 f8             	cmp    %rdi,%rax
    3281:	74 15                	je     3298 <deregister_tm_clones+0x28>
    3283:	48 8b 05 36 cd 01 00 	mov    0x1cd36(%rip),%rax        # 1ffc0 <_ITM_deregisterTMCloneTable@Base>
    328a:	48 85 c0             	test   %rax,%rax
    328d:	74 09                	je     3298 <deregister_tm_clones+0x28>
    328f:	ff e0                	jmp    *%rax
    3291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3298:	c3                   	ret
    3299:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000032a0 <register_tm_clones>:
    32a0:	48 8d 3d 69 d1 01 00 	lea    0x1d169(%rip),%rdi        # 20410 <__TMC_END__>
    32a7:	48 8d 35 62 d1 01 00 	lea    0x1d162(%rip),%rsi        # 20410 <__TMC_END__>
    32ae:	48 29 fe             	sub    %rdi,%rsi
    32b1:	48 89 f0             	mov    %rsi,%rax
    32b4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    32b8:	48 c1 f8 03          	sar    $0x3,%rax
    32bc:	48 01 c6             	add    %rax,%rsi
    32bf:	48 d1 fe             	sar    $1,%rsi
    32c2:	74 14                	je     32d8 <register_tm_clones+0x38>
    32c4:	48 8b 05 15 cd 01 00 	mov    0x1cd15(%rip),%rax        # 1ffe0 <_ITM_registerTMCloneTable@Base>
    32cb:	48 85 c0             	test   %rax,%rax
    32ce:	74 08                	je     32d8 <register_tm_clones+0x38>
    32d0:	ff e0                	jmp    *%rax
    32d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    32d8:	c3                   	ret
    32d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000032e0 <__do_global_dtors_aux>:
    32e0:	f3 0f 1e fa          	endbr64
    32e4:	80 3d 25 d1 01 00 00 	cmpb   $0x0,0x1d125(%rip)        # 20410 <__TMC_END__>
    32eb:	75 2b                	jne    3318 <__do_global_dtors_aux+0x38>
    32ed:	55                   	push   %rbp
    32ee:	48 83 3d f2 cc 01 00 	cmpq   $0x0,0x1ccf2(%rip)        # 1ffe8 <__cxa_finalize@GLIBC_2.2.5>
    32f5:	00 
    32f6:	48 89 e5             	mov    %rsp,%rbp
    32f9:	74 0c                	je     3307 <__do_global_dtors_aux+0x27>
    32fb:	48 8b 3d 26 ce 01 00 	mov    0x1ce26(%rip),%rdi        # 20128 <__dso_handle>
    3302:	e8 29 ff ff ff       	call   3230 <__cxa_finalize@plt>
    3307:	e8 64 ff ff ff       	call   3270 <deregister_tm_clones>
    330c:	c6 05 fd d0 01 00 01 	movb   $0x1,0x1d0fd(%rip)        # 20410 <__TMC_END__>
    3313:	5d                   	pop    %rbp
    3314:	c3                   	ret
    3315:	0f 1f 00             	nopl   (%rax)
    3318:	c3                   	ret
    3319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003320 <frame_dummy>:
    3320:	f3 0f 1e fa          	endbr64
    3324:	e9 77 ff ff ff       	jmp    32a0 <register_tm_clones>
    3329:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003330 <main>:
    3330:	55                   	push   %rbp
    3331:	48 89 e5             	mov    %rsp,%rbp
    3334:	48 83 ec 20          	sub    $0x20,%rsp
    3338:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    333f:	89 7d f8             	mov    %edi,-0x8(%rbp)
    3342:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3346:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    334a:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
    334e:	0f 8f 0a 00 00 00    	jg     335e <main+0x2e>
    3354:	e8 c7 01 00 00       	call   3520 <print_help>
    3359:	e9 ed 00 00 00       	jmp    344b <main+0x11b>
    335e:	e9 00 00 00 00       	jmp    3363 <main+0x33>
    3363:	8b 7d f8             	mov    -0x8(%rbp),%edi
    3366:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    336a:	48 8d 15 73 4d 01 00 	lea    0x14d73(%rip),%rdx        # 180e4 <_IO_stdin_used+0xe4>
    3371:	e8 5a fe ff ff       	call   31d0 <getopt@plt>
    3376:	89 45 e8             	mov    %eax,-0x18(%rbp)
    3379:	83 f8 ff             	cmp    $0xffffffff,%eax
    337c:	0f 84 89 00 00 00    	je     340b <main+0xdb>
    3382:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3385:	83 c0 c1             	add    $0xffffffc1,%eax
    3388:	89 c1                	mov    %eax,%ecx
    338a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    338e:	83 e8 37             	sub    $0x37,%eax
    3391:	0f 87 6f 00 00 00    	ja     3406 <main+0xd6>
    3397:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    339b:	48 8d 0d 62 4c 01 00 	lea    0x14c62(%rip),%rcx        # 18004 <_IO_stdin_used+0x4>
    33a2:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
    33a6:	48 01 c8             	add    %rcx,%rax
    33a9:	ff e0                	jmp    *%rax
    33ab:	48 8d 05 6b d0 01 00 	lea    0x1d06b(%rip),%rax        # 2041d <enable_jit>
    33b2:	c6 00 01             	movb   $0x1,(%rax)
    33b5:	e9 4c 00 00 00       	jmp    3406 <main+0xd6>
    33ba:	e8 61 01 00 00       	call   3520 <print_help>
    33bf:	e9 42 00 00 00       	jmp    3406 <main+0xd6>
    33c4:	e8 87 01 00 00       	call   3550 <print_version>
    33c9:	e9 38 00 00 00       	jmp    3406 <main+0xd6>
    33ce:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
    33d2:	e9 2f 00 00 00       	jmp    3406 <main+0xd6>
    33d7:	48 8d 05 36 d0 01 00 	lea    0x1d036(%rip),%rax        # 20414 <slip_debug_compile>
    33de:	c6 00 01             	movb   $0x1,(%rax)
    33e1:	e9 20 00 00 00       	jmp    3406 <main+0xd6>
    33e6:	48 8d 05 2f d0 01 00 	lea    0x1d02f(%rip),%rax        # 2041c <slip_debug_exec>
    33ed:	c6 00 01             	movb   $0x1,(%rax)
    33f0:	e9 11 00 00 00       	jmp    3406 <main+0xd6>
    33f5:	8b 75 e8             	mov    -0x18(%rbp),%esi
    33f8:	48 8d 3d ec 4c 01 00 	lea    0x14cec(%rip),%rdi        # 180eb <_IO_stdin_used+0xeb>
    33ff:	b0 00                	mov    $0x0,%al
    3401:	e8 ca fc ff ff       	call   30d0 <printf@plt>
    3406:	e9 58 ff ff ff       	jmp    3363 <main+0x33>
    340b:	f6 45 ef 01          	testb  $0x1,-0x11(%rbp)
    340f:	0f 84 1b 00 00 00    	je     3430 <main+0x100>
    3415:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3419:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    341c:	83 e9 01             	sub    $0x1,%ecx
    341f:	48 63 c9             	movslq %ecx,%rcx
    3422:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    3426:	e8 35 00 00 00       	call   3460 <parse_only>
    342b:	e9 16 00 00 00       	jmp    3446 <main+0x116>
    3430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3434:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    3437:	83 e9 01             	sub    $0x1,%ecx
    343a:	48 63 c9             	movslq %ecx,%rcx
    343d:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    3441:	e8 8a 00 00 00       	call   34d0 <run_file>
    3446:	e9 00 00 00 00       	jmp    344b <main+0x11b>
    344b:	31 c0                	xor    %eax,%eax
    344d:	48 83 c4 20          	add    $0x20,%rsp
    3451:	5d                   	pop    %rbp
    3452:	c3                   	ret
    3453:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    345a:	00 00 00 
    345d:	0f 1f 00             	nopl   (%rax)

0000000000003460 <parse_only>:
    3460:	55                   	push   %rbp
    3461:	48 89 e5             	mov    %rsp,%rbp
    3464:	48 83 ec 20          	sub    $0x20,%rsp
    3468:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    346c:	b0 00                	mov    $0x0,%al
    346e:	e8 6d 75 00 00       	call   a9e0 <slip_init>
    3473:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    3477:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    347b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    347f:	e8 dc 88 00 00       	call   bd60 <slipL_parseFile>
    3484:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3488:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    348c:	48 8d 3d 75 4c 01 00 	lea    0x14c75(%rip),%rdi        # 18108 <_IO_stdin_used+0x108>
    3493:	b0 00                	mov    $0x0,%al
    3495:	e8 36 fc ff ff       	call   30d0 <printf@plt>
    349a:	48 8d 3d 77 4c 01 00 	lea    0x14c77(%rip),%rdi        # 18118 <_IO_stdin_used+0x118>
    34a1:	b0 00                	mov    $0x0,%al
    34a3:	e8 28 fc ff ff       	call   30d0 <printf@plt>
    34a8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    34ac:	e8 ff 86 00 00       	call   bbb0 <slipL_print>
    34b1:	48 8d 3d 72 4c 01 00 	lea    0x14c72(%rip),%rdi        # 1812a <_IO_stdin_used+0x12a>
    34b8:	b0 00                	mov    $0x0,%al
    34ba:	e8 11 fc ff ff       	call   30d0 <printf@plt>
    34bf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    34c3:	e8 98 7a 00 00       	call   af60 <slipC_close>
    34c8:	48 83 c4 20          	add    $0x20,%rsp
    34cc:	5d                   	pop    %rbp
    34cd:	c3                   	ret
    34ce:	66 90                	xchg   %ax,%ax

00000000000034d0 <run_file>:
    34d0:	55                   	push   %rbp
    34d1:	48 89 e5             	mov    %rsp,%rbp
    34d4:	48 83 ec 20          	sub    $0x20,%rsp
    34d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    34dc:	b0 00                	mov    $0x0,%al
    34de:	e8 fd 74 00 00       	call   a9e0 <slip_init>
    34e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    34e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    34eb:	e8 d0 00 00 00       	call   35c0 <slip_openStdLib>
    34f0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    34f4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    34f8:	e8 63 7c 00 00       	call   b160 <slipC_loadFile>
    34fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3501:	31 f6                	xor    %esi,%esi
    3503:	e8 b8 be 00 00       	call   f3c0 <slipV_call>
    3508:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    350c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3510:	e8 4b 7a 00 00       	call   af60 <slipC_close>
    3515:	48 83 c4 20          	add    $0x20,%rsp
    3519:	5d                   	pop    %rbp
    351a:	c3                   	ret
    351b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003520 <print_help>:
    3520:	55                   	push   %rbp
    3521:	48 89 e5             	mov    %rsp,%rbp
    3524:	48 83 ec 40          	sub    $0x40,%rsp
    3528:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    352c:	48 8d 35 fd 4b 01 00 	lea    0x14bfd(%rip),%rsi        # 18130 <_IO_stdin_used+0x130>
    3533:	ba 3e 00 00 00       	mov    $0x3e,%edx
    3538:	e8 33 fc ff ff       	call   3170 <memcpy@plt>
    353d:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    3541:	b0 00                	mov    $0x0,%al
    3543:	e8 88 fb ff ff       	call   30d0 <printf@plt>
    3548:	48 83 c4 40          	add    $0x40,%rsp
    354c:	5d                   	pop    %rbp
    354d:	c3                   	ret
    354e:	66 90                	xchg   %ax,%ax

0000000000003550 <print_version>:
    3550:	55                   	push   %rbp
    3551:	48 89 e5             	mov    %rsp,%rbp
    3554:	48 83 ec 10          	sub    $0x10,%rsp
    3558:	48 8b 05 9e 4b 01 00 	mov    0x14b9e(%rip),%rax        # 180fd <_IO_stdin_used+0xfd>
    355f:	48 89 45 f5          	mov    %rax,-0xb(%rbp)
    3563:	66 8b 05 9b 4b 01 00 	mov    0x14b9b(%rip),%ax        # 18105 <_IO_stdin_used+0x105>
    356a:	66 89 45 fd          	mov    %ax,-0x3(%rbp)
    356e:	8a 05 93 4b 01 00    	mov    0x14b93(%rip),%al        # 18107 <_IO_stdin_used+0x107>
    3574:	88 45 ff             	mov    %al,-0x1(%rbp)
    3577:	48 8d 7d f5          	lea    -0xb(%rbp),%rdi
    357b:	b0 00                	mov    $0x0,%al
    357d:	e8 4e fb ff ff       	call   30d0 <printf@plt>
    3582:	48 83 c4 10          	add    $0x10,%rsp
    3586:	5d                   	pop    %rbp
    3587:	c3                   	ret
    3588:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    358f:	00 

0000000000003590 <slip_openBaseLib>:
    3590:	55                   	push   %rbp
    3591:	48 89 e5             	mov    %rsp,%rbp
    3594:	48 83 ec 10          	sub    $0x10,%rsp
    3598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    359c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35a0:	48 8d 35 99 c1 01 00 	lea    0x1c199(%rip),%rsi        # 1f740 <stdlib>
    35a7:	e8 64 68 00 00       	call   9e10 <slipL_regGlobalCFuncs>
    35ac:	31 c0                	xor    %eax,%eax
    35ae:	48 83 c4 10          	add    $0x10,%rsp
    35b2:	5d                   	pop    %rbp
    35b3:	c3                   	ret
    35b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35bb:	00 00 00 
    35be:	66 90                	xchg   %ax,%ax

00000000000035c0 <slip_openStdLib>:
    35c0:	55                   	push   %rbp
    35c1:	48 89 e5             	mov    %rsp,%rbp
    35c4:	48 83 ec 10          	sub    $0x10,%rsp
    35c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    35cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35d0:	e8 bb ff ff ff       	call   3590 <slip_openBaseLib>
    35d5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35d9:	e8 f2 00 00 00       	call   36d0 <slip_openCompilerLib>
    35de:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35e2:	e8 09 5f 00 00       	call   94f0 <slip_openMathLib>
    35e7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35eb:	e8 60 64 00 00       	call   9a50 <slip_openStringLib>
    35f0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    35f4:	e8 b7 5d 00 00       	call   93b0 <slip_openIOLib>
    35f9:	31 c0                	xor    %eax,%eax
    35fb:	48 83 c4 10          	add    $0x10,%rsp
    35ff:	5d                   	pop    %rbp
    3600:	c3                   	ret
    3601:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3608:	00 00 00 
    360b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003610 <_print>:
    3610:	55                   	push   %rbp
    3611:	48 89 e5             	mov    %rsp,%rbp
    3614:	48 83 ec 30          	sub    $0x30,%rsp
    3618:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    361c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    361f:	31 c0                	xor    %eax,%eax
    3621:	2b 45 ec             	sub    -0x14(%rbp),%eax
    3624:	89 45 e8             	mov    %eax,-0x18(%rbp)
    3627:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
    362b:	0f 8d 3b 00 00 00    	jge    366c <_print+0x5c>
    3631:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3635:	8b 75 e8             	mov    -0x18(%rbp),%esi
    3638:	e8 83 b8 00 00       	call   eec0 <slipV_getValue>
    363d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3641:	89 55 e0             	mov    %edx,-0x20(%rbp)
    3644:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    3648:	8b 75 e0             	mov    -0x20(%rbp),%esi
    364b:	e8 e0 b2 00 00       	call   e930 <slipV_printValue>
    3650:	48 8d 3d 2f 58 01 00 	lea    0x1582f(%rip),%rdi        # 18e86 <getFreeElement.b+0x686>
    3657:	b0 00                	mov    $0x0,%al
    3659:	e8 72 fa ff ff       	call   30d0 <printf@plt>
    365e:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3661:	83 c0 01             	add    $0x1,%eax
    3664:	89 45 e8             	mov    %eax,-0x18(%rbp)
    3667:	e9 bb ff ff ff       	jmp    3627 <_print+0x17>
    366c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3670:	48 83 c7 08          	add    $0x8,%rdi
    3674:	8b 75 ec             	mov    -0x14(%rbp),%esi
    3677:	e8 f4 a3 00 00       	call   da70 <slipS_popValueNum>
    367c:	48 8d 3d a8 4a 01 00 	lea    0x14aa8(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    3683:	b0 00                	mov    $0x0,%al
    3685:	e8 46 fa ff ff       	call   30d0 <printf@plt>
    368a:	31 f6                	xor    %esi,%esi
    368c:	89 f7                	mov    %esi,%edi
    368e:	e8 1d 00 00 00       	call   36b0 <slip_Return>
    3693:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    369b:	48 83 c4 30          	add    $0x30,%rsp
    369f:	5d                   	pop    %rbp
    36a0:	c3                   	ret
    36a1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36a8:	00 00 00 
    36ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000036b0 <slip_Return>:
    36b0:	55                   	push   %rbp
    36b1:	48 89 e5             	mov    %rsp,%rbp
    36b4:	89 7d f4             	mov    %edi,-0xc(%rbp)
    36b7:	89 75 f0             	mov    %esi,-0x10(%rbp)
    36ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
    36bd:	89 45 f8             	mov    %eax,-0x8(%rbp)
    36c0:	8b 45 f0             	mov    -0x10(%rbp),%eax
    36c3:	89 45 fc             	mov    %eax,-0x4(%rbp)
    36c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    36ca:	5d                   	pop    %rbp
    36cb:	c3                   	ret
    36cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000036d0 <slip_openCompilerLib>:
    36d0:	55                   	push   %rbp
    36d1:	48 89 e5             	mov    %rsp,%rbp
    36d4:	48 83 ec 10          	sub    $0x10,%rsp
    36d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    36dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    36e0:	48 8d 35 79 c0 01 00 	lea    0x1c079(%rip),%rsi        # 1f760 <stdmacro>
    36e7:	e8 04 69 00 00       	call   9ff0 <slipL_regGlobalCMacros>
    36ec:	31 c0                	xor    %eax,%eax
    36ee:	48 83 c4 10          	add    $0x10,%rsp
    36f2:	5d                   	pop    %rbp
    36f3:	c3                   	ret
    36f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36fb:	00 00 00 
    36fe:	66 90                	xchg   %ax,%ax

0000000000003700 <_var>:
    3700:	55                   	push   %rbp
    3701:	48 89 e5             	mov    %rsp,%rbp
    3704:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    370b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    370f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    3712:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    3716:	0f 8c 05 00 00 00    	jl     3721 <_var+0x21>
    371c:	e9 1f 00 00 00       	jmp    3740 <_var+0x40>
    3721:	48 8d 3d be 4a 01 00 	lea    0x14abe(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    3728:	48 8d 35 c0 4a 01 00 	lea    0x14ac0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    372f:	ba f7 00 00 00       	mov    $0xf7,%edx
    3734:	48 8d 0d d7 4a 01 00 	lea    0x14ad7(%rip),%rcx        # 18212 <_IO_stdin_used+0x212>
    373b:	e8 b0 f9 ff ff       	call   30f0 <__assert_fail@plt>
    3740:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    3747:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    374b:	31 f6                	xor    %esi,%esi
    374d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    3750:	e8 6b b7 00 00       	call   eec0 <slipV_getValue>
    3755:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3759:	89 55 e0             	mov    %edx,-0x20(%rbp)
    375c:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3760:	31 f6                	xor    %esi,%esi
    3762:	ba 10 00 00 00       	mov    $0x10,%edx
    3767:	e8 94 f9 ff ff       	call   3100 <memset@plt>
    376c:	83 7d ec 02          	cmpl   $0x2,-0x14(%rbp)
    3770:	0f 82 25 00 00 00    	jb     379b <_var+0x9b>
    3776:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    377a:	be ff ff ff ff       	mov    $0xffffffff,%esi
    377f:	e8 3c b7 00 00       	call   eec0 <slipV_getValue>
    3784:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    3788:	89 55 c0             	mov    %edx,-0x40(%rbp)
    378b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    378f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3793:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    3797:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    379b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    379f:	48 83 c7 08          	add    $0x8,%rdi
    37a3:	8b 75 ec             	mov    -0x14(%rbp),%esi
    37a6:	e8 c5 a2 00 00       	call   da70 <slipS_popValueNum>
    37ab:	48 8d 05 62 cc 01 00 	lea    0x1cc62(%rip),%rax        # 20414 <slip_debug_compile>
    37b2:	f6 00 01             	testb  $0x1,(%rax)
    37b5:	0f 84 11 00 00 00    	je     37cc <_var+0xcc>
    37bb:	8b 75 ec             	mov    -0x14(%rbp),%esi
    37be:	48 8d 3d 69 4a 01 00 	lea    0x14a69(%rip),%rdi        # 1822e <_IO_stdin_used+0x22e>
    37c5:	b0 00                	mov    $0x0,%al
    37c7:	e8 04 f9 ff ff       	call   30d0 <printf@plt>
    37cc:	e9 00 00 00 00       	jmp    37d1 <_var+0xd1>
    37d1:	48 8d 05 3c cc 01 00 	lea    0x1cc3c(%rip),%rax        # 20414 <slip_debug_compile>
    37d8:	f6 00 01             	testb  $0x1,(%rax)
    37db:	0f 84 18 00 00 00    	je     37f9 <_var+0xf9>
    37e1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    37e5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    37e9:	8b 55 e0             	mov    -0x20(%rbp),%edx
    37ec:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    37f0:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
    37f4:	e8 47 4c 00 00       	call   8440 <check_vars>
    37f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    37fd:	be ff ff ff ff       	mov    $0xffffffff,%esi
    3802:	e8 e9 7c 00 00       	call   b4f0 <slipC_getFunc>
    3807:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    380b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    380f:	8b 40 10             	mov    0x10(%rax),%eax
    3812:	89 45 ac             	mov    %eax,-0x54(%rbp)
    3815:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
    381c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3820:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    3824:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3828:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    382c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3830:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    3834:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    3838:	48 8b 40 08          	mov    0x8(%rax),%rax
    383c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    3840:	8b 45 ac             	mov    -0x54(%rbp),%eax
    3843:	03 45 a8             	add    -0x58(%rbp),%eax
    3846:	48 63 f0             	movslq %eax,%rsi
    3849:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
    3850:	e8 9b aa 00 00       	call   e2f0 <slipV_setValueInt>
    3855:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3859:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    385d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    3864:	8b 4d 80             	mov    -0x80(%rbp),%ecx
    3867:	e8 54 7b 00 00       	call   b3c0 <slipC_setID>
    386c:	8b 45 a8             	mov    -0x58(%rbp),%eax
    386f:	83 c0 01             	add    $0x1,%eax
    3872:	89 45 a8             	mov    %eax,-0x58(%rbp)
    3875:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3879:	48 8b 00             	mov    (%rax),%rax
    387c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    3880:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3884:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
    3888:	0f 85 9e ff ff ff    	jne    382c <_var+0x12c>
    388e:	e9 00 00 00 00       	jmp    3893 <_var+0x193>
    3893:	e9 00 00 00 00       	jmp    3898 <_var+0x198>
    3898:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
    389f:	00 00 00 
    38a2:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
    38a6:	0f 84 f7 00 00 00    	je     39a3 <_var+0x2a3>
    38ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    38b0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    38b7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    38be:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    38c5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    38cc:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    38d3:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
    38da:	00 00 00 
    38dd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    38e1:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    38e5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    38ec:	48 8b 50 08          	mov    0x8(%rax),%rdx
    38f0:	8b 48 10             	mov    0x10(%rax),%ecx
    38f3:	4c 8d 85 54 ff ff ff 	lea    -0xac(%rbp),%r8
    38fa:	e8 81 4c 00 00       	call   8580 <load>
    38ff:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    3905:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
    390c:	0f 85 4e 00 00 00    	jne    3960 <_var+0x260>
    3912:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    3916:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    391d:	8b 45 ac             	mov    -0x54(%rbp),%eax
    3920:	03 85 74 ff ff ff    	add    -0x8c(%rbp),%eax
    3926:	66 89 c1             	mov    %ax,%cx
    3929:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
    392f:	0f b7 f9             	movzwl %cx,%edi
    3932:	0f b7 f0             	movzwl %ax,%esi
    3935:	e8 36 51 00 00       	call   8a70 <slipI_move>
    393a:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    3941:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    3947:	8b b5 48 ff ff ff    	mov    -0xb8(%rbp),%esi
    394d:	e8 ce 88 00 00       	call   c220 <slipP_addInstruction>
    3952:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    3956:	be 01 00 00 00       	mov    $0x1,%esi
    395b:	e8 50 8c 00 00       	call   c5b0 <slipP_addLocalVar>
    3960:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    3966:	83 c0 01             	add    $0x1,%eax
    3969:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    396f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3976:	48 8b 00             	mov    (%rax),%rax
    3979:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    3980:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3987:	48 3b 85 60 ff ff ff 	cmp    -0xa0(%rbp),%rax
    398e:	0f 85 31 ff ff ff    	jne    38c5 <_var+0x1c5>
    3994:	e9 00 00 00 00       	jmp    3999 <_var+0x299>
    3999:	e9 00 00 00 00       	jmp    399e <_var+0x29e>
    399e:	e9 00 00 00 00       	jmp    39a3 <_var+0x2a3>
    39a3:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    39a9:	3b 45 a8             	cmp    -0x58(%rbp),%eax
    39ac:	0f 8d 4f 00 00 00    	jge    3a01 <_var+0x301>
    39b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    39b6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    39bd:	8b 45 ac             	mov    -0x54(%rbp),%eax
    39c0:	66 89 c1             	mov    %ax,%cx
    39c3:	8b 45 a8             	mov    -0x58(%rbp),%eax
    39c6:	2b 85 74 ff ff ff    	sub    -0x8c(%rbp),%eax
    39cc:	0f b7 f9             	movzwl %cx,%edi
    39cf:	0f b7 f0             	movzwl %ax,%esi
    39d2:	e8 e9 50 00 00       	call   8ac0 <slipI_loadNil>
    39d7:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    39de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    39e4:	8b b5 40 ff ff ff    	mov    -0xc0(%rbp),%esi
    39ea:	e8 31 88 00 00       	call   c220 <slipP_addInstruction>
    39ef:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    39f3:	8b 75 a8             	mov    -0x58(%rbp),%esi
    39f6:	2b b5 74 ff ff ff    	sub    -0x8c(%rbp),%esi
    39fc:	e8 af 8b 00 00       	call   c5b0 <slipP_addLocalVar>
    3a01:	31 ff                	xor    %edi,%edi
    3a03:	be 02 00 00 00       	mov    $0x2,%esi
    3a08:	e8 03 51 00 00       	call   8b10 <slip_Return>
    3a0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a15:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    3a1c:	5d                   	pop    %rbp
    3a1d:	c3                   	ret
    3a1e:	66 90                	xchg   %ax,%ax

0000000000003a20 <_func>:
    3a20:	55                   	push   %rbp
    3a21:	48 89 e5             	mov    %rsp,%rbp
    3a24:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    3a2b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    3a2f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    3a32:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    3a36:	0f 84 23 00 00 00    	je     3a5f <_func+0x3f>
    3a3c:	48 8d 3d 21 48 01 00 	lea    0x14821(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    3a43:	b0 00                	mov    $0x0,%al
    3a45:	e8 86 f6 ff ff       	call   30d0 <printf@plt>
    3a4a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3a4f:	31 f6                	xor    %esi,%esi
    3a51:	e8 ba 50 00 00       	call   8b10 <slip_Return>
    3a56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3a5a:	e9 e8 03 00 00       	jmp    3e47 <_func+0x427>
    3a5f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    3a63:	0f 8c 05 00 00 00    	jl     3a6e <_func+0x4e>
    3a69:	e9 1f 00 00 00       	jmp    3a8d <_func+0x6d>
    3a6e:	48 8d 3d 71 47 01 00 	lea    0x14771(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    3a75:	48 8d 35 73 47 01 00 	lea    0x14773(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    3a7c:	ba 22 01 00 00       	mov    $0x122,%edx
    3a81:	48 8d 0d 02 48 01 00 	lea    0x14802(%rip),%rcx        # 1828a <_IO_stdin_used+0x28a>
    3a88:	e8 63 f6 ff ff       	call   30f0 <__assert_fail@plt>
    3a8d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    3a94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3a98:	31 f6                	xor    %esi,%esi
    3a9a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    3a9d:	e8 1e b4 00 00       	call   eec0 <slipV_getValue>
    3aa2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3aa6:	89 55 e0             	mov    %edx,-0x20(%rbp)
    3aa9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3aad:	48 83 c7 08          	add    $0x8,%rdi
    3ab1:	8b 75 ec             	mov    -0x14(%rbp),%esi
    3ab4:	e8 b7 9f 00 00       	call   da70 <slipS_popValueNum>
    3ab9:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    3ac0:	0f 84 23 00 00 00    	je     3ae9 <_func+0xc9>
    3ac6:	48 8d 3d da 47 01 00 	lea    0x147da(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    3acd:	b0 00                	mov    $0x0,%al
    3acf:	e8 fc f5 ff ff       	call   30d0 <printf@plt>
    3ad4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3ad9:	31 f6                	xor    %esi,%esi
    3adb:	e8 30 50 00 00       	call   8b10 <slip_Return>
    3ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3ae4:	e9 5e 03 00 00       	jmp    3e47 <_func+0x427>
    3ae9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3aed:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3af1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3af5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3af9:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    3afd:	31 f6                	xor    %esi,%esi
    3aff:	ba 10 00 00 00       	mov    $0x10,%edx
    3b04:	e8 f7 f5 ff ff       	call   3100 <memset@plt>
    3b09:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3b0d:	be 08 00 00 00       	mov    $0x8,%esi
    3b12:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    3b16:	e8 35 83 00 00       	call   be50 <slipL_pullListArgument>
    3b1b:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    3b1f:	31 f6                	xor    %esi,%esi
    3b21:	ba 10 00 00 00       	mov    $0x10,%edx
    3b26:	e8 d5 f5 ff ff       	call   3100 <memset@plt>
    3b2b:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3b2f:	be 00 01 00 00       	mov    $0x100,%esi
    3b34:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    3b38:	e8 13 83 00 00       	call   be50 <slipL_pullListArgument>
    3b3d:	83 f8 00             	cmp    $0x0,%eax
    3b40:	0f 84 15 00 00 00    	je     3b5b <_func+0x13b>
    3b46:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3b4b:	31 f6                	xor    %esi,%esi
    3b4d:	e8 be 4f 00 00       	call   8b10 <slip_Return>
    3b52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3b56:	e9 ec 02 00 00       	jmp    3e47 <_func+0x427>
    3b5b:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    3b5f:	31 f6                	xor    %esi,%esi
    3b61:	ba 10 00 00 00       	mov    $0x10,%edx
    3b66:	e8 95 f5 ff ff       	call   3100 <memset@plt>
    3b6b:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3b6f:	be 00 01 00 00       	mov    $0x100,%esi
    3b74:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    3b78:	e8 d3 82 00 00       	call   be50 <slipL_pullListArgument>
    3b7d:	83 f8 00             	cmp    $0x0,%eax
    3b80:	0f 84 15 00 00 00    	je     3b9b <_func+0x17b>
    3b86:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3b8b:	31 f6                	xor    %esi,%esi
    3b8d:	e8 7e 4f 00 00       	call   8b10 <slip_Return>
    3b92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3b96:	e9 ac 02 00 00       	jmp    3e47 <_func+0x427>
    3b9b:	e9 00 00 00 00       	jmp    3ba0 <_func+0x180>
    3ba0:	48 8d 05 6d c8 01 00 	lea    0x1c86d(%rip),%rax        # 20414 <slip_debug_compile>
    3ba7:	f6 00 01             	testb  $0x1,(%rax)
    3baa:	0f 84 12 00 00 00    	je     3bc2 <_func+0x1a2>
    3bb0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    3bb4:	48 8d 3d 15 47 01 00 	lea    0x14715(%rip),%rdi        # 182d0 <_IO_stdin_used+0x2d0>
    3bbb:	b0 00                	mov    $0x0,%al
    3bbd:	e8 0e f5 ff ff       	call   30d0 <printf@plt>
    3bc2:	e9 00 00 00 00       	jmp    3bc7 <_func+0x1a7>
    3bc7:	48 8d 05 46 c8 01 00 	lea    0x1c846(%rip),%rax        # 20414 <slip_debug_compile>
    3bce:	f6 00 01             	testb  $0x1,(%rax)
    3bd1:	0f 84 2c 00 00 00    	je     3c03 <_func+0x1e3>
    3bd7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3bdb:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    3bdf:	8b 55 c0             	mov    -0x40(%rbp),%edx
    3be2:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    3be6:	44 8b 45 b0          	mov    -0x50(%rbp),%r8d
    3bea:	48 8d 45 98          	lea    -0x68(%rbp),%rax
    3bee:	4c 8b 08             	mov    (%rax),%r9
    3bf1:	4c 89 0c 24          	mov    %r9,(%rsp)
    3bf5:	48 8b 40 08          	mov    0x8(%rax),%rax
    3bf9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3bfe:	e8 1d 50 00 00       	call   8c20 <check_func>
    3c03:	b0 00                	mov    $0x0,%al
    3c05:	e8 a6 85 00 00       	call   c1b0 <slipP_createProto>
    3c0a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    3c0e:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    3c12:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    3c16:	e8 b5 a5 00 00       	call   e1d0 <slipV_setValueFunc>
    3c1b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3c1f:	be ff ff ff ff       	mov    $0xffffffff,%esi
    3c24:	e8 c7 78 00 00       	call   b4f0 <slipC_getFunc>
    3c29:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    3c30:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    3c37:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    3c3b:	e8 a0 88 00 00       	call   c4e0 <slipP_addLocalFunc>
    3c40:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
    3c44:	0f 84 14 00 00 00    	je     3c5e <_func+0x23e>
    3c4a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3c4e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    3c52:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    3c56:	8b 4d 88             	mov    -0x78(%rbp),%ecx
    3c59:	e8 62 77 00 00       	call   b3c0 <slipC_setID>
    3c5e:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
    3c65:	00 00 00 
    3c68:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    3c6f:	0f 85 ba 00 00 00    	jne    3d2f <_func+0x30f>
    3c75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c79:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    3c80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c84:	48 8b 78 48          	mov    0x48(%rax),%rdi
    3c88:	e8 73 92 00 00       	call   cf00 <slipD_table>
    3c8d:	48 8b 40 08          	mov    0x8(%rax),%rax
    3c91:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3c95:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    3c99:	ff d0                	call   *%rax
    3c9b:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3ca2:	48 89 c6             	mov    %rax,%rsi
    3ca5:	e8 a6 77 00 00       	call   b450 <slipC_pushEnvStack>
    3caa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    3cae:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    3cb5:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    3cbc:	00 
    3cbd:	0f 84 67 00 00 00    	je     3d2a <_func+0x30a>
    3cc3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    3cca:	48 8b 40 08          	mov    0x8(%rax),%rax
    3cce:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    3cd5:	48 63 b5 74 ff ff ff 	movslq -0x8c(%rbp),%rsi
    3cdc:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
    3ce3:	e8 08 a6 00 00       	call   e2f0 <slipV_setValueInt>
    3ce8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3cec:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
    3cf3:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    3cfa:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
    3d00:	e8 bb 76 00 00       	call   b3c0 <slipC_setID>
    3d05:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    3d0b:	83 c0 01             	add    $0x1,%eax
    3d0e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    3d14:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    3d1b:	48 8b 00             	mov    (%rax),%rax
    3d1e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    3d25:	e9 8b ff ff ff       	jmp    3cb5 <_func+0x295>
    3d2a:	e9 00 00 00 00       	jmp    3d2f <_func+0x30f>
    3d2f:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    3d33:	8b b5 74 ff ff ff    	mov    -0x8c(%rbp),%esi
    3d39:	e8 72 87 00 00       	call   c4b0 <slipP_setArgs>
    3d3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3d42:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    3d49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3d4d:	48 8b 78 48          	mov    0x48(%rax),%rdi
    3d51:	e8 aa 91 00 00       	call   cf00 <slipD_table>
    3d56:	48 8b 40 08          	mov    0x8(%rax),%rax
    3d5a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3d5e:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    3d62:	ff d0                	call   *%rax
    3d64:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    3d6b:	48 89 c6             	mov    %rax,%rsi
    3d6e:	e8 dd 76 00 00       	call   b450 <slipC_pushEnvStack>
    3d73:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3d77:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    3d7b:	e8 40 73 00 00       	call   b0c0 <slipC_pushFuncStack>
    3d80:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3d84:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    3d88:	31 d2                	xor    %edx,%edx
    3d8a:	e8 71 cc 00 00       	call   10a00 <slipV_callList>
    3d8f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    3d95:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
    3d9c:	0f 8e 13 00 00 00    	jle    3db5 <_func+0x395>
    3da2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3da6:	48 83 c7 08          	add    $0x8,%rdi
    3daa:	8b b5 4c ff ff ff    	mov    -0xb4(%rbp),%esi
    3db0:	e8 bb 9c 00 00       	call   da70 <slipS_popValueNum>
    3db5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3db9:	e8 d2 76 00 00       	call   b490 <slipC_popEnvStack>
    3dbe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3dc2:	e8 39 73 00 00       	call   b100 <slipC_popFuncStack>
    3dc7:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    3dce:	0f 85 09 00 00 00    	jne    3ddd <_func+0x3bd>
    3dd4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3dd8:	e8 b3 76 00 00       	call   b490 <slipC_popEnvStack>
    3ddd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3de1:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    3de8:	31 ff                	xor    %edi,%edi
    3dea:	e8 21 4f 00 00       	call   8d10 <slipI_return>
    3def:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    3df6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    3dfc:	8b b5 48 ff ff ff    	mov    -0xb8(%rbp),%esi
    3e02:	e8 19 84 00 00       	call   c220 <slipP_addInstruction>
    3e07:	48 8d 05 06 c6 01 00 	lea    0x1c606(%rip),%rax        # 20414 <slip_debug_compile>
    3e0e:	f6 00 01             	testb  $0x1,(%rax)
    3e11:	0f 84 09 00 00 00    	je     3e20 <_func+0x400>
    3e17:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    3e1b:	e8 e0 87 00 00       	call   c600 <slipP_dump>
    3e20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3e24:	48 83 c7 08          	add    $0x8,%rdi
    3e28:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    3e2c:	8b 55 88             	mov    -0x78(%rbp),%edx
    3e2f:	e8 9c 99 00 00       	call   d7d0 <slipS_pushValue>
    3e34:	bf 01 00 00 00       	mov    $0x1,%edi
    3e39:	be 03 00 00 00       	mov    $0x3,%esi
    3e3e:	e8 cd 4c 00 00       	call   8b10 <slip_Return>
    3e43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e4b:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
    3e52:	5d                   	pop    %rbp
    3e53:	c3                   	ret
    3e54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e5b:	00 00 00 
    3e5e:	66 90                	xchg   %ax,%ax

0000000000003e60 <_call>:
    3e60:	55                   	push   %rbp
    3e61:	48 89 e5             	mov    %rsp,%rbp
    3e64:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    3e6b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    3e6f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    3e72:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    3e76:	0f 84 23 00 00 00    	je     3e9f <_call+0x3f>
    3e7c:	48 8d 3d e1 43 01 00 	lea    0x143e1(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    3e83:	b0 00                	mov    $0x0,%al
    3e85:	e8 46 f2 ff ff       	call   30d0 <printf@plt>
    3e8a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3e8f:	31 f6                	xor    %esi,%esi
    3e91:	e8 7a 4c 00 00       	call   8b10 <slip_Return>
    3e96:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3e9a:	e9 f1 02 00 00       	jmp    4190 <_call+0x330>
    3e9f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    3ea3:	0f 8c 05 00 00 00    	jl     3eae <_call+0x4e>
    3ea9:	e9 1f 00 00 00       	jmp    3ecd <_call+0x6d>
    3eae:	48 8d 3d 31 43 01 00 	lea    0x14331(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    3eb5:	48 8d 35 33 43 01 00 	lea    0x14333(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    3ebc:	ba 9c 01 00 00       	mov    $0x19c,%edx
    3ec1:	48 8d 0d 36 44 01 00 	lea    0x14436(%rip),%rcx        # 182fe <_IO_stdin_used+0x2fe>
    3ec8:	e8 23 f2 ff ff       	call   30f0 <__assert_fail@plt>
    3ecd:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    3ed4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3ed8:	31 f6                	xor    %esi,%esi
    3eda:	2b 75 ec             	sub    -0x14(%rbp),%esi
    3edd:	e8 de af 00 00       	call   eec0 <slipV_getValue>
    3ee2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3ee6:	89 55 e0             	mov    %edx,-0x20(%rbp)
    3ee9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3eed:	48 83 c7 08          	add    $0x8,%rdi
    3ef1:	8b 75 ec             	mov    -0x14(%rbp),%esi
    3ef4:	e8 77 9b 00 00       	call   da70 <slipS_popValueNum>
    3ef9:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    3f00:	0f 84 23 00 00 00    	je     3f29 <_call+0xc9>
    3f06:	48 8d 3d 9a 43 01 00 	lea    0x1439a(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    3f0d:	b0 00                	mov    $0x0,%al
    3f0f:	e8 bc f1 ff ff       	call   30d0 <printf@plt>
    3f14:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3f19:	31 f6                	xor    %esi,%esi
    3f1b:	e8 f0 4b 00 00       	call   8b10 <slip_Return>
    3f20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3f24:	e9 67 02 00 00       	jmp    4190 <_call+0x330>
    3f29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f2d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3f31:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f35:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3f39:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    3f3d:	31 f6                	xor    %esi,%esi
    3f3f:	ba 10 00 00 00       	mov    $0x10,%edx
    3f44:	e8 b7 f1 ff ff       	call   3100 <memset@plt>
    3f49:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3f4d:	be 08 00 00 00       	mov    $0x8,%esi
    3f52:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    3f56:	e8 f5 7e 00 00       	call   be50 <slipL_pullListArgument>
    3f5b:	83 f8 00             	cmp    $0x0,%eax
    3f5e:	0f 84 15 00 00 00    	je     3f79 <_call+0x119>
    3f64:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3f69:	31 f6                	xor    %esi,%esi
    3f6b:	e8 a0 4b 00 00       	call   8b10 <slip_Return>
    3f70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3f74:	e9 17 02 00 00       	jmp    4190 <_call+0x330>
    3f79:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    3f7d:	31 f6                	xor    %esi,%esi
    3f7f:	ba 10 00 00 00       	mov    $0x10,%edx
    3f84:	e8 77 f1 ff ff       	call   3100 <memset@plt>
    3f89:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    3f8d:	be 00 01 00 00       	mov    $0x100,%esi
    3f92:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    3f96:	e8 b5 7e 00 00       	call   be50 <slipL_pullListArgument>
    3f9b:	83 f8 00             	cmp    $0x0,%eax
    3f9e:	0f 84 15 00 00 00    	je     3fb9 <_call+0x159>
    3fa4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3fa9:	31 f6                	xor    %esi,%esi
    3fab:	e8 60 4b 00 00       	call   8b10 <slip_Return>
    3fb0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3fb4:	e9 d7 01 00 00       	jmp    4190 <_call+0x330>
    3fb9:	e9 00 00 00 00       	jmp    3fbe <_call+0x15e>
    3fbe:	48 8d 05 4f c4 01 00 	lea    0x1c44f(%rip),%rax        # 20414 <slip_debug_compile>
    3fc5:	f6 00 01             	testb  $0x1,(%rax)
    3fc8:	0f 84 12 00 00 00    	je     3fe0 <_call+0x180>
    3fce:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    3fd2:	48 8d 3d 42 43 01 00 	lea    0x14342(%rip),%rdi        # 1831b <_IO_stdin_used+0x31b>
    3fd9:	b0 00                	mov    $0x0,%al
    3fdb:	e8 f0 f0 ff ff       	call   30d0 <printf@plt>
    3fe0:	e9 00 00 00 00       	jmp    3fe5 <_call+0x185>
    3fe5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    3fe9:	be ff ff ff ff       	mov    $0xffffffff,%esi
    3fee:	e8 fd 74 00 00       	call   b4f0 <slipC_getFunc>
    3ff3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    3ff7:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    3ffe:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
    4005:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    400c:	0f 85 ab 00 00 00    	jne    40bd <_call+0x25d>
    4012:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4016:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    401a:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    401f:	0f 84 93 00 00 00    	je     40b8 <_call+0x258>
    4025:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4029:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    402d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4031:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4035:	8b 48 10             	mov    0x10(%rax),%ecx
    4038:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    403c:	e8 3f 45 00 00       	call   8580 <load>
    4041:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4044:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4048:	0f 84 51 00 00 00    	je     409f <_call+0x23f>
    404e:	8b 45 8c             	mov    -0x74(%rbp),%eax
    4051:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    4055:	8b 49 10             	mov    0x10(%rcx),%ecx
    4058:	83 e9 01             	sub    $0x1,%ecx
    405b:	39 c8                	cmp    %ecx,%eax
    405d:	0f 84 3c 00 00 00    	je     409f <_call+0x23f>
    4063:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4067:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    406e:	8b 7d 8c             	mov    -0x74(%rbp),%edi
    4071:	e8 ca 4c 00 00       	call   8d40 <slipI_push>
    4076:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    407d:	89 45 88             	mov    %eax,-0x78(%rbp)
    4080:	8b 75 88             	mov    -0x78(%rbp),%esi
    4083:	e8 98 81 00 00       	call   c220 <slipP_addInstruction>
    4088:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    408c:	be 01 00 00 00       	mov    $0x1,%esi
    4091:	e8 1a 85 00 00       	call   c5b0 <slipP_addLocalVar>
    4096:	8b 45 9c             	mov    -0x64(%rbp),%eax
    4099:	83 c0 01             	add    $0x1,%eax
    409c:	89 45 9c             	mov    %eax,-0x64(%rbp)
    409f:	8b 45 98             	mov    -0x68(%rbp),%eax
    40a2:	83 c0 01             	add    $0x1,%eax
    40a5:	89 45 98             	mov    %eax,-0x68(%rbp)
    40a8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    40ac:	48 8b 00             	mov    (%rax),%rax
    40af:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    40b3:	e9 62 ff ff ff       	jmp    401a <_call+0x1ba>
    40b8:	e9 00 00 00 00       	jmp    40bd <_call+0x25d>
    40bd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    40c1:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    40c5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    40c9:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    40cc:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    40d0:	e8 ab 44 00 00       	call   8580 <load>
    40d5:	89 45 84             	mov    %eax,-0x7c(%rbp)
    40d8:	83 7d 9c ff          	cmpl   $0xffffffff,-0x64(%rbp)
    40dc:	0f 84 51 00 00 00    	je     4133 <_call+0x2d3>
    40e2:	8b 45 84             	mov    -0x7c(%rbp),%eax
    40e5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    40e9:	8b 49 10             	mov    0x10(%rcx),%ecx
    40ec:	83 e9 01             	sub    $0x1,%ecx
    40ef:	39 c8                	cmp    %ecx,%eax
    40f1:	0f 84 3c 00 00 00    	je     4133 <_call+0x2d3>
    40f7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    40fb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    4102:	8b 7d 84             	mov    -0x7c(%rbp),%edi
    4105:	e8 36 4c 00 00       	call   8d40 <slipI_push>
    410a:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    4111:	89 45 80             	mov    %eax,-0x80(%rbp)
    4114:	8b 75 80             	mov    -0x80(%rbp),%esi
    4117:	e8 04 81 00 00       	call   c220 <slipP_addInstruction>
    411c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    4120:	be 01 00 00 00       	mov    $0x1,%esi
    4125:	e8 86 84 00 00       	call   c5b0 <slipP_addLocalVar>
    412a:	8b 45 9c             	mov    -0x64(%rbp),%eax
    412d:	83 c0 01             	add    $0x1,%eax
    4130:	89 45 9c             	mov    %eax,-0x64(%rbp)
    4133:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4137:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    413e:	8b 7d 98             	mov    -0x68(%rbp),%edi
    4141:	e8 2a 4c 00 00       	call   8d70 <slipI_call>
    4146:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    414d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    4153:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    4159:	e8 c2 80 00 00       	call   c220 <slipP_addInstruction>
    415e:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    4162:	8b 75 9c             	mov    -0x64(%rbp),%esi
    4165:	e8 76 84 00 00       	call   c5e0 <slipP_popLocalVar>
    416a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    416e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4172:	8b 70 10             	mov    0x10(%rax),%esi
    4175:	83 ee 01             	sub    $0x1,%esi
    4178:	e8 63 b0 00 00       	call   f1e0 <slipV_pushExpr>
    417d:	bf 01 00 00 00       	mov    $0x1,%edi
    4182:	be 02 00 00 00       	mov    $0x2,%esi
    4187:	e8 84 49 00 00       	call   8b10 <slip_Return>
    418c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4194:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    419b:	5d                   	pop    %rbp
    419c:	c3                   	ret
    419d:	0f 1f 00             	nopl   (%rax)

00000000000041a0 <_quote>:
    41a0:	55                   	push   %rbp
    41a1:	48 89 e5             	mov    %rsp,%rbp
    41a4:	48 83 ec 20          	sub    $0x20,%rsp
    41a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    41ac:	89 75 ec             	mov    %esi,-0x14(%rbp)
    41af:	48 8d 05 5e c2 01 00 	lea    0x1c25e(%rip),%rax        # 20414 <slip_debug_compile>
    41b6:	f6 00 01             	testb  $0x1,(%rax)
    41b9:	0f 84 11 00 00 00    	je     41d0 <_quote+0x30>
    41bf:	8b 75 ec             	mov    -0x14(%rbp),%esi
    41c2:	48 8d 3d 62 41 01 00 	lea    0x14162(%rip),%rdi        # 1832b <_IO_stdin_used+0x32b>
    41c9:	b0 00                	mov    $0x0,%al
    41cb:	e8 00 ef ff ff       	call   30d0 <printf@plt>
    41d0:	e9 00 00 00 00       	jmp    41d5 <_quote+0x35>
    41d5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    41d9:	48 83 c7 08          	add    $0x8,%rdi
    41dd:	8b 75 ec             	mov    -0x14(%rbp),%esi
    41e0:	e8 8b 98 00 00       	call   da70 <slipS_popValueNum>
    41e5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    41ea:	31 f6                	xor    %esi,%esi
    41ec:	e8 1f 49 00 00       	call   8b10 <slip_Return>
    41f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    41f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    41f9:	48 83 c4 20          	add    $0x20,%rsp
    41fd:	5d                   	pop    %rbp
    41fe:	c3                   	ret
    41ff:	90                   	nop

0000000000004200 <_defmacro>:
    4200:	55                   	push   %rbp
    4201:	48 89 e5             	mov    %rsp,%rbp
    4204:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    420b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    420f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    4212:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4216:	0f 84 23 00 00 00    	je     423f <_defmacro+0x3f>
    421c:	48 8d 3d 41 40 01 00 	lea    0x14041(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    4223:	b0 00                	mov    $0x0,%al
    4225:	e8 a6 ee ff ff       	call   30d0 <printf@plt>
    422a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    422f:	31 f6                	xor    %esi,%esi
    4231:	e8 da 48 00 00       	call   8b10 <slip_Return>
    4236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    423a:	e9 e8 03 00 00       	jmp    4627 <_defmacro+0x427>
    423f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4243:	0f 8c 05 00 00 00    	jl     424e <_defmacro+0x4e>
    4249:	e9 1f 00 00 00       	jmp    426d <_defmacro+0x6d>
    424e:	48 8d 3d 91 3f 01 00 	lea    0x13f91(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    4255:	48 8d 35 93 3f 01 00 	lea    0x13f93(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    425c:	ba 5e 01 00 00       	mov    $0x15e,%edx
    4261:	48 8d 0d d4 40 01 00 	lea    0x140d4(%rip),%rcx        # 1833c <_IO_stdin_used+0x33c>
    4268:	e8 83 ee ff ff       	call   30f0 <__assert_fail@plt>
    426d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    4274:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4278:	31 f6                	xor    %esi,%esi
    427a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    427d:	e8 3e ac 00 00       	call   eec0 <slipV_getValue>
    4282:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4286:	89 55 e0             	mov    %edx,-0x20(%rbp)
    4289:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    428d:	48 83 c7 08          	add    $0x8,%rdi
    4291:	8b 75 ec             	mov    -0x14(%rbp),%esi
    4294:	e8 d7 97 00 00       	call   da70 <slipS_popValueNum>
    4299:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    42a0:	0f 84 23 00 00 00    	je     42c9 <_defmacro+0xc9>
    42a6:	48 8d 3d fa 3f 01 00 	lea    0x13ffa(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    42ad:	b0 00                	mov    $0x0,%al
    42af:	e8 1c ee ff ff       	call   30d0 <printf@plt>
    42b4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    42b9:	31 f6                	xor    %esi,%esi
    42bb:	e8 50 48 00 00       	call   8b10 <slip_Return>
    42c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    42c4:	e9 5e 03 00 00       	jmp    4627 <_defmacro+0x427>
    42c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    42cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    42d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    42d5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    42d9:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    42dd:	31 f6                	xor    %esi,%esi
    42df:	ba 10 00 00 00       	mov    $0x10,%edx
    42e4:	e8 17 ee ff ff       	call   3100 <memset@plt>
    42e9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    42ed:	be 08 00 00 00       	mov    $0x8,%esi
    42f2:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    42f6:	e8 55 7b 00 00       	call   be50 <slipL_pullListArgument>
    42fb:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    42ff:	31 f6                	xor    %esi,%esi
    4301:	ba 10 00 00 00       	mov    $0x10,%edx
    4306:	e8 f5 ed ff ff       	call   3100 <memset@plt>
    430b:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    430f:	be 00 01 00 00       	mov    $0x100,%esi
    4314:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    4318:	e8 33 7b 00 00       	call   be50 <slipL_pullListArgument>
    431d:	83 f8 00             	cmp    $0x0,%eax
    4320:	0f 84 15 00 00 00    	je     433b <_defmacro+0x13b>
    4326:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    432b:	31 f6                	xor    %esi,%esi
    432d:	e8 de 47 00 00       	call   8b10 <slip_Return>
    4332:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4336:	e9 ec 02 00 00       	jmp    4627 <_defmacro+0x427>
    433b:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    433f:	31 f6                	xor    %esi,%esi
    4341:	ba 10 00 00 00       	mov    $0x10,%edx
    4346:	e8 b5 ed ff ff       	call   3100 <memset@plt>
    434b:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    434f:	be 00 01 00 00       	mov    $0x100,%esi
    4354:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    4358:	e8 f3 7a 00 00       	call   be50 <slipL_pullListArgument>
    435d:	83 f8 00             	cmp    $0x0,%eax
    4360:	0f 84 15 00 00 00    	je     437b <_defmacro+0x17b>
    4366:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    436b:	31 f6                	xor    %esi,%esi
    436d:	e8 9e 47 00 00       	call   8b10 <slip_Return>
    4372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4376:	e9 ac 02 00 00       	jmp    4627 <_defmacro+0x427>
    437b:	e9 00 00 00 00       	jmp    4380 <_defmacro+0x180>
    4380:	48 8d 05 8d c0 01 00 	lea    0x1c08d(%rip),%rax        # 20414 <slip_debug_compile>
    4387:	f6 00 01             	testb  $0x1,(%rax)
    438a:	0f 84 12 00 00 00    	je     43a2 <_defmacro+0x1a2>
    4390:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    4394:	48 8d 3d c2 3f 01 00 	lea    0x13fc2(%rip),%rdi        # 1835d <_IO_stdin_used+0x35d>
    439b:	b0 00                	mov    $0x0,%al
    439d:	e8 2e ed ff ff       	call   30d0 <printf@plt>
    43a2:	e9 00 00 00 00       	jmp    43a7 <_defmacro+0x1a7>
    43a7:	48 8d 05 66 c0 01 00 	lea    0x1c066(%rip),%rax        # 20414 <slip_debug_compile>
    43ae:	f6 00 01             	testb  $0x1,(%rax)
    43b1:	0f 84 2c 00 00 00    	je     43e3 <_defmacro+0x1e3>
    43b7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    43bb:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    43bf:	8b 55 c0             	mov    -0x40(%rbp),%edx
    43c2:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    43c6:	44 8b 45 b0          	mov    -0x50(%rbp),%r8d
    43ca:	48 8d 45 98          	lea    -0x68(%rbp),%rax
    43ce:	4c 8b 08             	mov    (%rax),%r9
    43d1:	4c 89 0c 24          	mov    %r9,(%rsp)
    43d5:	48 8b 40 08          	mov    0x8(%rax),%rax
    43d9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    43de:	e8 3d 48 00 00       	call   8c20 <check_func>
    43e3:	b0 00                	mov    $0x0,%al
    43e5:	e8 c6 7d 00 00       	call   c1b0 <slipP_createProto>
    43ea:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    43ee:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    43f2:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
    43f6:	e8 05 9e 00 00       	call   e200 <slipV_setValueMacro>
    43fb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    43ff:	be ff ff ff ff       	mov    $0xffffffff,%esi
    4404:	e8 e7 70 00 00       	call   b4f0 <slipC_getFunc>
    4409:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    4410:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    4417:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    441b:	e8 c0 80 00 00       	call   c4e0 <slipP_addLocalFunc>
    4420:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
    4424:	0f 84 14 00 00 00    	je     443e <_defmacro+0x23e>
    442a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    442e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    4432:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    4436:	8b 4d 88             	mov    -0x78(%rbp),%ecx
    4439:	e8 82 6f 00 00       	call   b3c0 <slipC_setID>
    443e:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
    4445:	00 00 00 
    4448:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    444f:	0f 85 ba 00 00 00    	jne    450f <_defmacro+0x30f>
    4455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4459:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    4460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4464:	48 8b 78 48          	mov    0x48(%rax),%rdi
    4468:	e8 93 8a 00 00       	call   cf00 <slipD_table>
    446d:	48 8b 40 08          	mov    0x8(%rax),%rax
    4471:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4475:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    4479:	ff d0                	call   *%rax
    447b:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    4482:	48 89 c6             	mov    %rax,%rsi
    4485:	e8 c6 6f 00 00       	call   b450 <slipC_pushEnvStack>
    448a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    448e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    4495:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    449c:	00 
    449d:	0f 84 67 00 00 00    	je     450a <_defmacro+0x30a>
    44a3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    44aa:	48 8b 40 08          	mov    0x8(%rax),%rax
    44ae:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    44b5:	48 63 b5 74 ff ff ff 	movslq -0x8c(%rbp),%rsi
    44bc:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
    44c3:	e8 28 9e 00 00       	call   e2f0 <slipV_setValueInt>
    44c8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    44cc:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
    44d3:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    44da:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
    44e0:	e8 db 6e 00 00       	call   b3c0 <slipC_setID>
    44e5:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    44eb:	83 c0 01             	add    $0x1,%eax
    44ee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    44f4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    44fb:	48 8b 00             	mov    (%rax),%rax
    44fe:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    4505:	e9 8b ff ff ff       	jmp    4495 <_defmacro+0x295>
    450a:	e9 00 00 00 00       	jmp    450f <_defmacro+0x30f>
    450f:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    4513:	8b b5 74 ff ff ff    	mov    -0x8c(%rbp),%esi
    4519:	e8 92 7f 00 00       	call   c4b0 <slipP_setArgs>
    451e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4522:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    4529:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    452d:	48 8b 78 48          	mov    0x48(%rax),%rdi
    4531:	e8 ca 89 00 00       	call   cf00 <slipD_table>
    4536:	48 8b 40 08          	mov    0x8(%rax),%rax
    453a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    453e:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    4542:	ff d0                	call   *%rax
    4544:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    454b:	48 89 c6             	mov    %rax,%rsi
    454e:	e8 fd 6e 00 00       	call   b450 <slipC_pushEnvStack>
    4553:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4557:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    455b:	e8 60 6b 00 00       	call   b0c0 <slipC_pushFuncStack>
    4560:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4564:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    4568:	31 d2                	xor    %edx,%edx
    456a:	e8 91 c4 00 00       	call   10a00 <slipV_callList>
    456f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    4575:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
    457c:	0f 8e 13 00 00 00    	jle    4595 <_defmacro+0x395>
    4582:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4586:	48 83 c7 08          	add    $0x8,%rdi
    458a:	8b b5 4c ff ff ff    	mov    -0xb4(%rbp),%esi
    4590:	e8 db 94 00 00       	call   da70 <slipS_popValueNum>
    4595:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4599:	e8 f2 6e 00 00       	call   b490 <slipC_popEnvStack>
    459e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    45a2:	e8 59 6b 00 00       	call   b100 <slipC_popFuncStack>
    45a7:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    45ae:	0f 85 09 00 00 00    	jne    45bd <_defmacro+0x3bd>
    45b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    45b8:	e8 d3 6e 00 00       	call   b490 <slipC_popEnvStack>
    45bd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    45c1:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    45c8:	31 ff                	xor    %edi,%edi
    45ca:	e8 41 47 00 00       	call   8d10 <slipI_return>
    45cf:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    45d6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    45dc:	8b b5 48 ff ff ff    	mov    -0xb8(%rbp),%esi
    45e2:	e8 39 7c 00 00       	call   c220 <slipP_addInstruction>
    45e7:	48 8d 05 26 be 01 00 	lea    0x1be26(%rip),%rax        # 20414 <slip_debug_compile>
    45ee:	f6 00 01             	testb  $0x1,(%rax)
    45f1:	0f 84 09 00 00 00    	je     4600 <_defmacro+0x400>
    45f7:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    45fb:	e8 00 80 00 00       	call   c600 <slipP_dump>
    4600:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4604:	48 83 c7 08          	add    $0x8,%rdi
    4608:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    460c:	8b 55 88             	mov    -0x78(%rbp),%edx
    460f:	e8 bc 91 00 00       	call   d7d0 <slipS_pushValue>
    4614:	bf 01 00 00 00       	mov    $0x1,%edi
    4619:	be 03 00 00 00       	mov    $0x3,%esi
    461e:	e8 ed 44 00 00       	call   8b10 <slip_Return>
    4623:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    462b:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
    4632:	5d                   	pop    %rbp
    4633:	c3                   	ret
    4634:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    463b:	00 00 00 
    463e:	66 90                	xchg   %ax,%ax

0000000000004640 <_return>:
    4640:	55                   	push   %rbp
    4641:	48 89 e5             	mov    %rsp,%rbp
    4644:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
    464b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    464f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    4652:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4656:	0f 84 23 00 00 00    	je     467f <_return+0x3f>
    465c:	48 8d 3d 01 3c 01 00 	lea    0x13c01(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    4663:	b0 00                	mov    $0x0,%al
    4665:	e8 66 ea ff ff       	call   30d0 <printf@plt>
    466a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    466f:	31 f6                	xor    %esi,%esi
    4671:	e8 9a 44 00 00       	call   8b10 <slip_Return>
    4676:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    467a:	e9 3f 03 00 00       	jmp    49be <_return+0x37e>
    467f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4683:	0f 8c 05 00 00 00    	jl     468e <_return+0x4e>
    4689:	e9 1f 00 00 00       	jmp    46ad <_return+0x6d>
    468e:	48 8d 3d 51 3b 01 00 	lea    0x13b51(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    4695:	48 8d 35 53 3b 01 00 	lea    0x13b53(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    469c:	ba c0 01 00 00       	mov    $0x1c0,%edx
    46a1:	48 8d 0d c9 3c 01 00 	lea    0x13cc9(%rip),%rcx        # 18371 <_IO_stdin_used+0x371>
    46a8:	e8 43 ea ff ff       	call   30f0 <__assert_fail@plt>
    46ad:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    46b4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    46b8:	31 f6                	xor    %esi,%esi
    46ba:	2b 75 ec             	sub    -0x14(%rbp),%esi
    46bd:	e8 fe a7 00 00       	call   eec0 <slipV_getValue>
    46c2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    46c6:	89 55 e0             	mov    %edx,-0x20(%rbp)
    46c9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    46cd:	48 83 c7 08          	add    $0x8,%rdi
    46d1:	8b 75 ec             	mov    -0x14(%rbp),%esi
    46d4:	e8 97 93 00 00       	call   da70 <slipS_popValueNum>
    46d9:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    46e0:	0f 84 23 00 00 00    	je     4709 <_return+0xc9>
    46e6:	48 8d 3d ba 3b 01 00 	lea    0x13bba(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    46ed:	b0 00                	mov    $0x0,%al
    46ef:	e8 dc e9 ff ff       	call   30d0 <printf@plt>
    46f4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    46f9:	31 f6                	xor    %esi,%esi
    46fb:	e8 10 44 00 00       	call   8b10 <slip_Return>
    4700:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4704:	e9 b5 02 00 00       	jmp    49be <_return+0x37e>
    4709:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    470d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4711:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4715:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4719:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    471d:	31 f6                	xor    %esi,%esi
    471f:	ba 10 00 00 00       	mov    $0x10,%edx
    4724:	e8 d7 e9 ff ff       	call   3100 <memset@plt>
    4729:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    472d:	be 0f 01 00 00       	mov    $0x10f,%esi
    4732:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    4736:	e8 15 77 00 00       	call   be50 <slipL_pullListArgument>
    473b:	83 f8 00             	cmp    $0x0,%eax
    473e:	0f 84 15 00 00 00    	je     4759 <_return+0x119>
    4744:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4749:	31 f6                	xor    %esi,%esi
    474b:	e8 c0 43 00 00       	call   8b10 <slip_Return>
    4750:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4754:	e9 65 02 00 00       	jmp    49be <_return+0x37e>
    4759:	e9 00 00 00 00       	jmp    475e <_return+0x11e>
    475e:	48 8d 05 af bc 01 00 	lea    0x1bcaf(%rip),%rax        # 20414 <slip_debug_compile>
    4765:	f6 00 01             	testb  $0x1,(%rax)
    4768:	0f 84 0e 00 00 00    	je     477c <_return+0x13c>
    476e:	48 8d 3d 1b 3c 01 00 	lea    0x13c1b(%rip),%rdi        # 18390 <_IO_stdin_used+0x390>
    4775:	b0 00                	mov    $0x0,%al
    4777:	e8 54 e9 ff ff       	call   30d0 <printf@plt>
    477c:	e9 00 00 00 00       	jmp    4781 <_return+0x141>
    4781:	48 8d 05 8c bc 01 00 	lea    0x1bc8c(%rip),%rax        # 20414 <slip_debug_compile>
    4788:	f6 00 01             	testb  $0x1,(%rax)
    478b:	0f 84 0c 00 00 00    	je     479d <_return+0x15d>
    4791:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    4795:	8b 75 c0             	mov    -0x40(%rbp),%esi
    4798:	e8 93 a1 00 00       	call   e930 <slipV_printValue>
    479d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    47a1:	be ff ff ff ff       	mov    $0xffffffff,%esi
    47a6:	e8 45 6d 00 00       	call   b4f0 <slipC_getFunc>
    47ab:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    47af:	8b 45 c0             	mov    -0x40(%rbp),%eax
    47b2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    47b8:	83 e8 03             	sub    $0x3,%eax
    47bb:	0f 82 43 00 00 00    	jb     4804 <_return+0x1c4>
    47c1:	e9 00 00 00 00       	jmp    47c6 <_return+0x186>
    47c6:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    47cc:	83 e8 04             	sub    $0x4,%eax
    47cf:	0f 84 2f 00 00 00    	je     4804 <_return+0x1c4>
    47d5:	e9 00 00 00 00       	jmp    47da <_return+0x19a>
    47da:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    47e0:	83 e8 08             	sub    $0x8,%eax
    47e3:	0f 84 1b 00 00 00    	je     4804 <_return+0x1c4>
    47e9:	e9 00 00 00 00       	jmp    47ee <_return+0x1ae>
    47ee:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    47f4:	2d 00 01 00 00       	sub    $0x100,%eax
    47f9:	0f 84 ba 00 00 00    	je     48b9 <_return+0x279>
    47ff:	e9 a5 01 00 00       	jmp    49a9 <_return+0x369>
    4804:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    480b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    480f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    4813:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    4817:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    481a:	4c 8d 45 ac          	lea    -0x54(%rbp),%r8
    481e:	e8 5d 3d 00 00       	call   8580 <load>
    4823:	89 45 a8             	mov    %eax,-0x58(%rbp)
    4826:	83 7d a8 ff          	cmpl   $0xffffffff,-0x58(%rbp)
    482a:	0f 84 51 00 00 00    	je     4881 <_return+0x241>
    4830:	8b 45 a8             	mov    -0x58(%rbp),%eax
    4833:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    4837:	8b 49 10             	mov    0x10(%rcx),%ecx
    483a:	83 e9 01             	sub    $0x1,%ecx
    483d:	39 c8                	cmp    %ecx,%eax
    483f:	0f 84 3c 00 00 00    	je     4881 <_return+0x241>
    4845:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    4849:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    4850:	8b 7d a8             	mov    -0x58(%rbp),%edi
    4853:	e8 e8 44 00 00       	call   8d40 <slipI_push>
    4858:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    485f:	89 45 a0             	mov    %eax,-0x60(%rbp)
    4862:	8b 75 a0             	mov    -0x60(%rbp),%esi
    4865:	e8 b6 79 00 00       	call   c220 <slipP_addInstruction>
    486a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    486e:	be 01 00 00 00       	mov    $0x1,%esi
    4873:	e8 38 7d 00 00       	call   c5b0 <slipP_addLocalVar>
    4878:	8b 45 ac             	mov    -0x54(%rbp),%eax
    487b:	83 c0 01             	add    $0x1,%eax
    487e:	89 45 ac             	mov    %eax,-0x54(%rbp)
    4881:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    4885:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    488c:	bf 01 00 00 00       	mov    $0x1,%edi
    4891:	e8 7a 44 00 00       	call   8d10 <slipI_return>
    4896:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    489d:	89 45 98             	mov    %eax,-0x68(%rbp)
    48a0:	8b 75 98             	mov    -0x68(%rbp),%esi
    48a3:	e8 78 79 00 00       	call   c220 <slipP_addInstruction>
    48a8:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    48ac:	8b 75 ac             	mov    -0x54(%rbp),%esi
    48af:	e8 2c 7d 00 00       	call   c5e0 <slipP_popLocalVar>
    48b4:	e9 f5 00 00 00       	jmp    49ae <_return+0x36e>
    48b9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
    48c0:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
    48c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    48cb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    48cf:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    48d4:	0f 84 93 00 00 00    	je     496d <_return+0x32d>
    48da:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    48de:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    48e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    48e6:	48 8b 50 08          	mov    0x8(%rax),%rdx
    48ea:	8b 48 10             	mov    0x10(%rax),%ecx
    48ed:	4c 8d 45 94          	lea    -0x6c(%rbp),%r8
    48f1:	e8 8a 3c 00 00       	call   8580 <load>
    48f6:	89 45 84             	mov    %eax,-0x7c(%rbp)
    48f9:	83 7d 84 ff          	cmpl   $0xffffffff,-0x7c(%rbp)
    48fd:	0f 84 51 00 00 00    	je     4954 <_return+0x314>
    4903:	8b 45 84             	mov    -0x7c(%rbp),%eax
    4906:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    490a:	8b 49 10             	mov    0x10(%rcx),%ecx
    490d:	83 e9 01             	sub    $0x1,%ecx
    4910:	39 c8                	cmp    %ecx,%eax
    4912:	0f 84 3c 00 00 00    	je     4954 <_return+0x314>
    4918:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    491c:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    4923:	8b 7d 84             	mov    -0x7c(%rbp),%edi
    4926:	e8 15 44 00 00       	call   8d40 <slipI_push>
    492b:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
    4932:	89 45 80             	mov    %eax,-0x80(%rbp)
    4935:	8b 75 80             	mov    -0x80(%rbp),%esi
    4938:	e8 e3 78 00 00       	call   c220 <slipP_addInstruction>
    493d:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    4941:	be 01 00 00 00       	mov    $0x1,%esi
    4946:	e8 65 7c 00 00       	call   c5b0 <slipP_addLocalVar>
    494b:	8b 45 94             	mov    -0x6c(%rbp),%eax
    494e:	83 c0 01             	add    $0x1,%eax
    4951:	89 45 94             	mov    %eax,-0x6c(%rbp)
    4954:	8b 45 90             	mov    -0x70(%rbp),%eax
    4957:	83 c0 01             	add    $0x1,%eax
    495a:	89 45 90             	mov    %eax,-0x70(%rbp)
    495d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    4961:	48 8b 00             	mov    (%rax),%rax
    4964:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    4968:	e9 62 ff ff ff       	jmp    48cf <_return+0x28f>
    496d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    4971:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    4978:	8b 7d 90             	mov    -0x70(%rbp),%edi
    497b:	e8 90 43 00 00       	call   8d10 <slipI_return>
    4980:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
    4987:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    498d:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    4993:	e8 88 78 00 00       	call   c220 <slipP_addInstruction>
    4998:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    499c:	8b 75 94             	mov    -0x6c(%rbp),%esi
    499f:	e8 3c 7c 00 00       	call   c5e0 <slipP_popLocalVar>
    49a4:	e9 05 00 00 00       	jmp    49ae <_return+0x36e>
    49a9:	e9 00 00 00 00       	jmp    49ae <_return+0x36e>
    49ae:	31 ff                	xor    %edi,%edi
    49b0:	be 01 00 00 00       	mov    $0x1,%esi
    49b5:	e8 56 41 00 00       	call   8b10 <slip_Return>
    49ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    49be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49c2:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
    49c9:	5d                   	pop    %rbp
    49ca:	c3                   	ret
    49cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000049d0 <_if>:
    49d0:	55                   	push   %rbp
    49d1:	48 89 e5             	mov    %rsp,%rbp
    49d4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    49db:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    49df:	89 75 ec             	mov    %esi,-0x14(%rbp)
    49e2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    49e6:	0f 84 23 00 00 00    	je     4a0f <_if+0x3f>
    49ec:	48 8d 3d 71 38 01 00 	lea    0x13871(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    49f3:	b0 00                	mov    $0x0,%al
    49f5:	e8 d6 e6 ff ff       	call   30d0 <printf@plt>
    49fa:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    49ff:	31 f6                	xor    %esi,%esi
    4a01:	e8 0a 41 00 00       	call   8b10 <slip_Return>
    4a06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4a0a:	e9 14 04 00 00       	jmp    4e23 <_if+0x453>
    4a0f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4a13:	0f 8c 05 00 00 00    	jl     4a1e <_if+0x4e>
    4a19:	e9 1f 00 00 00       	jmp    4a3d <_if+0x6d>
    4a1e:	48 8d 3d c1 37 01 00 	lea    0x137c1(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    4a25:	48 8d 35 c3 37 01 00 	lea    0x137c3(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    4a2c:	ba ff 01 00 00       	mov    $0x1ff,%edx
    4a31:	48 8d 0d 67 39 01 00 	lea    0x13967(%rip),%rcx        # 1839f <_IO_stdin_used+0x39f>
    4a38:	e8 b3 e6 ff ff       	call   30f0 <__assert_fail@plt>
    4a3d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    4a44:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4a48:	31 f6                	xor    %esi,%esi
    4a4a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    4a4d:	e8 6e a4 00 00       	call   eec0 <slipV_getValue>
    4a52:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4a56:	89 55 e0             	mov    %edx,-0x20(%rbp)
    4a59:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4a5d:	48 83 c7 08          	add    $0x8,%rdi
    4a61:	8b 75 ec             	mov    -0x14(%rbp),%esi
    4a64:	e8 07 90 00 00       	call   da70 <slipS_popValueNum>
    4a69:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    4a70:	0f 84 23 00 00 00    	je     4a99 <_if+0xc9>
    4a76:	48 8d 3d 2a 38 01 00 	lea    0x1382a(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    4a7d:	b0 00                	mov    $0x0,%al
    4a7f:	e8 4c e6 ff ff       	call   30d0 <printf@plt>
    4a84:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4a89:	31 f6                	xor    %esi,%esi
    4a8b:	e8 80 40 00 00       	call   8b10 <slip_Return>
    4a90:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4a94:	e9 8a 03 00 00       	jmp    4e23 <_if+0x453>
    4a99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4a9d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4aa1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4aa5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4aa9:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    4aad:	31 f6                	xor    %esi,%esi
    4aaf:	ba 10 00 00 00       	mov    $0x10,%edx
    4ab4:	e8 47 e6 ff ff       	call   3100 <memset@plt>
    4ab9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    4abd:	be 00 01 00 00       	mov    $0x100,%esi
    4ac2:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    4ac6:	e8 85 73 00 00       	call   be50 <slipL_pullListArgument>
    4acb:	83 f8 00             	cmp    $0x0,%eax
    4ace:	0f 84 15 00 00 00    	je     4ae9 <_if+0x119>
    4ad4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4ad9:	31 f6                	xor    %esi,%esi
    4adb:	e8 30 40 00 00       	call   8b10 <slip_Return>
    4ae0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4ae4:	e9 3a 03 00 00       	jmp    4e23 <_if+0x453>
    4ae9:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    4aed:	31 f6                	xor    %esi,%esi
    4aef:	ba 10 00 00 00       	mov    $0x10,%edx
    4af4:	e8 07 e6 ff ff       	call   3100 <memset@plt>
    4af9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    4afd:	be 00 01 00 00       	mov    $0x100,%esi
    4b02:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    4b06:	e8 45 73 00 00       	call   be50 <slipL_pullListArgument>
    4b0b:	83 f8 00             	cmp    $0x0,%eax
    4b0e:	0f 84 15 00 00 00    	je     4b29 <_if+0x159>
    4b14:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4b19:	31 f6                	xor    %esi,%esi
    4b1b:	e8 f0 3f 00 00       	call   8b10 <slip_Return>
    4b20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4b24:	e9 fa 02 00 00       	jmp    4e23 <_if+0x453>
    4b29:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    4b2d:	31 f6                	xor    %esi,%esi
    4b2f:	ba 10 00 00 00       	mov    $0x10,%edx
    4b34:	e8 c7 e5 ff ff       	call   3100 <memset@plt>
    4b39:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    4b3e:	0f 84 7d 00 00 00    	je     4bc1 <_if+0x1f1>
    4b44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b48:	48 8b 78 08          	mov    0x8(%rax),%rdi
    4b4c:	8b 70 10             	mov    0x10(%rax),%esi
    4b4f:	48 8d 15 64 38 01 00 	lea    0x13864(%rip),%rdx        # 183ba <_IO_stdin_used+0x3ba>
    4b56:	e8 15 a3 00 00       	call   ee70 <slipV_isThisID>
    4b5b:	a8 01                	test   $0x1,%al
    4b5d:	0f 85 05 00 00 00    	jne    4b68 <_if+0x198>
    4b63:	e9 59 00 00 00       	jmp    4bc1 <_if+0x1f1>
    4b68:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    4b6c:	e8 df 6f 00 00       	call   bb50 <slipL_forward>
    4b71:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4b75:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    4b7a:	0f 85 2d 00 00 00    	jne    4bad <_if+0x1dd>
    4b80:	48 8b 05 69 b4 01 00 	mov    0x1b469(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    4b87:	48 8b 38             	mov    (%rax),%rdi
    4b8a:	48 8d 35 2e 38 01 00 	lea    0x1382e(%rip),%rsi        # 183bf <_IO_stdin_used+0x3bf>
    4b91:	b0 00                	mov    $0x0,%al
    4b93:	e8 98 e5 ff ff       	call   3130 <fprintf@plt>
    4b98:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4b9d:	31 f6                	xor    %esi,%esi
    4b9f:	e8 6c 3f 00 00       	call   8b10 <slip_Return>
    4ba4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4ba8:	e9 76 02 00 00       	jmp    4e23 <_if+0x453>
    4bad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4bb1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    4bb5:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
    4bb9:	48 8b 40 10          	mov    0x10(%rax),%rax
    4bbd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    4bc1:	e9 00 00 00 00       	jmp    4bc6 <_if+0x1f6>
    4bc6:	48 8d 05 47 b8 01 00 	lea    0x1b847(%rip),%rax        # 20414 <slip_debug_compile>
    4bcd:	f6 00 01             	testb  $0x1,(%rax)
    4bd0:	0f 84 0e 00 00 00    	je     4be4 <_if+0x214>
    4bd6:	48 8d 3d f6 37 01 00 	lea    0x137f6(%rip),%rdi        # 183d3 <_IO_stdin_used+0x3d3>
    4bdd:	b0 00                	mov    $0x0,%al
    4bdf:	e8 ec e4 ff ff       	call   30d0 <printf@plt>
    4be4:	e9 00 00 00 00       	jmp    4be9 <_if+0x219>
    4be9:	48 8d 05 24 b8 01 00 	lea    0x1b824(%rip),%rax        # 20414 <slip_debug_compile>
    4bf0:	f6 00 01             	testb  $0x1,(%rax)
    4bf3:	0f 84 2c 00 00 00    	je     4c25 <_if+0x255>
    4bf9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4bfd:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    4c01:	8b 55 c0             	mov    -0x40(%rbp),%edx
    4c04:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    4c08:	44 8b 45 b0          	mov    -0x50(%rbp),%r8d
    4c0c:	48 8d 45 98          	lea    -0x68(%rbp),%rax
    4c10:	4c 8b 08             	mov    (%rax),%r9
    4c13:	4c 89 0c 24          	mov    %r9,(%rsp)
    4c17:	48 8b 40 08          	mov    0x8(%rax),%rax
    4c1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4c20:	e8 7b 41 00 00       	call   8da0 <check_if>
    4c25:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4c29:	be ff ff ff ff       	mov    $0xffffffff,%esi
    4c2e:	e8 bd 68 00 00       	call   b4f0 <slipC_getFunc>
    4c33:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    4c37:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
    4c3e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4c42:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    4c46:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    4c4a:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    4c4d:	4c 8d 45 8c          	lea    -0x74(%rbp),%r8
    4c51:	e8 2a 39 00 00       	call   8580 <load>
    4c56:	89 45 88             	mov    %eax,-0x78(%rbp)
    4c59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4c5d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    4c64:	8b 45 88             	mov    -0x78(%rbp),%eax
    4c67:	31 f6                	xor    %esi,%esi
    4c69:	0f b7 f8             	movzwl %ax,%edi
    4c6c:	e8 0f 42 00 00       	call   8e80 <slipI_cjp>
    4c71:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    4c78:	89 45 80             	mov    %eax,-0x80(%rbp)
    4c7b:	8b 75 80             	mov    -0x80(%rbp),%esi
    4c7e:	e8 9d 75 00 00       	call   c220 <slipP_addInstruction>
    4c83:	89 45 84             	mov    %eax,-0x7c(%rbp)
    4c86:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    4c8a:	8b 75 8c             	mov    -0x74(%rbp),%esi
    4c8d:	e8 4e 79 00 00       	call   c5e0 <slipP_popLocalVar>
    4c92:	83 7d a0 00          	cmpl   $0x0,-0x60(%rbp)
    4c96:	0f 84 73 00 00 00    	je     4d0f <_if+0x33f>
    4c9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4ca0:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    4ca7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cab:	48 8b 78 48          	mov    0x48(%rax),%rdi
    4caf:	e8 4c 82 00 00       	call   cf00 <slipD_table>
    4cb4:	48 8b 40 08          	mov    0x8(%rax),%rax
    4cb8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4cbc:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    4cc0:	ff d0                	call   *%rax
    4cc2:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
    4cc9:	48 89 c6             	mov    %rax,%rsi
    4ccc:	e8 7f 67 00 00       	call   b450 <slipC_pushEnvStack>
    4cd1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4cd5:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    4cd9:	31 d2                	xor    %edx,%edx
    4cdb:	e8 20 bd 00 00       	call   10a00 <slipV_callList>
    4ce0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
    4ce6:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%rbp)
    4ced:	0f 8e 13 00 00 00    	jle    4d06 <_if+0x336>
    4cf3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4cf7:	48 83 c7 08          	add    $0x8,%rdi
    4cfb:	8b b5 7c ff ff ff    	mov    -0x84(%rbp),%esi
    4d01:	e8 6a 8d 00 00       	call   da70 <slipS_popValueNum>
    4d06:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4d0a:	e8 81 67 00 00       	call   b490 <slipC_popEnvStack>
    4d0f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4d13:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    4d1a:	31 ff                	xor    %edi,%edi
    4d1c:	e8 af 41 00 00       	call   8ed0 <slipI_jmp>
    4d21:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
    4d28:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
    4d2e:	8b b5 70 ff ff ff    	mov    -0x90(%rbp),%esi
    4d34:	e8 e7 74 00 00       	call   c220 <slipP_addInstruction>
    4d39:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    4d3f:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
    4d45:	83 c0 01             	add    $0x1,%eax
    4d48:	2b 45 84             	sub    -0x7c(%rbp),%eax
    4d4b:	66 89 c2             	mov    %ax,%dx
    4d4e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4d52:	48 8b 40 38          	mov    0x38(%rax),%rax
    4d56:	48 63 4d 84          	movslq -0x7c(%rbp),%rcx
    4d5a:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    4d5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4d63:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    4d6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4d6e:	48 8b 78 48          	mov    0x48(%rax),%rdi
    4d72:	e8 89 81 00 00       	call   cf00 <slipD_table>
    4d77:	48 8b 40 08          	mov    0x8(%rax),%rax
    4d7b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4d7f:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    4d83:	ff d0                	call   *%rax
    4d85:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
    4d8c:	48 89 c6             	mov    %rax,%rsi
    4d8f:	e8 bc 66 00 00       	call   b450 <slipC_pushEnvStack>
    4d94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4d98:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    4d9c:	31 d2                	xor    %edx,%edx
    4d9e:	e8 5d bc 00 00       	call   10a00 <slipV_callList>
    4da3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    4da9:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
    4db0:	0f 8e 13 00 00 00    	jle    4dc9 <_if+0x3f9>
    4db6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4dba:	48 83 c7 08          	add    $0x8,%rdi
    4dbe:	8b b5 6c ff ff ff    	mov    -0x94(%rbp),%esi
    4dc4:	e8 a7 8c 00 00       	call   da70 <slipS_popValueNum>
    4dc9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4dcd:	e8 be 66 00 00       	call   b490 <slipC_popEnvStack>
    4dd2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4dd6:	8b 70 18             	mov    0x18(%rax),%esi
    4dd9:	2b b5 78 ff ff ff    	sub    -0x88(%rbp),%esi
    4ddf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    4de3:	48 8b 40 38          	mov    0x38(%rax),%rax
    4de7:	48 63 8d 78 ff ff ff 	movslq -0x88(%rbp),%rcx
    4dee:	8b 14 88             	mov    (%rax,%rcx,4),%edx
    4df1:	81 e6 ff ff ff 03    	and    $0x3ffffff,%esi
    4df7:	c1 e6 06             	shl    $0x6,%esi
    4dfa:	83 e2 3f             	and    $0x3f,%edx
    4dfd:	09 f2                	or     %esi,%edx
    4dff:	89 14 88             	mov    %edx,(%rax,%rcx,4)
    4e02:	8b 4d a0             	mov    -0x60(%rbp),%ecx
    4e05:	be 04 00 00 00       	mov    $0x4,%esi
    4e0a:	b8 02 00 00 00       	mov    $0x2,%eax
    4e0f:	83 f9 00             	cmp    $0x0,%ecx
    4e12:	0f 44 f0             	cmove  %eax,%esi
    4e15:	bf 01 00 00 00       	mov    $0x1,%edi
    4e1a:	e8 f1 3c 00 00       	call   8b10 <slip_Return>
    4e1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e27:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    4e2e:	5d                   	pop    %rbp
    4e2f:	c3                   	ret

0000000000004e30 <_while>:
    4e30:	55                   	push   %rbp
    4e31:	48 89 e5             	mov    %rsp,%rbp
    4e34:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
    4e3b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    4e3f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    4e42:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4e46:	0f 84 23 00 00 00    	je     4e6f <_while+0x3f>
    4e4c:	48 8d 3d 11 34 01 00 	lea    0x13411(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    4e53:	b0 00                	mov    $0x0,%al
    4e55:	e8 76 e2 ff ff       	call   30d0 <printf@plt>
    4e5a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4e5f:	31 f6                	xor    %esi,%esi
    4e61:	e8 aa 3c 00 00       	call   8b10 <slip_Return>
    4e66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4e6a:	e9 18 05 00 00       	jmp    5387 <_while+0x557>
    4e6f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    4e73:	0f 8c 05 00 00 00    	jl     4e7e <_while+0x4e>
    4e79:	e9 1f 00 00 00       	jmp    4e9d <_while+0x6d>
    4e7e:	48 8d 3d 61 33 01 00 	lea    0x13361(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    4e85:	48 8d 35 63 33 01 00 	lea    0x13363(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    4e8c:	ba 32 02 00 00       	mov    $0x232,%edx
    4e91:	48 8d 0d 6c 35 01 00 	lea    0x1356c(%rip),%rcx        # 18404 <_IO_stdin_used+0x404>
    4e98:	e8 53 e2 ff ff       	call   30f0 <__assert_fail@plt>
    4e9d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    4ea4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4ea8:	31 f6                	xor    %esi,%esi
    4eaa:	2b 75 ec             	sub    -0x14(%rbp),%esi
    4ead:	e8 0e a0 00 00       	call   eec0 <slipV_getValue>
    4eb2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4eb6:	89 55 e0             	mov    %edx,-0x20(%rbp)
    4eb9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4ebd:	48 83 c7 08          	add    $0x8,%rdi
    4ec1:	8b 75 ec             	mov    -0x14(%rbp),%esi
    4ec4:	e8 a7 8b 00 00       	call   da70 <slipS_popValueNum>
    4ec9:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    4ed0:	0f 84 23 00 00 00    	je     4ef9 <_while+0xc9>
    4ed6:	48 8d 3d ca 33 01 00 	lea    0x133ca(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    4edd:	b0 00                	mov    $0x0,%al
    4edf:	e8 ec e1 ff ff       	call   30d0 <printf@plt>
    4ee4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4ee9:	31 f6                	xor    %esi,%esi
    4eeb:	e8 20 3c 00 00       	call   8b10 <slip_Return>
    4ef0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4ef4:	e9 8e 04 00 00       	jmp    5387 <_while+0x557>
    4ef9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4efd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4f01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4f05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4f09:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    4f0d:	31 f6                	xor    %esi,%esi
    4f0f:	ba 10 00 00 00       	mov    $0x10,%edx
    4f14:	e8 e7 e1 ff ff       	call   3100 <memset@plt>
    4f19:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    4f1d:	be 00 01 00 00       	mov    $0x100,%esi
    4f22:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    4f26:	e8 25 6f 00 00       	call   be50 <slipL_pullListArgument>
    4f2b:	83 f8 00             	cmp    $0x0,%eax
    4f2e:	0f 84 15 00 00 00    	je     4f49 <_while+0x119>
    4f34:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4f39:	31 f6                	xor    %esi,%esi
    4f3b:	e8 d0 3b 00 00       	call   8b10 <slip_Return>
    4f40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4f44:	e9 3e 04 00 00       	jmp    5387 <_while+0x557>
    4f49:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    4f4d:	31 f6                	xor    %esi,%esi
    4f4f:	ba 10 00 00 00       	mov    $0x10,%edx
    4f54:	e8 a7 e1 ff ff       	call   3100 <memset@plt>
    4f59:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    4f5d:	be 00 01 00 00       	mov    $0x100,%esi
    4f62:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    4f66:	e8 e5 6e 00 00       	call   be50 <slipL_pullListArgument>
    4f6b:	83 f8 00             	cmp    $0x0,%eax
    4f6e:	0f 84 15 00 00 00    	je     4f89 <_while+0x159>
    4f74:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4f79:	31 f6                	xor    %esi,%esi
    4f7b:	e8 90 3b 00 00       	call   8b10 <slip_Return>
    4f80:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4f84:	e9 fe 03 00 00       	jmp    5387 <_while+0x557>
    4f89:	e9 00 00 00 00       	jmp    4f8e <_while+0x15e>
    4f8e:	48 8d 05 7f b4 01 00 	lea    0x1b47f(%rip),%rax        # 20414 <slip_debug_compile>
    4f95:	f6 00 01             	testb  $0x1,(%rax)
    4f98:	0f 84 0e 00 00 00    	je     4fac <_while+0x17c>
    4f9e:	48 8d 3d 7d 34 01 00 	lea    0x1347d(%rip),%rdi        # 18422 <_IO_stdin_used+0x422>
    4fa5:	b0 00                	mov    $0x0,%al
    4fa7:	e8 24 e1 ff ff       	call   30d0 <printf@plt>
    4fac:	e9 00 00 00 00       	jmp    4fb1 <_while+0x181>
    4fb1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    4fb5:	be ff ff ff ff       	mov    $0xffffffff,%esi
    4fba:	e8 31 65 00 00       	call   b4f0 <slipC_getFunc>
    4fbf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    4fc3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4fc7:	8b 40 18             	mov    0x18(%rax),%eax
    4fca:	89 45 9c             	mov    %eax,-0x64(%rbp)
    4fcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4fd1:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    4fd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4fdc:	48 8b 78 48          	mov    0x48(%rax),%rdi
    4fe0:	e8 1b 7f 00 00       	call   cf00 <slipD_table>
    4fe5:	48 8b 40 08          	mov    0x8(%rax),%rax
    4fe9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4fed:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    4ff1:	ff d0                	call   *%rax
    4ff3:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
    4ffa:	48 89 c6             	mov    %rax,%rsi
    4ffd:	e8 1e 65 00 00       	call   b520 <slipC_pushLoopStack>
    5002:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
    5009:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    500d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    5011:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    5015:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    5018:	4c 8d 45 98          	lea    -0x68(%rbp),%r8
    501c:	e8 5f 35 00 00       	call   8580 <load>
    5021:	89 45 94             	mov    %eax,-0x6c(%rbp)
    5024:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    5028:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    502f:	8b 45 94             	mov    -0x6c(%rbp),%eax
    5032:	66 89 c1             	mov    %ax,%cx
    5035:	8b 45 94             	mov    -0x6c(%rbp),%eax
    5038:	0f b7 f9             	movzwl %cx,%edi
    503b:	0f b7 f0             	movzwl %ax,%esi
    503e:	e8 bd 3e 00 00       	call   8f00 <slipI_not>
    5043:	48 8b bd f8 fe ff ff 	mov    -0x108(%rbp),%rdi
    504a:	89 45 90             	mov    %eax,-0x70(%rbp)
    504d:	8b 75 90             	mov    -0x70(%rbp),%esi
    5050:	e8 cb 71 00 00       	call   c220 <slipP_addInstruction>
    5055:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    5059:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    5060:	8b 45 94             	mov    -0x6c(%rbp),%eax
    5063:	31 f6                	xor    %esi,%esi
    5065:	0f b7 f8             	movzwl %ax,%edi
    5068:	e8 13 3e 00 00       	call   8e80 <slipI_cjp>
    506d:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
    5074:	89 45 88             	mov    %eax,-0x78(%rbp)
    5077:	8b 75 88             	mov    -0x78(%rbp),%esi
    507a:	e8 a1 71 00 00       	call   c220 <slipP_addInstruction>
    507f:	89 45 8c             	mov    %eax,-0x74(%rbp)
    5082:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    5086:	8b 75 98             	mov    -0x68(%rbp),%esi
    5089:	e8 52 75 00 00       	call   c5e0 <slipP_popLocalVar>
    508e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5092:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    5099:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    509d:	48 8b 78 48          	mov    0x48(%rax),%rdi
    50a1:	e8 5a 7e 00 00       	call   cf00 <slipD_table>
    50a6:	48 8b 40 08          	mov    0x8(%rax),%rax
    50aa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    50ae:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    50b2:	ff d0                	call   *%rax
    50b4:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
    50bb:	48 89 c6             	mov    %rax,%rsi
    50be:	e8 8d 63 00 00       	call   b450 <slipC_pushEnvStack>
    50c3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    50c7:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    50cb:	31 d2                	xor    %edx,%edx
    50cd:	e8 2e b9 00 00       	call   10a00 <slipV_callList>
    50d2:	89 45 84             	mov    %eax,-0x7c(%rbp)
    50d5:	83 7d 84 00          	cmpl   $0x0,-0x7c(%rbp)
    50d9:	0f 8e 10 00 00 00    	jle    50ef <_while+0x2bf>
    50df:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    50e3:	48 83 c7 08          	add    $0x8,%rdi
    50e7:	8b 75 84             	mov    -0x7c(%rbp),%esi
    50ea:	e8 81 89 00 00       	call   da70 <slipS_popValueNum>
    50ef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    50f3:	e8 98 63 00 00       	call   b490 <slipC_popEnvStack>
    50f8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    50fc:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    5103:	8b 7d 9c             	mov    -0x64(%rbp),%edi
    5106:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    510a:	2b 78 18             	sub    0x18(%rax),%edi
    510d:	e8 be 3d 00 00       	call   8ed0 <slipI_jmp>
    5112:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
    5119:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    511f:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    5125:	e8 f6 70 00 00       	call   c220 <slipP_addInstruction>
    512a:	89 45 80             	mov    %eax,-0x80(%rbp)
    512d:	8b 45 80             	mov    -0x80(%rbp),%eax
    5130:	83 c0 01             	add    $0x1,%eax
    5133:	2b 45 8c             	sub    -0x74(%rbp),%eax
    5136:	66 89 c2             	mov    %ax,%dx
    5139:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    513d:	48 8b 40 38          	mov    0x38(%rax),%rax
    5141:	48 63 4d 8c          	movslq -0x74(%rbp),%rcx
    5145:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    514a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    514e:	e8 0d 64 00 00       	call   b560 <slipC_popLoopStack>
    5153:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    515a:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    5161:	e8 3a 58 00 00       	call   a9a0 <slipM_getMeta>
    5166:	48 8b 40 28          	mov    0x28(%rax),%rax
    516a:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    5171:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    5178:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    517f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5183:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5187:	e8 94 7c 00 00       	call   ce20 <slipD_str>
    518c:	48 8b 40 10          	mov    0x10(%rax),%rax
    5190:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5194:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5198:	48 8d 35 0c 30 01 00 	lea    0x1300c(%rip),%rsi        # 181ab <_IO_stdin_used+0x1ab>
    519f:	ff d0                	call   *%rax
    51a1:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
    51a8:	48 89 c1             	mov    %rax,%rcx
    51ab:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    51b2:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
    51b9:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
    51bf:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    51c6:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
    51cc:	ff d0                	call   *%rax
    51ce:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    51d5:	89 95 68 ff ff ff    	mov    %edx,-0x98(%rbp)
    51db:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
    51e2:	0f 84 73 00 00 00    	je     525b <_while+0x42b>
    51e8:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    51ef:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    51f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    51fd:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    5204:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)
    520b:	00 
    520c:	0f 84 44 00 00 00    	je     5256 <_while+0x426>
    5212:	8b 45 80             	mov    -0x80(%rbp),%eax
    5215:	83 c0 01             	add    $0x1,%eax
    5218:	48 98                	cltq
    521a:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    5221:	48 2b 41 08          	sub    0x8(%rcx),%rax
    5225:	66 89 c2             	mov    %ax,%dx
    5228:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    522c:	48 8b 40 38          	mov    0x38(%rax),%rax
    5230:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    5237:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    523b:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    5240:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    5247:	48 8b 00             	mov    (%rax),%rax
    524a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    5251:	e9 ae ff ff ff       	jmp    5204 <_while+0x3d4>
    5256:	e9 00 00 00 00       	jmp    525b <_while+0x42b>
    525b:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    5262:	e8 39 57 00 00       	call   a9a0 <slipM_getMeta>
    5267:	48 8b 40 28          	mov    0x28(%rax),%rax
    526b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    5272:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    5279:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    5280:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5284:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5288:	e8 93 7b 00 00       	call   ce20 <slipD_str>
    528d:	48 8b 40 10          	mov    0x10(%rax),%rax
    5291:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5295:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5299:	48 8d 35 11 2f 01 00 	lea    0x12f11(%rip),%rsi        # 181b1 <_IO_stdin_used+0x1b1>
    52a0:	ff d0                	call   *%rax
    52a2:	48 8b bd c8 fe ff ff 	mov    -0x138(%rbp),%rdi
    52a9:	48 89 c1             	mov    %rax,%rcx
    52ac:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    52b3:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    52ba:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%rbp)
    52c0:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
    52c7:	8b 95 28 ff ff ff    	mov    -0xd8(%rbp),%edx
    52cd:	ff d0                	call   *%rax
    52cf:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    52d6:	89 95 38 ff ff ff    	mov    %edx,-0xc8(%rbp)
    52dc:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    52e3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    52ea:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    52f1:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    52f8:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
    52ff:	0f 84 6f 00 00 00    	je     5374 <_while+0x544>
    5305:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    530c:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    5313:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    531a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    5321:	48 83 bd 10 ff ff ff 	cmpq   $0x0,-0xf0(%rbp)
    5328:	00 
    5329:	0f 84 40 00 00 00    	je     536f <_while+0x53f>
    532f:	48 63 45 9c          	movslq -0x64(%rbp),%rax
    5333:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
    533a:	48 2b 41 08          	sub    0x8(%rcx),%rax
    533e:	66 89 c2             	mov    %ax,%dx
    5341:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    5345:	48 8b 40 38          	mov    0x38(%rax),%rax
    5349:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
    5350:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    5354:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    5359:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    5360:	48 8b 00             	mov    (%rax),%rax
    5363:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    536a:	e9 b2 ff ff ff       	jmp    5321 <_while+0x4f1>
    536f:	e9 00 00 00 00       	jmp    5374 <_while+0x544>
    5374:	bf 01 00 00 00       	mov    $0x1,%edi
    5379:	be 02 00 00 00       	mov    $0x2,%esi
    537e:	e8 8d 37 00 00       	call   8b10 <slip_Return>
    5383:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    538b:	48 81 c4 40 01 00 00 	add    $0x140,%rsp
    5392:	5d                   	pop    %rbp
    5393:	c3                   	ret
    5394:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    539b:	00 00 00 
    539e:	66 90                	xchg   %ax,%ax

00000000000053a0 <_for>:
    53a0:	55                   	push   %rbp
    53a1:	48 89 e5             	mov    %rsp,%rbp
    53a4:	48 81 ec 70 01 00 00 	sub    $0x170,%rsp
    53ab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    53af:	89 75 ec             	mov    %esi,-0x14(%rbp)
    53b2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    53b6:	0f 84 23 00 00 00    	je     53df <_for+0x3f>
    53bc:	48 8d 3d a1 2e 01 00 	lea    0x12ea1(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    53c3:	b0 00                	mov    $0x0,%al
    53c5:	e8 06 dd ff ff       	call   30d0 <printf@plt>
    53ca:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    53cf:	31 f6                	xor    %esi,%esi
    53d1:	e8 3a 37 00 00       	call   8b10 <slip_Return>
    53d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    53da:	e9 b1 06 00 00       	jmp    5a90 <_for+0x6f0>
    53df:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    53e3:	0f 8c 05 00 00 00    	jl     53ee <_for+0x4e>
    53e9:	e9 1f 00 00 00       	jmp    540d <_for+0x6d>
    53ee:	48 8d 3d f1 2d 01 00 	lea    0x12df1(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    53f5:	48 8d 35 f3 2d 01 00 	lea    0x12df3(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    53fc:	ba 69 02 00 00       	mov    $0x269,%edx
    5401:	48 8d 0d 28 30 01 00 	lea    0x13028(%rip),%rcx        # 18430 <_IO_stdin_used+0x430>
    5408:	e8 e3 dc ff ff       	call   30f0 <__assert_fail@plt>
    540d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    5414:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5418:	31 f6                	xor    %esi,%esi
    541a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    541d:	e8 9e 9a 00 00       	call   eec0 <slipV_getValue>
    5422:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5426:	89 55 e0             	mov    %edx,-0x20(%rbp)
    5429:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    542d:	48 83 c7 08          	add    $0x8,%rdi
    5431:	8b 75 ec             	mov    -0x14(%rbp),%esi
    5434:	e8 37 86 00 00       	call   da70 <slipS_popValueNum>
    5439:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    5440:	0f 84 23 00 00 00    	je     5469 <_for+0xc9>
    5446:	48 8d 3d 5a 2e 01 00 	lea    0x12e5a(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    544d:	b0 00                	mov    $0x0,%al
    544f:	e8 7c dc ff ff       	call   30d0 <printf@plt>
    5454:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5459:	31 f6                	xor    %esi,%esi
    545b:	e8 b0 36 00 00       	call   8b10 <slip_Return>
    5460:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5464:	e9 27 06 00 00       	jmp    5a90 <_for+0x6f0>
    5469:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    546d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5471:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5475:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5479:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    547d:	31 f6                	xor    %esi,%esi
    547f:	ba 10 00 00 00       	mov    $0x10,%edx
    5484:	e8 77 dc ff ff       	call   3100 <memset@plt>
    5489:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    548d:	be 00 01 00 00       	mov    $0x100,%esi
    5492:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    5496:	e8 b5 69 00 00       	call   be50 <slipL_pullListArgument>
    549b:	83 f8 00             	cmp    $0x0,%eax
    549e:	0f 84 15 00 00 00    	je     54b9 <_for+0x119>
    54a4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    54a9:	31 f6                	xor    %esi,%esi
    54ab:	e8 60 36 00 00       	call   8b10 <slip_Return>
    54b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    54b4:	e9 d7 05 00 00       	jmp    5a90 <_for+0x6f0>
    54b9:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    54bd:	31 f6                	xor    %esi,%esi
    54bf:	ba 10 00 00 00       	mov    $0x10,%edx
    54c4:	e8 37 dc ff ff       	call   3100 <memset@plt>
    54c9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    54cd:	be 00 01 00 00       	mov    $0x100,%esi
    54d2:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    54d6:	e8 75 69 00 00       	call   be50 <slipL_pullListArgument>
    54db:	83 f8 00             	cmp    $0x0,%eax
    54de:	0f 84 15 00 00 00    	je     54f9 <_for+0x159>
    54e4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    54e9:	31 f6                	xor    %esi,%esi
    54eb:	e8 20 36 00 00       	call   8b10 <slip_Return>
    54f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    54f4:	e9 97 05 00 00       	jmp    5a90 <_for+0x6f0>
    54f9:	e9 00 00 00 00       	jmp    54fe <_for+0x15e>
    54fe:	48 8d 05 0f af 01 00 	lea    0x1af0f(%rip),%rax        # 20414 <slip_debug_compile>
    5505:	f6 00 01             	testb  $0x1,(%rax)
    5508:	0f 84 0e 00 00 00    	je     551c <_for+0x17c>
    550e:	48 8d 3d 37 2f 01 00 	lea    0x12f37(%rip),%rdi        # 1844c <_IO_stdin_used+0x44c>
    5515:	b0 00                	mov    $0x0,%al
    5517:	e8 b4 db ff ff       	call   30d0 <printf@plt>
    551c:	e9 00 00 00 00       	jmp    5521 <_for+0x181>
    5521:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    5525:	8b 75 c0             	mov    -0x40(%rbp),%esi
    5528:	e8 03 94 00 00       	call   e930 <slipV_printValue>
    552d:	48 8d 05 e0 ae 01 00 	lea    0x1aee0(%rip),%rax        # 20414 <slip_debug_compile>
    5534:	f6 00 01             	testb  $0x1,(%rax)
    5537:	0f 84 0e 00 00 00    	je     554b <_for+0x1ab>
    553d:	48 8d 3d 0e 2f 01 00 	lea    0x12f0e(%rip),%rdi        # 18452 <_IO_stdin_used+0x452>
    5544:	b0 00                	mov    $0x0,%al
    5546:	e8 85 db ff ff       	call   30d0 <printf@plt>
    554b:	e9 00 00 00 00       	jmp    5550 <_for+0x1b0>
    5550:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5554:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    5558:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    555c:	be 00 01 00 00       	mov    $0x100,%esi
    5561:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    5565:	e8 e6 68 00 00       	call   be50 <slipL_pullListArgument>
    556a:	83 f8 00             	cmp    $0x0,%eax
    556d:	0f 84 15 00 00 00    	je     5588 <_for+0x1e8>
    5573:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5578:	31 f6                	xor    %esi,%esi
    557a:	e8 91 35 00 00       	call   8b10 <slip_Return>
    557f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5583:	e9 08 05 00 00       	jmp    5a90 <_for+0x6f0>
    5588:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    558c:	8b 75 98             	mov    -0x68(%rbp),%esi
    558f:	e8 9c 93 00 00       	call   e930 <slipV_printValue>
    5594:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    5598:	be 00 01 00 00       	mov    $0x100,%esi
    559d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    55a1:	e8 aa 68 00 00       	call   be50 <slipL_pullListArgument>
    55a6:	83 f8 00             	cmp    $0x0,%eax
    55a9:	0f 84 15 00 00 00    	je     55c4 <_for+0x224>
    55af:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    55b4:	31 f6                	xor    %esi,%esi
    55b6:	e8 55 35 00 00       	call   8b10 <slip_Return>
    55bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    55bf:	e9 cc 04 00 00       	jmp    5a90 <_for+0x6f0>
    55c4:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    55c8:	8b 75 88             	mov    -0x78(%rbp),%esi
    55cb:	e8 60 93 00 00       	call   e930 <slipV_printValue>
    55d0:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    55d4:	be 00 01 00 00       	mov    $0x100,%esi
    55d9:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    55e0:	e8 6b 68 00 00       	call   be50 <slipL_pullListArgument>
    55e5:	83 f8 00             	cmp    $0x0,%eax
    55e8:	0f 84 15 00 00 00    	je     5603 <_for+0x263>
    55ee:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    55f3:	31 f6                	xor    %esi,%esi
    55f5:	e8 16 35 00 00       	call   8b10 <slip_Return>
    55fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    55fe:	e9 8d 04 00 00       	jmp    5a90 <_for+0x6f0>
    5603:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
    560a:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    5610:	e8 1b 93 00 00       	call   e930 <slipV_printValue>
    5615:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5619:	be ff ff ff ff       	mov    $0xffffffff,%esi
    561e:	e8 cd 5e 00 00       	call   b4f0 <slipC_getFunc>
    5623:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    562a:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
    5631:	00 00 00 
    5634:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5638:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    563f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    5643:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    5646:	4c 8d 85 64 ff ff ff 	lea    -0x9c(%rbp),%r8
    564d:	e8 2e 2f 00 00       	call   8580 <load>
    5652:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5659:	8b 40 18             	mov    0x18(%rax),%eax
    565c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
    5662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5666:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    566d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5671:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5675:	e8 86 78 00 00       	call   cf00 <slipD_table>
    567a:	48 8b 40 08          	mov    0x8(%rax),%rax
    567e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5682:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5686:	ff d0                	call   *%rax
    5688:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
    568f:	48 89 c6             	mov    %rax,%rsi
    5692:	e8 89 5e 00 00       	call   b520 <slipC_pushLoopStack>
    5697:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    569b:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    56a2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    56a6:	8b 4d 88             	mov    -0x78(%rbp),%ecx
    56a9:	4c 8d 85 64 ff ff ff 	lea    -0x9c(%rbp),%r8
    56b0:	e8 cb 2e 00 00       	call   8580 <load>
    56b5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
    56bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    56c2:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    56c9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    56cf:	66 89 c1             	mov    %ax,%cx
    56d2:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    56d8:	0f b7 f9             	movzwl %cx,%edi
    56db:	0f b7 f0             	movzwl %ax,%esi
    56de:	e8 1d 38 00 00       	call   8f00 <slipI_not>
    56e3:	48 8b bd c0 fe ff ff 	mov    -0x140(%rbp),%rdi
    56ea:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    56f0:	8b b5 58 ff ff ff    	mov    -0xa8(%rbp),%esi
    56f6:	e8 25 6b 00 00       	call   c220 <slipP_addInstruction>
    56fb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5702:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    5709:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    570f:	31 f6                	xor    %esi,%esi
    5711:	0f b7 f8             	movzwl %ax,%edi
    5714:	e8 67 37 00 00       	call   8e80 <slipI_cjp>
    5719:	48 8b bd c8 fe ff ff 	mov    -0x138(%rbp),%rdi
    5720:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    5726:	8b b5 50 ff ff ff    	mov    -0xb0(%rbp),%esi
    572c:	e8 ef 6a 00 00       	call   c220 <slipP_addInstruction>
    5731:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    5737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    573b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    5742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5746:	48 8b 78 48          	mov    0x48(%rax),%rdi
    574a:	e8 b1 77 00 00       	call   cf00 <slipD_table>
    574f:	48 8b 40 08          	mov    0x8(%rax),%rax
    5753:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5757:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    575b:	ff d0                	call   *%rax
    575d:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
    5764:	48 89 c6             	mov    %rax,%rsi
    5767:	e8 e4 5c 00 00       	call   b450 <slipC_pushEnvStack>
    576c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5770:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    5774:	31 d2                	xor    %edx,%edx
    5776:	e8 85 b2 00 00       	call   10a00 <slipV_callList>
    577b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    5781:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
    5788:	0f 8e 13 00 00 00    	jle    57a1 <_for+0x401>
    578e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5792:	48 83 c7 08          	add    $0x8,%rdi
    5796:	8b b5 4c ff ff ff    	mov    -0xb4(%rbp),%esi
    579c:	e8 cf 82 00 00       	call   da70 <slipS_popValueNum>
    57a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    57a5:	e8 e6 5c 00 00       	call   b490 <slipC_popEnvStack>
    57aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    57ae:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    57b5:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    57bc:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    57c2:	4c 8d 85 64 ff ff ff 	lea    -0x9c(%rbp),%r8
    57c9:	e8 b2 2d 00 00       	call   8580 <load>
    57ce:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    57d5:	8b b5 64 ff ff ff    	mov    -0x9c(%rbp),%esi
    57db:	e8 00 6e 00 00       	call   c5e0 <slipP_popLocalVar>
    57e0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    57e7:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
    57ee:	8b bd 60 ff ff ff    	mov    -0xa0(%rbp),%edi
    57f4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    57fb:	2b 78 18             	sub    0x18(%rax),%edi
    57fe:	e8 cd 36 00 00       	call   8ed0 <slipI_jmp>
    5803:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
    580a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    5810:	8b b5 40 ff ff ff    	mov    -0xc0(%rbp),%esi
    5816:	e8 05 6a 00 00       	call   c220 <slipP_addInstruction>
    581b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    5821:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
    5827:	83 c0 01             	add    $0x1,%eax
    582a:	2b 85 54 ff ff ff    	sub    -0xac(%rbp),%eax
    5830:	66 89 c2             	mov    %ax,%dx
    5833:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    583a:	48 8b 40 38          	mov    0x38(%rax),%rax
    583e:	48 63 8d 54 ff ff ff 	movslq -0xac(%rbp),%rcx
    5845:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    584a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    584e:	e8 0d 5d 00 00       	call   b560 <slipC_popLoopStack>
    5853:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    585a:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    5861:	e8 3a 51 00 00       	call   a9a0 <slipM_getMeta>
    5866:	48 8b 40 28          	mov    0x28(%rax),%rax
    586a:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    5871:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    5878:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    587f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5883:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5887:	e8 94 75 00 00       	call   ce20 <slipD_str>
    588c:	48 8b 40 10          	mov    0x10(%rax),%rax
    5890:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5894:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5898:	48 8d 35 0c 29 01 00 	lea    0x1290c(%rip),%rsi        # 181ab <_IO_stdin_used+0x1ab>
    589f:	ff d0                	call   *%rax
    58a1:	48 8b bd a8 fe ff ff 	mov    -0x158(%rbp),%rdi
    58a8:	48 89 c1             	mov    %rax,%rcx
    58ab:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    58b2:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
    58b9:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)
    58bf:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
    58c6:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx
    58cc:	ff d0                	call   *%rax
    58ce:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    58d5:	89 95 30 ff ff ff    	mov    %edx,-0xd0(%rbp)
    58db:	83 bd 30 ff ff ff 00 	cmpl   $0x0,-0xd0(%rbp)
    58e2:	0f 84 79 00 00 00    	je     5961 <_for+0x5c1>
    58e8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    58ef:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    58f6:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    58fd:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    5904:	48 83 bd 08 ff ff ff 	cmpq   $0x0,-0xf8(%rbp)
    590b:	00 
    590c:	0f 84 4a 00 00 00    	je     595c <_for+0x5bc>
    5912:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
    5918:	83 c0 01             	add    $0x1,%eax
    591b:	48 98                	cltq
    591d:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
    5924:	48 2b 41 08          	sub    0x8(%rcx),%rax
    5928:	66 89 c2             	mov    %ax,%dx
    592b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5932:	48 8b 40 38          	mov    0x38(%rax),%rax
    5936:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
    593d:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    5941:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    5946:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    594d:	48 8b 00             	mov    (%rax),%rax
    5950:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    5957:	e9 a8 ff ff ff       	jmp    5904 <_for+0x564>
    595c:	e9 00 00 00 00       	jmp    5961 <_for+0x5c1>
    5961:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    5968:	e8 33 50 00 00       	call   a9a0 <slipM_getMeta>
    596d:	48 8b 40 28          	mov    0x28(%rax),%rax
    5971:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    5978:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    597f:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    5986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    598a:	48 8b 78 48          	mov    0x48(%rax),%rdi
    598e:	e8 8d 74 00 00       	call   ce20 <slipD_str>
    5993:	48 8b 40 10          	mov    0x10(%rax),%rax
    5997:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    599b:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    599f:	48 8d 35 0b 28 01 00 	lea    0x1280b(%rip),%rsi        # 181b1 <_IO_stdin_used+0x1b1>
    59a6:	ff d0                	call   *%rax
    59a8:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
    59af:	48 89 c1             	mov    %rax,%rcx
    59b2:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    59b9:	48 89 8d e8 fe ff ff 	mov    %rcx,-0x118(%rbp)
    59c0:	89 95 f0 fe ff ff    	mov    %edx,-0x110(%rbp)
    59c6:	48 8b b5 e8 fe ff ff 	mov    -0x118(%rbp),%rsi
    59cd:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
    59d3:	ff d0                	call   *%rax
    59d5:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    59dc:	89 95 00 ff ff ff    	mov    %edx,-0x100(%rbp)
    59e2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    59e9:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    59f0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    59f7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    59fe:	83 bd 30 ff ff ff 00 	cmpl   $0x0,-0xd0(%rbp)
    5a05:	0f 84 75 00 00 00    	je     5a80 <_for+0x6e0>
    5a0b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    5a12:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    5a19:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    5a20:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    5a27:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
    5a2e:	00 
    5a2f:	0f 84 46 00 00 00    	je     5a7b <_for+0x6db>
    5a35:	48 63 85 60 ff ff ff 	movslq -0xa0(%rbp),%rax
    5a3c:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    5a43:	48 2b 41 08          	sub    0x8(%rcx),%rax
    5a47:	66 89 c2             	mov    %ax,%dx
    5a4a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    5a51:	48 8b 40 38          	mov    0x38(%rax),%rax
    5a55:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
    5a5c:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    5a60:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    5a65:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    5a6c:	48 8b 00             	mov    (%rax),%rax
    5a6f:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    5a76:	e9 ac ff ff ff       	jmp    5a27 <_for+0x687>
    5a7b:	e9 00 00 00 00       	jmp    5a80 <_for+0x6e0>
    5a80:	31 ff                	xor    %edi,%edi
    5a82:	be 02 00 00 00       	mov    $0x2,%esi
    5a87:	e8 84 30 00 00       	call   8b10 <slip_Return>
    5a8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5a90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a94:	48 81 c4 70 01 00 00 	add    $0x170,%rsp
    5a9b:	5d                   	pop    %rbp
    5a9c:	c3                   	ret
    5a9d:	0f 1f 00             	nopl   (%rax)

0000000000005aa0 <_foreach>:
    5aa0:	55                   	push   %rbp
    5aa1:	48 89 e5             	mov    %rsp,%rbp
    5aa4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    5aab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    5aaf:	89 75 ec             	mov    %esi,-0x14(%rbp)
    5ab2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    5ab6:	0f 84 23 00 00 00    	je     5adf <_foreach+0x3f>
    5abc:	48 8d 3d a1 27 01 00 	lea    0x127a1(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    5ac3:	b0 00                	mov    $0x0,%al
    5ac5:	e8 06 d6 ff ff       	call   30d0 <printf@plt>
    5aca:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5acf:	31 f6                	xor    %esi,%esi
    5ad1:	e8 3a 30 00 00       	call   8b10 <slip_Return>
    5ad6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5ada:	e9 d2 01 00 00       	jmp    5cb1 <_foreach+0x211>
    5adf:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    5ae3:	0f 8c 05 00 00 00    	jl     5aee <_foreach+0x4e>
    5ae9:	e9 1f 00 00 00       	jmp    5b0d <_foreach+0x6d>
    5aee:	48 8d 3d f1 26 01 00 	lea    0x126f1(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    5af5:	48 8d 35 f3 26 01 00 	lea    0x126f3(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    5afc:	ba b6 02 00 00       	mov    $0x2b6,%edx
    5b01:	48 8d 0d 56 29 01 00 	lea    0x12956(%rip),%rcx        # 1845e <_IO_stdin_used+0x45e>
    5b08:	e8 e3 d5 ff ff       	call   30f0 <__assert_fail@plt>
    5b0d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    5b14:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5b18:	31 f6                	xor    %esi,%esi
    5b1a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    5b1d:	e8 9e 93 00 00       	call   eec0 <slipV_getValue>
    5b22:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5b26:	89 55 e0             	mov    %edx,-0x20(%rbp)
    5b29:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5b2d:	48 83 c7 08          	add    $0x8,%rdi
    5b31:	8b 75 ec             	mov    -0x14(%rbp),%esi
    5b34:	e8 37 7f 00 00       	call   da70 <slipS_popValueNum>
    5b39:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    5b40:	0f 84 23 00 00 00    	je     5b69 <_foreach+0xc9>
    5b46:	48 8d 3d 5a 27 01 00 	lea    0x1275a(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    5b4d:	b0 00                	mov    $0x0,%al
    5b4f:	e8 7c d5 ff ff       	call   30d0 <printf@plt>
    5b54:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5b59:	31 f6                	xor    %esi,%esi
    5b5b:	e8 b0 2f 00 00       	call   8b10 <slip_Return>
    5b60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5b64:	e9 48 01 00 00       	jmp    5cb1 <_foreach+0x211>
    5b69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5b71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5b75:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5b79:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    5b7d:	31 f6                	xor    %esi,%esi
    5b7f:	ba 10 00 00 00       	mov    $0x10,%edx
    5b84:	e8 77 d5 ff ff       	call   3100 <memset@plt>
    5b89:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5b8d:	be 08 01 00 00       	mov    $0x108,%esi
    5b92:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    5b96:	e8 b5 62 00 00       	call   be50 <slipL_pullListArgument>
    5b9b:	83 f8 00             	cmp    $0x0,%eax
    5b9e:	0f 84 15 00 00 00    	je     5bb9 <_foreach+0x119>
    5ba4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5ba9:	31 f6                	xor    %esi,%esi
    5bab:	e8 60 2f 00 00       	call   8b10 <slip_Return>
    5bb0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5bb4:	e9 f8 00 00 00       	jmp    5cb1 <_foreach+0x211>
    5bb9:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    5bbd:	31 f6                	xor    %esi,%esi
    5bbf:	ba 10 00 00 00       	mov    $0x10,%edx
    5bc4:	e8 37 d5 ff ff       	call   3100 <memset@plt>
    5bc9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5bcd:	be 08 00 00 00       	mov    $0x8,%esi
    5bd2:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    5bd6:	e8 75 62 00 00       	call   be50 <slipL_pullListArgument>
    5bdb:	83 f8 00             	cmp    $0x0,%eax
    5bde:	0f 84 15 00 00 00    	je     5bf9 <_foreach+0x159>
    5be4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5be9:	31 f6                	xor    %esi,%esi
    5beb:	e8 20 2f 00 00       	call   8b10 <slip_Return>
    5bf0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5bf4:	e9 b8 00 00 00       	jmp    5cb1 <_foreach+0x211>
    5bf9:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    5bfd:	31 f6                	xor    %esi,%esi
    5bff:	ba 10 00 00 00       	mov    $0x10,%edx
    5c04:	e8 f7 d4 ff ff       	call   3100 <memset@plt>
    5c09:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5c0d:	be 08 01 00 00       	mov    $0x108,%esi
    5c12:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    5c16:	e8 35 62 00 00       	call   be50 <slipL_pullListArgument>
    5c1b:	83 f8 00             	cmp    $0x0,%eax
    5c1e:	0f 84 15 00 00 00    	je     5c39 <_foreach+0x199>
    5c24:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5c29:	31 f6                	xor    %esi,%esi
    5c2b:	e8 e0 2e 00 00       	call   8b10 <slip_Return>
    5c30:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5c34:	e9 78 00 00 00       	jmp    5cb1 <_foreach+0x211>
    5c39:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
    5c3d:	31 f6                	xor    %esi,%esi
    5c3f:	ba 10 00 00 00       	mov    $0x10,%edx
    5c44:	e8 b7 d4 ff ff       	call   3100 <memset@plt>
    5c49:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5c4d:	be 00 01 00 00       	mov    $0x100,%esi
    5c52:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
    5c56:	e8 f5 61 00 00       	call   be50 <slipL_pullListArgument>
    5c5b:	83 f8 00             	cmp    $0x0,%eax
    5c5e:	0f 84 15 00 00 00    	je     5c79 <_foreach+0x1d9>
    5c64:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5c69:	31 f6                	xor    %esi,%esi
    5c6b:	e8 a0 2e 00 00       	call   8b10 <slip_Return>
    5c70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5c74:	e9 38 00 00 00       	jmp    5cb1 <_foreach+0x211>
    5c79:	e9 00 00 00 00       	jmp    5c7e <_foreach+0x1de>
    5c7e:	48 8d 05 8f a7 01 00 	lea    0x1a78f(%rip),%rax        # 20414 <slip_debug_compile>
    5c85:	f6 00 01             	testb  $0x1,(%rax)
    5c88:	0f 84 0e 00 00 00    	je     5c9c <_foreach+0x1fc>
    5c8e:	48 8d 3d e9 27 01 00 	lea    0x127e9(%rip),%rdi        # 1847e <_IO_stdin_used+0x47e>
    5c95:	b0 00                	mov    $0x0,%al
    5c97:	e8 34 d4 ff ff       	call   30d0 <printf@plt>
    5c9c:	e9 00 00 00 00       	jmp    5ca1 <_foreach+0x201>
    5ca1:	31 ff                	xor    %edi,%edi
    5ca3:	be 04 00 00 00       	mov    $0x4,%esi
    5ca8:	e8 63 2e 00 00       	call   8b10 <slip_Return>
    5cad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5cb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cb5:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    5cbc:	5d                   	pop    %rbp
    5cbd:	c3                   	ret
    5cbe:	66 90                	xchg   %ax,%ax

0000000000005cc0 <_dowhile>:
    5cc0:	55                   	push   %rbp
    5cc1:	48 89 e5             	mov    %rsp,%rbp
    5cc4:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
    5ccb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    5ccf:	89 75 ec             	mov    %esi,-0x14(%rbp)
    5cd2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    5cd6:	0f 84 23 00 00 00    	je     5cff <_dowhile+0x3f>
    5cdc:	48 8d 3d 81 25 01 00 	lea    0x12581(%rip),%rdi        # 18264 <_IO_stdin_used+0x264>
    5ce3:	b0 00                	mov    $0x0,%al
    5ce5:	e8 e6 d3 ff ff       	call   30d0 <printf@plt>
    5cea:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5cef:	31 f6                	xor    %esi,%esi
    5cf1:	e8 1a 2e 00 00       	call   8b10 <slip_Return>
    5cf6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5cfa:	e9 ba 05 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5cff:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    5d03:	0f 8c 05 00 00 00    	jl     5d0e <_dowhile+0x4e>
    5d09:	e9 1f 00 00 00       	jmp    5d2d <_dowhile+0x6d>
    5d0e:	48 8d 3d d1 24 01 00 	lea    0x124d1(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    5d15:	48 8d 35 d3 24 01 00 	lea    0x124d3(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    5d1c:	ba c2 02 00 00       	mov    $0x2c2,%edx
    5d21:	48 8d 0d 66 27 01 00 	lea    0x12766(%rip),%rcx        # 1848e <_IO_stdin_used+0x48e>
    5d28:	e8 c3 d3 ff ff       	call   30f0 <__assert_fail@plt>
    5d2d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    5d34:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5d38:	31 f6                	xor    %esi,%esi
    5d3a:	2b 75 ec             	sub    -0x14(%rbp),%esi
    5d3d:	e8 7e 91 00 00       	call   eec0 <slipV_getValue>
    5d42:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    5d46:	89 55 e0             	mov    %edx,-0x20(%rbp)
    5d49:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5d4d:	48 83 c7 08          	add    $0x8,%rdi
    5d51:	8b 75 ec             	mov    -0x14(%rbp),%esi
    5d54:	e8 17 7d 00 00       	call   da70 <slipS_popValueNum>
    5d59:	81 7d e0 00 01 00 00 	cmpl   $0x100,-0x20(%rbp)
    5d60:	0f 84 23 00 00 00    	je     5d89 <_dowhile+0xc9>
    5d66:	48 8d 3d 3a 25 01 00 	lea    0x1253a(%rip),%rdi        # 182a7 <_IO_stdin_used+0x2a7>
    5d6d:	b0 00                	mov    $0x0,%al
    5d6f:	e8 5c d3 ff ff       	call   30d0 <printf@plt>
    5d74:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5d79:	31 f6                	xor    %esi,%esi
    5d7b:	e8 90 2d 00 00       	call   8b10 <slip_Return>
    5d80:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5d84:	e9 30 05 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5d89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5d91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5d95:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5d99:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    5d9d:	31 f6                	xor    %esi,%esi
    5d9f:	ba 10 00 00 00       	mov    $0x10,%edx
    5da4:	e8 57 d3 ff ff       	call   3100 <memset@plt>
    5da9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5dad:	be 00 01 00 00       	mov    $0x100,%esi
    5db2:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    5db6:	e8 95 60 00 00       	call   be50 <slipL_pullListArgument>
    5dbb:	83 f8 00             	cmp    $0x0,%eax
    5dbe:	0f 84 15 00 00 00    	je     5dd9 <_dowhile+0x119>
    5dc4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5dc9:	31 f6                	xor    %esi,%esi
    5dcb:	e8 40 2d 00 00       	call   8b10 <slip_Return>
    5dd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5dd4:	e9 e0 04 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5dd9:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
    5ddd:	31 f6                	xor    %esi,%esi
    5ddf:	ba 10 00 00 00       	mov    $0x10,%edx
    5de4:	e8 17 d3 ff ff       	call   3100 <memset@plt>
    5de9:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5ded:	be 08 00 00 00       	mov    $0x8,%esi
    5df2:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
    5df6:	e8 55 60 00 00       	call   be50 <slipL_pullListArgument>
    5dfb:	83 f8 00             	cmp    $0x0,%eax
    5dfe:	0f 84 15 00 00 00    	je     5e19 <_dowhile+0x159>
    5e04:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5e09:	31 f6                	xor    %esi,%esi
    5e0b:	e8 00 2d 00 00       	call   8b10 <slip_Return>
    5e10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5e14:	e9 a0 04 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5e19:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    5e1d:	31 f6                	xor    %esi,%esi
    5e1f:	ba 10 00 00 00       	mov    $0x10,%edx
    5e24:	e8 d7 d2 ff ff       	call   3100 <memset@plt>
    5e29:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    5e2d:	be 00 01 00 00       	mov    $0x100,%esi
    5e32:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    5e36:	e8 15 60 00 00       	call   be50 <slipL_pullListArgument>
    5e3b:	83 f8 00             	cmp    $0x0,%eax
    5e3e:	0f 84 15 00 00 00    	je     5e59 <_dowhile+0x199>
    5e44:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5e49:	31 f6                	xor    %esi,%esi
    5e4b:	e8 c0 2c 00 00       	call   8b10 <slip_Return>
    5e50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5e54:	e9 60 04 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5e59:	e9 00 00 00 00       	jmp    5e5e <_dowhile+0x19e>
    5e5e:	48 8d 05 af a5 01 00 	lea    0x1a5af(%rip),%rax        # 20414 <slip_debug_compile>
    5e65:	f6 00 01             	testb  $0x1,(%rax)
    5e68:	0f 84 0e 00 00 00    	je     5e7c <_dowhile+0x1bc>
    5e6e:	48 8d 3d 39 26 01 00 	lea    0x12639(%rip),%rdi        # 184ae <_IO_stdin_used+0x4ae>
    5e75:	b0 00                	mov    $0x0,%al
    5e77:	e8 54 d2 ff ff       	call   30d0 <printf@plt>
    5e7c:	e9 00 00 00 00       	jmp    5e81 <_dowhile+0x1c1>
    5e81:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    5e85:	48 8d 35 0a 23 01 00 	lea    0x1230a(%rip),%rsi        # 18196 <_IO_stdin_used+0x196>
    5e8c:	e8 8f d2 ff ff       	call   3120 <strcmp@plt>
    5e91:	83 f8 00             	cmp    $0x0,%eax
    5e94:	0f 84 2d 00 00 00    	je     5ec7 <_dowhile+0x207>
    5e9a:	48 8b 05 4f a1 01 00 	mov    0x1a14f(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    5ea1:	48 8b 38             	mov    (%rax),%rdi
    5ea4:	48 8d 35 14 26 01 00 	lea    0x12614(%rip),%rsi        # 184bf <_IO_stdin_used+0x4bf>
    5eab:	b0 00                	mov    $0x0,%al
    5ead:	e8 7e d2 ff ff       	call   3130 <fprintf@plt>
    5eb2:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    5eb7:	31 f6                	xor    %esi,%esi
    5eb9:	e8 52 2c 00 00       	call   8b10 <slip_Return>
    5ebe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5ec2:	e9 f2 03 00 00       	jmp    62b9 <_dowhile+0x5f9>
    5ec7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5ecb:	be ff ff ff ff       	mov    $0xffffffff,%esi
    5ed0:	e8 1b 56 00 00       	call   b4f0 <slipC_getFunc>
    5ed5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    5ed9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    5edd:	8b 40 18             	mov    0x18(%rax),%eax
    5ee0:	89 45 8c             	mov    %eax,-0x74(%rbp)
    5ee3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5ee7:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    5eee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5ef2:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5ef6:	e8 05 70 00 00       	call   cf00 <slipD_table>
    5efb:	48 8b 40 08          	mov    0x8(%rax),%rax
    5eff:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5f03:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5f07:	ff d0                	call   *%rax
    5f09:	48 8b bd f0 fe ff ff 	mov    -0x110(%rbp),%rdi
    5f10:	48 89 c6             	mov    %rax,%rsi
    5f13:	e8 08 56 00 00       	call   b520 <slipC_pushLoopStack>
    5f18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f1c:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    5f23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f27:	48 8b 78 48          	mov    0x48(%rax),%rdi
    5f2b:	e8 d0 6f 00 00       	call   cf00 <slipD_table>
    5f30:	48 8b 40 08          	mov    0x8(%rax),%rax
    5f34:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5f38:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    5f3c:	ff d0                	call   *%rax
    5f3e:	48 8b bd f8 fe ff ff 	mov    -0x108(%rbp),%rdi
    5f45:	48 89 c6             	mov    %rax,%rsi
    5f48:	e8 03 55 00 00       	call   b450 <slipC_pushEnvStack>
    5f4d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5f51:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    5f55:	31 d2                	xor    %edx,%edx
    5f57:	e8 a4 aa 00 00       	call   10a00 <slipV_callList>
    5f5c:	89 45 88             	mov    %eax,-0x78(%rbp)
    5f5f:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
    5f63:	0f 8e 10 00 00 00    	jle    5f79 <_dowhile+0x2b9>
    5f69:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5f6d:	48 83 c7 08          	add    $0x8,%rdi
    5f71:	8b 75 88             	mov    -0x78(%rbp),%esi
    5f74:	e8 f7 7a 00 00       	call   da70 <slipS_popValueNum>
    5f79:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5f7d:	e8 0e 55 00 00       	call   b490 <slipC_popEnvStack>
    5f82:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
    5f89:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    5f8d:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    5f91:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    5f95:	8b 4d a0             	mov    -0x60(%rbp),%ecx
    5f98:	4c 8d 45 84          	lea    -0x7c(%rbp),%r8
    5f9c:	e8 df 25 00 00       	call   8580 <load>
    5fa1:	89 45 80             	mov    %eax,-0x80(%rbp)
    5fa4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    5fa8:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    5faf:	8b 45 80             	mov    -0x80(%rbp),%eax
    5fb2:	66 89 c1             	mov    %ax,%cx
    5fb5:	8b 45 80             	mov    -0x80(%rbp),%eax
    5fb8:	0f b7 f9             	movzwl %cx,%edi
    5fbb:	0f b7 f0             	movzwl %ax,%esi
    5fbe:	e8 3d 2f 00 00       	call   8f00 <slipI_not>
    5fc3:	48 8b bd c8 fe ff ff 	mov    -0x138(%rbp),%rdi
    5fca:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    5fd0:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    5fd6:	e8 45 62 00 00       	call   c220 <slipP_addInstruction>
    5fdb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    5fdf:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    5fe6:	8b 45 80             	mov    -0x80(%rbp),%eax
    5fe9:	31 f6                	xor    %esi,%esi
    5feb:	0f b7 f8             	movzwl %ax,%edi
    5fee:	e8 8d 2e 00 00       	call   8e80 <slipI_cjp>
    5ff3:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
    5ffa:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
    6000:	8b b5 70 ff ff ff    	mov    -0x90(%rbp),%esi
    6006:	e8 15 62 00 00       	call   c220 <slipP_addInstruction>
    600b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    6011:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    6015:	8b 75 84             	mov    -0x7c(%rbp),%esi
    6018:	e8 c3 65 00 00       	call   c5e0 <slipP_popLocalVar>
    601d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6021:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    6028:	8b 7d 8c             	mov    -0x74(%rbp),%edi
    602b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    602f:	2b 78 18             	sub    0x18(%rax),%edi
    6032:	e8 99 2e 00 00       	call   8ed0 <slipI_jmp>
    6037:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
    603e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    6044:	8b b5 68 ff ff ff    	mov    -0x98(%rbp),%esi
    604a:	e8 d1 61 00 00       	call   c220 <slipP_addInstruction>
    604f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    6055:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    605b:	83 c0 01             	add    $0x1,%eax
    605e:	2b 85 74 ff ff ff    	sub    -0x8c(%rbp),%eax
    6064:	66 89 c2             	mov    %ax,%dx
    6067:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    606b:	48 8b 40 38          	mov    0x38(%rax),%rax
    606f:	48 63 8d 74 ff ff ff 	movslq -0x8c(%rbp),%rcx
    6076:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    607b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    607f:	e8 dc 54 00 00       	call   b560 <slipC_popLoopStack>
    6084:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    608b:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    6092:	e8 09 49 00 00       	call   a9a0 <slipM_getMeta>
    6097:	48 8b 40 28          	mov    0x28(%rax),%rax
    609b:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    60a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    60a9:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    60b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    60b4:	48 8b 78 48          	mov    0x48(%rax),%rdi
    60b8:	e8 63 6d 00 00       	call   ce20 <slipD_str>
    60bd:	48 8b 40 10          	mov    0x10(%rax),%rax
    60c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    60c5:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    60c9:	48 8d 35 db 20 01 00 	lea    0x120db(%rip),%rsi        # 181ab <_IO_stdin_used+0x1ab>
    60d0:	ff d0                	call   *%rax
    60d2:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
    60d9:	48 89 c1             	mov    %rax,%rcx
    60dc:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    60e3:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    60ea:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%rbp)
    60f0:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    60f7:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
    60fd:	ff d0                	call   *%rax
    60ff:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    6106:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
    610c:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
    6113:	0f 84 76 00 00 00    	je     618f <_dowhile+0x4cf>
    6119:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    6120:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    6127:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    612e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    6135:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
    613c:	00 
    613d:	0f 84 47 00 00 00    	je     618a <_dowhile+0x4ca>
    6143:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    6149:	83 c0 01             	add    $0x1,%eax
    614c:	48 98                	cltq
    614e:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
    6155:	48 2b 41 08          	sub    0x8(%rcx),%rax
    6159:	66 89 c2             	mov    %ax,%dx
    615c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6160:	48 8b 40 38          	mov    0x38(%rax),%rax
    6164:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
    616b:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    616f:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    6174:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    617b:	48 8b 00             	mov    (%rax),%rax
    617e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    6185:	e9 ab ff ff ff       	jmp    6135 <_dowhile+0x475>
    618a:	e9 00 00 00 00       	jmp    618f <_dowhile+0x4cf>
    618f:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
    6196:	e8 05 48 00 00       	call   a9a0 <slipM_getMeta>
    619b:	48 8b 40 28          	mov    0x28(%rax),%rax
    619f:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    61a6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    61ad:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    61b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61b8:	48 8b 78 48          	mov    0x48(%rax),%rdi
    61bc:	e8 5f 6c 00 00       	call   ce20 <slipD_str>
    61c1:	48 8b 40 10          	mov    0x10(%rax),%rax
    61c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    61c9:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    61cd:	48 8d 35 dd 1f 01 00 	lea    0x11fdd(%rip),%rsi        # 181b1 <_IO_stdin_used+0x1b1>
    61d4:	ff d0                	call   *%rax
    61d6:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
    61dd:	48 89 c1             	mov    %rax,%rcx
    61e0:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
    61e7:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
    61ee:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%rbp)
    61f4:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
    61fb:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
    6201:	ff d0                	call   *%rax
    6203:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    620a:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%rbp)
    6210:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    6217:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    621e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6225:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    622c:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
    6233:	0f 84 6f 00 00 00    	je     62a8 <_dowhile+0x5e8>
    6239:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    6240:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    6247:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    624e:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6255:	48 83 bd 00 ff ff ff 	cmpq   $0x0,-0x100(%rbp)
    625c:	00 
    625d:	0f 84 40 00 00 00    	je     62a3 <_dowhile+0x5e3>
    6263:	48 63 45 8c          	movslq -0x74(%rbp),%rax
    6267:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    626e:	48 2b 41 08          	sub    0x8(%rcx),%rax
    6272:	66 89 c2             	mov    %ax,%dx
    6275:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6279:	48 8b 40 38          	mov    0x38(%rax),%rax
    627d:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    6284:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    6288:	66 89 54 88 02       	mov    %dx,0x2(%rax,%rcx,4)
    628d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    6294:	48 8b 00             	mov    (%rax),%rax
    6297:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    629e:	e9 b2 ff ff ff       	jmp    6255 <_dowhile+0x595>
    62a3:	e9 00 00 00 00       	jmp    62a8 <_dowhile+0x5e8>
    62a8:	8b 75 ec             	mov    -0x14(%rbp),%esi
    62ab:	bf 01 00 00 00       	mov    $0x1,%edi
    62b0:	e8 5b 28 00 00       	call   8b10 <slip_Return>
    62b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    62b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62bd:	48 81 c4 50 01 00 00 	add    $0x150,%rsp
    62c4:	5d                   	pop    %rbp
    62c5:	c3                   	ret
    62c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    62cd:	00 00 00 

00000000000062d0 <_break>:
    62d0:	55                   	push   %rbp
    62d1:	48 89 e5             	mov    %rsp,%rbp
    62d4:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    62db:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    62df:	89 75 ec             	mov    %esi,-0x14(%rbp)
    62e2:	48 8d 05 2b a1 01 00 	lea    0x1a12b(%rip),%rax        # 20414 <slip_debug_compile>
    62e9:	f6 00 01             	testb  $0x1,(%rax)
    62ec:	0f 84 0e 00 00 00    	je     6300 <_break+0x30>
    62f2:	48 8d 3d dd 21 01 00 	lea    0x121dd(%rip),%rdi        # 184d6 <_IO_stdin_used+0x4d6>
    62f9:	b0 00                	mov    $0x0,%al
    62fb:	e8 d0 cd ff ff       	call   30d0 <printf@plt>
    6300:	e9 00 00 00 00       	jmp    6305 <_break+0x35>
    6305:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6309:	be ff ff ff ff       	mov    $0xffffffff,%esi
    630e:	e8 dd 51 00 00       	call   b4f0 <slipC_getFunc>
    6313:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6317:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    631b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    631f:	31 ff                	xor    %edi,%edi
    6321:	e8 aa 2b 00 00       	call   8ed0 <slipI_jmp>
    6326:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    632a:	89 45 d8             	mov    %eax,-0x28(%rbp)
    632d:	8b 75 d8             	mov    -0x28(%rbp),%esi
    6330:	e8 eb 5e 00 00       	call   c220 <slipP_addInstruction>
    6335:	89 45 dc             	mov    %eax,-0x24(%rbp)
    6338:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    633c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6341:	e8 4a 52 00 00       	call   b590 <slipC_getLoop>
    6346:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    634a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    634f:	0f 84 d3 00 00 00    	je     6428 <_break+0x158>
    6355:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6359:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    635d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6361:	48 8b 78 48          	mov    0x48(%rax),%rdi
    6365:	e8 b6 6a 00 00       	call   ce20 <slipD_str>
    636a:	48 8b 40 10          	mov    0x10(%rax),%rax
    636e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6372:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    6376:	48 8d 35 2e 1e 01 00 	lea    0x11e2e(%rip),%rsi        # 181ab <_IO_stdin_used+0x1ab>
    637d:	ff d0                	call   *%rax
    637f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6383:	89 55 c0             	mov    %edx,-0x40(%rbp)
    6386:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    638a:	e8 11 46 00 00       	call   a9a0 <slipM_getMeta>
    638f:	48 8b 40 28          	mov    0x28(%rax),%rax
    6393:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6397:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    639b:	8b 55 c0             	mov    -0x40(%rbp),%edx
    639e:	ff d0                	call   *%rax
    63a0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    63a4:	89 55 b0             	mov    %edx,-0x50(%rbp)
    63a7:	83 7d b0 00          	cmpl   $0x0,-0x50(%rbp)
    63ab:	0f 85 44 00 00 00    	jne    63f5 <_break+0x125>
    63b1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    63b5:	8b 75 dc             	mov    -0x24(%rbp),%esi
    63b8:	e8 23 53 00 00       	call   b6e0 <slipL_create_IntNode>
    63bd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    63c1:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    63c5:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    63c9:	e8 d2 7d 00 00       	call   e1a0 <slipV_setValueList>
    63ce:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    63d2:	e8 c9 45 00 00       	call   a9a0 <slipM_getMeta>
    63d7:	48 8b 40 20          	mov    0x20(%rax),%rax
    63db:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    63df:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    63e3:	8b 55 c0             	mov    -0x40(%rbp),%edx
    63e6:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    63ea:	44 8b 45 98          	mov    -0x68(%rbp),%r8d
    63ee:	ff d0                	call   *%rax
    63f0:	e9 2e 00 00 00       	jmp    6423 <_break+0x153>
    63f5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    63f9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    63fd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6401:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    6408:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    640c:	8b 75 dc             	mov    -0x24(%rbp),%esi
    640f:	e8 cc 52 00 00       	call   b6e0 <slipL_create_IntNode>
    6414:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    641b:	48 89 c6             	mov    %rax,%rsi
    641e:	e8 ed 56 00 00       	call   bb10 <slipL_concat>
    6423:	e9 00 00 00 00       	jmp    6428 <_break+0x158>
    6428:	31 f6                	xor    %esi,%esi
    642a:	89 f7                	mov    %esi,%edi
    642c:	e8 df 26 00 00       	call   8b10 <slip_Return>
    6431:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6435:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6439:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    6440:	5d                   	pop    %rbp
    6441:	c3                   	ret
    6442:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    6449:	00 00 00 
    644c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006450 <_continue>:
    6450:	55                   	push   %rbp
    6451:	48 89 e5             	mov    %rsp,%rbp
    6454:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    645b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    645f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6462:	48 8d 05 ab 9f 01 00 	lea    0x19fab(%rip),%rax        # 20414 <slip_debug_compile>
    6469:	f6 00 01             	testb  $0x1,(%rax)
    646c:	0f 84 0e 00 00 00    	je     6480 <_continue+0x30>
    6472:	48 8d 3d 6b 20 01 00 	lea    0x1206b(%rip),%rdi        # 184e4 <_IO_stdin_used+0x4e4>
    6479:	b0 00                	mov    $0x0,%al
    647b:	e8 50 cc ff ff       	call   30d0 <printf@plt>
    6480:	e9 00 00 00 00       	jmp    6485 <_continue+0x35>
    6485:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6489:	be ff ff ff ff       	mov    $0xffffffff,%esi
    648e:	e8 5d 50 00 00       	call   b4f0 <slipC_getFunc>
    6493:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6497:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    649b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    649f:	31 ff                	xor    %edi,%edi
    64a1:	e8 2a 2a 00 00       	call   8ed0 <slipI_jmp>
    64a6:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    64aa:	89 45 d8             	mov    %eax,-0x28(%rbp)
    64ad:	8b 75 d8             	mov    -0x28(%rbp),%esi
    64b0:	e8 6b 5d 00 00       	call   c220 <slipP_addInstruction>
    64b5:	89 45 dc             	mov    %eax,-0x24(%rbp)
    64b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    64bc:	be ff ff ff ff       	mov    $0xffffffff,%esi
    64c1:	e8 ca 50 00 00       	call   b590 <slipC_getLoop>
    64c6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    64ca:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    64cf:	0f 84 d3 00 00 00    	je     65a8 <_continue+0x158>
    64d5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    64d9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    64dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    64e1:	48 8b 78 48          	mov    0x48(%rax),%rdi
    64e5:	e8 36 69 00 00       	call   ce20 <slipD_str>
    64ea:	48 8b 40 10          	mov    0x10(%rax),%rax
    64ee:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    64f2:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    64f6:	48 8d 35 b4 1c 01 00 	lea    0x11cb4(%rip),%rsi        # 181b1 <_IO_stdin_used+0x1b1>
    64fd:	ff d0                	call   *%rax
    64ff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6503:	89 55 c0             	mov    %edx,-0x40(%rbp)
    6506:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    650a:	e8 91 44 00 00       	call   a9a0 <slipM_getMeta>
    650f:	48 8b 40 28          	mov    0x28(%rax),%rax
    6513:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6517:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    651b:	8b 55 c0             	mov    -0x40(%rbp),%edx
    651e:	ff d0                	call   *%rax
    6520:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    6524:	89 55 b0             	mov    %edx,-0x50(%rbp)
    6527:	83 7d b0 00          	cmpl   $0x0,-0x50(%rbp)
    652b:	0f 85 44 00 00 00    	jne    6575 <_continue+0x125>
    6531:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6535:	8b 75 dc             	mov    -0x24(%rbp),%esi
    6538:	e8 a3 51 00 00       	call   b6e0 <slipL_create_IntNode>
    653d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6541:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6545:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    6549:	e8 52 7c 00 00       	call   e1a0 <slipV_setValueList>
    654e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6552:	e8 49 44 00 00       	call   a9a0 <slipM_getMeta>
    6557:	48 8b 40 20          	mov    0x20(%rax),%rax
    655b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    655f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    6563:	8b 55 c0             	mov    -0x40(%rbp),%edx
    6566:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    656a:	44 8b 45 98          	mov    -0x68(%rbp),%r8d
    656e:	ff d0                	call   *%rax
    6570:	e9 2e 00 00 00       	jmp    65a3 <_continue+0x153>
    6575:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6579:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    657d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6581:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    6588:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    658c:	8b 75 dc             	mov    -0x24(%rbp),%esi
    658f:	e8 4c 51 00 00       	call   b6e0 <slipL_create_IntNode>
    6594:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
    659b:	48 89 c6             	mov    %rax,%rsi
    659e:	e8 6d 55 00 00       	call   bb10 <slipL_concat>
    65a3:	e9 00 00 00 00       	jmp    65a8 <_continue+0x158>
    65a8:	31 f6                	xor    %esi,%esi
    65aa:	89 f7                	mov    %esi,%edi
    65ac:	e8 5f 25 00 00       	call   8b10 <slip_Return>
    65b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    65b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65b9:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
    65c0:	5d                   	pop    %rbp
    65c1:	c3                   	ret
    65c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    65c9:	00 00 00 
    65cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000065d0 <_yield>:
    65d0:	55                   	push   %rbp
    65d1:	48 89 e5             	mov    %rsp,%rbp
    65d4:	48 83 ec 20          	sub    $0x20,%rsp
    65d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    65dc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    65df:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    65e3:	48 83 c7 08          	add    $0x8,%rdi
    65e7:	8b 75 ec             	mov    -0x14(%rbp),%esi
    65ea:	e8 81 74 00 00       	call   da70 <slipS_popValueNum>
    65ef:	8b 75 ec             	mov    -0x14(%rbp),%esi
    65f2:	bf 01 00 00 00       	mov    $0x1,%edi
    65f7:	e8 14 25 00 00       	call   8b10 <slip_Return>
    65fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6604:	48 83 c4 20          	add    $0x20,%rsp
    6608:	5d                   	pop    %rbp
    6609:	c3                   	ret
    660a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006610 <_index>:
    6610:	55                   	push   %rbp
    6611:	48 89 e5             	mov    %rsp,%rbp
    6614:	48 83 ec 20          	sub    $0x20,%rsp
    6618:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    661c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    661f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6623:	48 83 c7 08          	add    $0x8,%rdi
    6627:	8b 75 ec             	mov    -0x14(%rbp),%esi
    662a:	e8 41 74 00 00       	call   da70 <slipS_popValueNum>
    662f:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6632:	bf 01 00 00 00       	mov    $0x1,%edi
    6637:	e8 d4 24 00 00       	call   8b10 <slip_Return>
    663c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6644:	48 83 c4 20          	add    $0x20,%rsp
    6648:	5d                   	pop    %rbp
    6649:	c3                   	ret
    664a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000006650 <_dot>:
    6650:	55                   	push   %rbp
    6651:	48 89 e5             	mov    %rsp,%rbp
    6654:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    665b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    665f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6662:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    6666:	0f 8c 05 00 00 00    	jl     6671 <_dot+0x21>
    666c:	e9 1f 00 00 00       	jmp    6690 <_dot+0x40>
    6671:	48 8d 3d 6e 1b 01 00 	lea    0x11b6e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    6678:	48 8d 35 70 1b 01 00 	lea    0x11b70(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    667f:	ba b6 00 00 00       	mov    $0xb6,%edx
    6684:	48 8d 0d 6a 1e 01 00 	lea    0x11e6a(%rip),%rcx        # 184f5 <_IO_stdin_used+0x4f5>
    668b:	e8 60 ca ff ff       	call   30f0 <__assert_fail@plt>
    6690:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6697:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    669b:	31 f6                	xor    %esi,%esi
    669d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    66a0:	e8 1b 88 00 00       	call   eec0 <slipV_getValue>
    66a5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    66a9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    66ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    66b0:	48 83 c7 08          	add    $0x8,%rdi
    66b4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    66b7:	e8 b4 73 00 00       	call   da70 <slipS_popValueNum>
    66bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    66c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    66c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    66c8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    66cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    66d0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    66d4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    66d8:	48 8b 40 10          	mov    0x10(%rax),%rax
    66dc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    66e0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    66e4:	e8 67 54 00 00       	call   bb50 <slipL_forward>
    66e9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    66ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    66f1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    66f5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    66f9:	48 8b 40 10          	mov    0x10(%rax),%rax
    66fd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6701:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6705:	e8 46 54 00 00       	call   bb50 <slipL_forward>
    670a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    670e:	48 8d 05 ff 9c 01 00 	lea    0x19cff(%rip),%rax        # 20414 <slip_debug_compile>
    6715:	f6 00 01             	testb  $0x1,(%rax)
    6718:	0f 84 0e 00 00 00    	je     672c <_dot+0xdc>
    671e:	48 8d 3d ec 1d 01 00 	lea    0x11dec(%rip),%rdi        # 18511 <_IO_stdin_used+0x511>
    6725:	b0 00                	mov    $0x0,%al
    6727:	e8 a4 c9 ff ff       	call   30d0 <printf@plt>
    672c:	e9 00 00 00 00       	jmp    6731 <_dot+0xe1>
    6731:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6735:	be ff ff ff ff       	mov    $0xffffffff,%esi
    673a:	e8 b1 4d 00 00       	call   b4f0 <slipC_getFunc>
    673f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6743:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    674a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    674e:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6752:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6756:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    6759:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    675d:	e8 1e 1e 00 00       	call   8580 <load>
    6762:	89 45 98             	mov    %eax,-0x68(%rbp)
    6765:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6769:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    676d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    6771:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    6774:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6778:	e8 03 1e 00 00       	call   8580 <load>
    677d:	89 45 94             	mov    %eax,-0x6c(%rbp)
    6780:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6784:	8b 75 9c             	mov    -0x64(%rbp),%esi
    6787:	e8 54 5e 00 00       	call   c5e0 <slipP_popLocalVar>
    678c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6790:	be 01 00 00 00       	mov    $0x1,%esi
    6795:	e8 16 5e 00 00       	call   c5b0 <slipP_addLocalVar>
    679a:	89 45 90             	mov    %eax,-0x70(%rbp)
    679d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    67a1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    67a5:	8b 45 90             	mov    -0x70(%rbp),%eax
    67a8:	66 89 c2             	mov    %ax,%dx
    67ab:	8b 45 98             	mov    -0x68(%rbp),%eax
    67ae:	88 c1                	mov    %al,%cl
    67b0:	8b 45 94             	mov    -0x6c(%rbp),%eax
    67b3:	0f b7 fa             	movzwl %dx,%edi
    67b6:	0f b6 f1             	movzbl %cl,%esi
    67b9:	0f b6 d0             	movzbl %al,%edx
    67bc:	e8 bf 23 00 00       	call   8b80 <slipI_getTable>
    67c1:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    67c5:	89 45 88             	mov    %eax,-0x78(%rbp)
    67c8:	8b 75 88             	mov    -0x78(%rbp),%esi
    67cb:	e8 50 5a 00 00       	call   c220 <slipP_addInstruction>
    67d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    67d4:	8b 75 90             	mov    -0x70(%rbp),%esi
    67d7:	e8 04 8a 00 00       	call   f1e0 <slipV_pushExpr>
    67dc:	bf 01 00 00 00       	mov    $0x1,%edi
    67e1:	be 02 00 00 00       	mov    $0x2,%esi
    67e6:	e8 25 23 00 00       	call   8b10 <slip_Return>
    67eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    67ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67f3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    67fa:	5d                   	pop    %rbp
    67fb:	c3                   	ret
    67fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006800 <_add>:
    6800:	55                   	push   %rbp
    6801:	48 89 e5             	mov    %rsp,%rbp
    6804:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    680b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    680f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6812:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    6816:	0f 8c 05 00 00 00    	jl     6821 <_add+0x21>
    681c:	e9 1f 00 00 00       	jmp    6840 <_add+0x40>
    6821:	48 8d 3d be 19 01 00 	lea    0x119be(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    6828:	48 8d 35 c0 19 01 00 	lea    0x119c0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    682f:	ba a6 00 00 00       	mov    $0xa6,%edx
    6834:	48 8d 0d e2 1c 01 00 	lea    0x11ce2(%rip),%rcx        # 1851d <_IO_stdin_used+0x51d>
    683b:	e8 b0 c8 ff ff       	call   30f0 <__assert_fail@plt>
    6840:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6847:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    684b:	31 f6                	xor    %esi,%esi
    684d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    6850:	e8 6b 86 00 00       	call   eec0 <slipV_getValue>
    6855:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6859:	89 55 e0             	mov    %edx,-0x20(%rbp)
    685c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6860:	48 83 c7 08          	add    $0x8,%rdi
    6864:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6867:	e8 04 72 00 00       	call   da70 <slipS_popValueNum>
    686c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6870:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6874:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6878:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    687c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6880:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6884:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    6888:	48 8b 40 10          	mov    0x10(%rax),%rax
    688c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6890:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6894:	e8 b7 52 00 00       	call   bb50 <slipL_forward>
    6899:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    689d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    68a1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    68a5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    68a9:	48 8b 40 10          	mov    0x10(%rax),%rax
    68ad:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    68b1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    68b5:	e8 96 52 00 00       	call   bb50 <slipL_forward>
    68ba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    68be:	48 8d 05 4f 9b 01 00 	lea    0x19b4f(%rip),%rax        # 20414 <slip_debug_compile>
    68c5:	f6 00 01             	testb  $0x1,(%rax)
    68c8:	0f 84 15 00 00 00    	je     68e3 <_add+0xe3>
    68ce:	48 8d 3d 64 1c 01 00 	lea    0x11c64(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    68d5:	48 8d 35 67 1c 01 00 	lea    0x11c67(%rip),%rsi        # 18543 <_IO_stdin_used+0x543>
    68dc:	b0 00                	mov    $0x0,%al
    68de:	e8 ed c7 ff ff       	call   30d0 <printf@plt>
    68e3:	e9 00 00 00 00       	jmp    68e8 <_add+0xe8>
    68e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    68ec:	be ff ff ff ff       	mov    $0xffffffff,%esi
    68f1:	e8 fa 4b 00 00       	call   b4f0 <slipC_getFunc>
    68f6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    68fa:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    6901:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6905:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6909:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    690d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    6910:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6914:	e8 67 1c 00 00       	call   8580 <load>
    6919:	89 45 98             	mov    %eax,-0x68(%rbp)
    691c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6920:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6924:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    6928:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    692b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    692f:	e8 4c 1c 00 00       	call   8580 <load>
    6934:	89 45 94             	mov    %eax,-0x6c(%rbp)
    6937:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    693b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    693e:	e8 9d 5c 00 00       	call   c5e0 <slipP_popLocalVar>
    6943:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6947:	be 01 00 00 00       	mov    $0x1,%esi
    694c:	e8 5f 5c 00 00       	call   c5b0 <slipP_addLocalVar>
    6951:	89 45 90             	mov    %eax,-0x70(%rbp)
    6954:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    6958:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    695c:	8b 45 90             	mov    -0x70(%rbp),%eax
    695f:	66 89 c2             	mov    %ax,%dx
    6962:	8b 45 98             	mov    -0x68(%rbp),%eax
    6965:	88 c1                	mov    %al,%cl
    6967:	8b 45 94             	mov    -0x6c(%rbp),%eax
    696a:	0f b7 fa             	movzwl %dx,%edi
    696d:	0f b6 f1             	movzbl %cl,%esi
    6970:	0f b6 d0             	movzbl %al,%edx
    6973:	e8 d8 25 00 00       	call   8f50 <slipI_add>
    6978:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    697c:	89 45 88             	mov    %eax,-0x78(%rbp)
    697f:	8b 75 88             	mov    -0x78(%rbp),%esi
    6982:	e8 99 58 00 00       	call   c220 <slipP_addInstruction>
    6987:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    698b:	8b 75 90             	mov    -0x70(%rbp),%esi
    698e:	e8 4d 88 00 00       	call   f1e0 <slipV_pushExpr>
    6993:	48 8d 05 7a 9a 01 00 	lea    0x19a7a(%rip),%rax        # 20414 <slip_debug_compile>
    699a:	f6 00 01             	testb  $0x1,(%rax)
    699d:	0f 84 09 00 00 00    	je     69ac <_add+0x1ac>
    69a3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    69a7:	e8 14 4c 00 00       	call   b5c0 <slipC_printStack>
    69ac:	bf 01 00 00 00       	mov    $0x1,%edi
    69b1:	be 02 00 00 00       	mov    $0x2,%esi
    69b6:	e8 55 21 00 00       	call   8b10 <slip_Return>
    69bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    69bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69c3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    69ca:	5d                   	pop    %rbp
    69cb:	c3                   	ret
    69cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000069d0 <_sub>:
    69d0:	55                   	push   %rbp
    69d1:	48 89 e5             	mov    %rsp,%rbp
    69d4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    69db:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    69df:	89 75 ec             	mov    %esi,-0x14(%rbp)
    69e2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    69e6:	0f 8c 05 00 00 00    	jl     69f1 <_sub+0x21>
    69ec:	e9 1f 00 00 00       	jmp    6a10 <_sub+0x40>
    69f1:	48 8d 3d ee 17 01 00 	lea    0x117ee(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    69f8:	48 8d 35 f0 17 01 00 	lea    0x117f0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    69ff:	ba a7 00 00 00       	mov    $0xa7,%edx
    6a04:	48 8d 0d 3d 1b 01 00 	lea    0x11b3d(%rip),%rcx        # 18548 <_IO_stdin_used+0x548>
    6a0b:	e8 e0 c6 ff ff       	call   30f0 <__assert_fail@plt>
    6a10:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6a17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6a1b:	31 f6                	xor    %esi,%esi
    6a1d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    6a20:	e8 9b 84 00 00       	call   eec0 <slipV_getValue>
    6a25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6a29:	89 55 e0             	mov    %edx,-0x20(%rbp)
    6a2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6a30:	48 83 c7 08          	add    $0x8,%rdi
    6a34:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6a37:	e8 34 70 00 00       	call   da70 <slipS_popValueNum>
    6a3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6a40:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6a44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6a48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6a4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6a50:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6a54:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    6a58:	48 8b 40 10          	mov    0x10(%rax),%rax
    6a5c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6a60:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6a64:	e8 e7 50 00 00       	call   bb50 <slipL_forward>
    6a69:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6a6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6a71:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6a75:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    6a79:	48 8b 40 10          	mov    0x10(%rax),%rax
    6a7d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6a81:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6a85:	e8 c6 50 00 00       	call   bb50 <slipL_forward>
    6a8a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6a8e:	48 8d 05 7f 99 01 00 	lea    0x1997f(%rip),%rax        # 20414 <slip_debug_compile>
    6a95:	f6 00 01             	testb  $0x1,(%rax)
    6a98:	0f 84 15 00 00 00    	je     6ab3 <_sub+0xe3>
    6a9e:	48 8d 3d 94 1a 01 00 	lea    0x11a94(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    6aa5:	48 8d 35 b8 1a 01 00 	lea    0x11ab8(%rip),%rsi        # 18564 <_IO_stdin_used+0x564>
    6aac:	b0 00                	mov    $0x0,%al
    6aae:	e8 1d c6 ff ff       	call   30d0 <printf@plt>
    6ab3:	e9 00 00 00 00       	jmp    6ab8 <_sub+0xe8>
    6ab8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6abc:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6ac1:	e8 2a 4a 00 00       	call   b4f0 <slipC_getFunc>
    6ac6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6aca:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    6ad1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6ad5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6ad9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6add:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    6ae0:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6ae4:	e8 97 1a 00 00       	call   8580 <load>
    6ae9:	89 45 98             	mov    %eax,-0x68(%rbp)
    6aec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6af0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6af4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    6af8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    6afb:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6aff:	e8 7c 1a 00 00       	call   8580 <load>
    6b04:	89 45 94             	mov    %eax,-0x6c(%rbp)
    6b07:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6b0b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    6b0e:	e8 cd 5a 00 00       	call   c5e0 <slipP_popLocalVar>
    6b13:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6b17:	be 01 00 00 00       	mov    $0x1,%esi
    6b1c:	e8 8f 5a 00 00       	call   c5b0 <slipP_addLocalVar>
    6b21:	89 45 90             	mov    %eax,-0x70(%rbp)
    6b24:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    6b28:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    6b2c:	8b 45 90             	mov    -0x70(%rbp),%eax
    6b2f:	66 89 c2             	mov    %ax,%dx
    6b32:	8b 45 98             	mov    -0x68(%rbp),%eax
    6b35:	88 c1                	mov    %al,%cl
    6b37:	8b 45 94             	mov    -0x6c(%rbp),%eax
    6b3a:	0f b7 fa             	movzwl %dx,%edi
    6b3d:	0f b6 f1             	movzbl %cl,%esi
    6b40:	0f b6 d0             	movzbl %al,%edx
    6b43:	e8 58 24 00 00       	call   8fa0 <slipI_sub>
    6b48:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    6b4c:	89 45 88             	mov    %eax,-0x78(%rbp)
    6b4f:	8b 75 88             	mov    -0x78(%rbp),%esi
    6b52:	e8 c9 56 00 00       	call   c220 <slipP_addInstruction>
    6b57:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6b5b:	8b 75 90             	mov    -0x70(%rbp),%esi
    6b5e:	e8 7d 86 00 00       	call   f1e0 <slipV_pushExpr>
    6b63:	48 8d 05 aa 98 01 00 	lea    0x198aa(%rip),%rax        # 20414 <slip_debug_compile>
    6b6a:	f6 00 01             	testb  $0x1,(%rax)
    6b6d:	0f 84 09 00 00 00    	je     6b7c <_sub+0x1ac>
    6b73:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6b77:	e8 44 4a 00 00       	call   b5c0 <slipC_printStack>
    6b7c:	bf 01 00 00 00       	mov    $0x1,%edi
    6b81:	be 02 00 00 00       	mov    $0x2,%esi
    6b86:	e8 85 1f 00 00       	call   8b10 <slip_Return>
    6b8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6b8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b93:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    6b9a:	5d                   	pop    %rbp
    6b9b:	c3                   	ret
    6b9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006ba0 <_mul>:
    6ba0:	55                   	push   %rbp
    6ba1:	48 89 e5             	mov    %rsp,%rbp
    6ba4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    6bab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6baf:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6bb2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    6bb6:	0f 8c 05 00 00 00    	jl     6bc1 <_mul+0x21>
    6bbc:	e9 1f 00 00 00       	jmp    6be0 <_mul+0x40>
    6bc1:	48 8d 3d 1e 16 01 00 	lea    0x1161e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    6bc8:	48 8d 35 20 16 01 00 	lea    0x11620(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    6bcf:	ba a8 00 00 00       	mov    $0xa8,%edx
    6bd4:	48 8d 0d 8e 19 01 00 	lea    0x1198e(%rip),%rcx        # 18569 <_IO_stdin_used+0x569>
    6bdb:	e8 10 c5 ff ff       	call   30f0 <__assert_fail@plt>
    6be0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6be7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6beb:	31 f6                	xor    %esi,%esi
    6bed:	2b 75 ec             	sub    -0x14(%rbp),%esi
    6bf0:	e8 cb 82 00 00       	call   eec0 <slipV_getValue>
    6bf5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6bf9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    6bfc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6c00:	48 83 c7 08          	add    $0x8,%rdi
    6c04:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6c07:	e8 64 6e 00 00       	call   da70 <slipS_popValueNum>
    6c0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6c10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6c14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6c18:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6c1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c20:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6c24:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    6c28:	48 8b 40 10          	mov    0x10(%rax),%rax
    6c2c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6c30:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6c34:	e8 17 4f 00 00       	call   bb50 <slipL_forward>
    6c39:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6c3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c41:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6c45:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    6c49:	48 8b 40 10          	mov    0x10(%rax),%rax
    6c4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6c51:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6c55:	e8 f6 4e 00 00       	call   bb50 <slipL_forward>
    6c5a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6c5e:	48 8d 05 af 97 01 00 	lea    0x197af(%rip),%rax        # 20414 <slip_debug_compile>
    6c65:	f6 00 01             	testb  $0x1,(%rax)
    6c68:	0f 84 15 00 00 00    	je     6c83 <_mul+0xe3>
    6c6e:	48 8d 3d c4 18 01 00 	lea    0x118c4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    6c75:	48 8d 35 09 19 01 00 	lea    0x11909(%rip),%rsi        # 18585 <_IO_stdin_used+0x585>
    6c7c:	b0 00                	mov    $0x0,%al
    6c7e:	e8 4d c4 ff ff       	call   30d0 <printf@plt>
    6c83:	e9 00 00 00 00       	jmp    6c88 <_mul+0xe8>
    6c88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6c8c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6c91:	e8 5a 48 00 00       	call   b4f0 <slipC_getFunc>
    6c96:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6c9a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    6ca1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6ca5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6ca9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6cad:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    6cb0:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6cb4:	e8 c7 18 00 00       	call   8580 <load>
    6cb9:	89 45 98             	mov    %eax,-0x68(%rbp)
    6cbc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6cc0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    6cc8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    6ccb:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6ccf:	e8 ac 18 00 00       	call   8580 <load>
    6cd4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    6cd7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6cdb:	8b 75 9c             	mov    -0x64(%rbp),%esi
    6cde:	e8 fd 58 00 00       	call   c5e0 <slipP_popLocalVar>
    6ce3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6ce7:	be 01 00 00 00       	mov    $0x1,%esi
    6cec:	e8 bf 58 00 00       	call   c5b0 <slipP_addLocalVar>
    6cf1:	89 45 90             	mov    %eax,-0x70(%rbp)
    6cf4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    6cf8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    6cfc:	8b 45 90             	mov    -0x70(%rbp),%eax
    6cff:	66 89 c2             	mov    %ax,%dx
    6d02:	8b 45 98             	mov    -0x68(%rbp),%eax
    6d05:	88 c1                	mov    %al,%cl
    6d07:	8b 45 94             	mov    -0x6c(%rbp),%eax
    6d0a:	0f b7 fa             	movzwl %dx,%edi
    6d0d:	0f b6 f1             	movzbl %cl,%esi
    6d10:	0f b6 d0             	movzbl %al,%edx
    6d13:	e8 d8 22 00 00       	call   8ff0 <slipI_mul>
    6d18:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    6d1c:	89 45 88             	mov    %eax,-0x78(%rbp)
    6d1f:	8b 75 88             	mov    -0x78(%rbp),%esi
    6d22:	e8 f9 54 00 00       	call   c220 <slipP_addInstruction>
    6d27:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6d2b:	8b 75 90             	mov    -0x70(%rbp),%esi
    6d2e:	e8 ad 84 00 00       	call   f1e0 <slipV_pushExpr>
    6d33:	48 8d 05 da 96 01 00 	lea    0x196da(%rip),%rax        # 20414 <slip_debug_compile>
    6d3a:	f6 00 01             	testb  $0x1,(%rax)
    6d3d:	0f 84 09 00 00 00    	je     6d4c <_mul+0x1ac>
    6d43:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6d47:	e8 74 48 00 00       	call   b5c0 <slipC_printStack>
    6d4c:	bf 01 00 00 00       	mov    $0x1,%edi
    6d51:	be 02 00 00 00       	mov    $0x2,%esi
    6d56:	e8 b5 1d 00 00       	call   8b10 <slip_Return>
    6d5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6d5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6d63:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    6d6a:	5d                   	pop    %rbp
    6d6b:	c3                   	ret
    6d6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006d70 <_div>:
    6d70:	55                   	push   %rbp
    6d71:	48 89 e5             	mov    %rsp,%rbp
    6d74:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    6d7b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6d7f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6d82:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    6d86:	0f 8c 05 00 00 00    	jl     6d91 <_div+0x21>
    6d8c:	e9 1f 00 00 00       	jmp    6db0 <_div+0x40>
    6d91:	48 8d 3d 4e 14 01 00 	lea    0x1144e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    6d98:	48 8d 35 50 14 01 00 	lea    0x11450(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    6d9f:	ba a9 00 00 00       	mov    $0xa9,%edx
    6da4:	48 8d 0d df 17 01 00 	lea    0x117df(%rip),%rcx        # 1858a <_IO_stdin_used+0x58a>
    6dab:	e8 40 c3 ff ff       	call   30f0 <__assert_fail@plt>
    6db0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6db7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6dbb:	31 f6                	xor    %esi,%esi
    6dbd:	2b 75 ec             	sub    -0x14(%rbp),%esi
    6dc0:	e8 fb 80 00 00       	call   eec0 <slipV_getValue>
    6dc5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6dc9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    6dcc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6dd0:	48 83 c7 08          	add    $0x8,%rdi
    6dd4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6dd7:	e8 94 6c 00 00       	call   da70 <slipS_popValueNum>
    6ddc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6de0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6de8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6dec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6df0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6df4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    6df8:	48 8b 40 10          	mov    0x10(%rax),%rax
    6dfc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6e00:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6e04:	e8 47 4d 00 00       	call   bb50 <slipL_forward>
    6e09:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6e0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6e11:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6e15:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    6e19:	48 8b 40 10          	mov    0x10(%rax),%rax
    6e1d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6e21:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6e25:	e8 26 4d 00 00       	call   bb50 <slipL_forward>
    6e2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6e2e:	48 8d 05 df 95 01 00 	lea    0x195df(%rip),%rax        # 20414 <slip_debug_compile>
    6e35:	f6 00 01             	testb  $0x1,(%rax)
    6e38:	0f 84 15 00 00 00    	je     6e53 <_div+0xe3>
    6e3e:	48 8d 3d f4 16 01 00 	lea    0x116f4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    6e45:	48 8d 35 5a 17 01 00 	lea    0x1175a(%rip),%rsi        # 185a6 <_IO_stdin_used+0x5a6>
    6e4c:	b0 00                	mov    $0x0,%al
    6e4e:	e8 7d c2 ff ff       	call   30d0 <printf@plt>
    6e53:	e9 00 00 00 00       	jmp    6e58 <_div+0xe8>
    6e58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6e5c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6e61:	e8 8a 46 00 00       	call   b4f0 <slipC_getFunc>
    6e66:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    6e6a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    6e71:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6e75:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6e79:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6e7d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    6e80:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6e84:	e8 f7 16 00 00       	call   8580 <load>
    6e89:	89 45 98             	mov    %eax,-0x68(%rbp)
    6e8c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6e90:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    6e94:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    6e98:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    6e9b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    6e9f:	e8 dc 16 00 00       	call   8580 <load>
    6ea4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    6ea7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6eab:	8b 75 9c             	mov    -0x64(%rbp),%esi
    6eae:	e8 2d 57 00 00       	call   c5e0 <slipP_popLocalVar>
    6eb3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    6eb7:	be 01 00 00 00       	mov    $0x1,%esi
    6ebc:	e8 ef 56 00 00       	call   c5b0 <slipP_addLocalVar>
    6ec1:	89 45 90             	mov    %eax,-0x70(%rbp)
    6ec4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    6ec8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    6ecc:	8b 45 90             	mov    -0x70(%rbp),%eax
    6ecf:	66 89 c2             	mov    %ax,%dx
    6ed2:	8b 45 98             	mov    -0x68(%rbp),%eax
    6ed5:	88 c1                	mov    %al,%cl
    6ed7:	8b 45 94             	mov    -0x6c(%rbp),%eax
    6eda:	0f b7 fa             	movzwl %dx,%edi
    6edd:	0f b6 f1             	movzbl %cl,%esi
    6ee0:	0f b6 d0             	movzbl %al,%edx
    6ee3:	e8 58 21 00 00       	call   9040 <slipI_div>
    6ee8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    6eec:	89 45 88             	mov    %eax,-0x78(%rbp)
    6eef:	8b 75 88             	mov    -0x78(%rbp),%esi
    6ef2:	e8 29 53 00 00       	call   c220 <slipP_addInstruction>
    6ef7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6efb:	8b 75 90             	mov    -0x70(%rbp),%esi
    6efe:	e8 dd 82 00 00       	call   f1e0 <slipV_pushExpr>
    6f03:	48 8d 05 0a 95 01 00 	lea    0x1950a(%rip),%rax        # 20414 <slip_debug_compile>
    6f0a:	f6 00 01             	testb  $0x1,(%rax)
    6f0d:	0f 84 09 00 00 00    	je     6f1c <_div+0x1ac>
    6f13:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6f17:	e8 a4 46 00 00       	call   b5c0 <slipC_printStack>
    6f1c:	bf 01 00 00 00       	mov    $0x1,%edi
    6f21:	be 02 00 00 00       	mov    $0x2,%esi
    6f26:	e8 e5 1b 00 00       	call   8b10 <slip_Return>
    6f2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    6f2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f33:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    6f3a:	5d                   	pop    %rbp
    6f3b:	c3                   	ret
    6f3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006f40 <_idiv>:
    6f40:	55                   	push   %rbp
    6f41:	48 89 e5             	mov    %rsp,%rbp
    6f44:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    6f4b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    6f4f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    6f52:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    6f56:	0f 8c 05 00 00 00    	jl     6f61 <_idiv+0x21>
    6f5c:	e9 1f 00 00 00       	jmp    6f80 <_idiv+0x40>
    6f61:	48 8d 3d 7e 12 01 00 	lea    0x1127e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    6f68:	48 8d 35 80 12 01 00 	lea    0x11280(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    6f6f:	ba aa 00 00 00       	mov    $0xaa,%edx
    6f74:	48 8d 0d 30 16 01 00 	lea    0x11630(%rip),%rcx        # 185ab <_IO_stdin_used+0x5ab>
    6f7b:	e8 70 c1 ff ff       	call   30f0 <__assert_fail@plt>
    6f80:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    6f87:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6f8b:	31 f6                	xor    %esi,%esi
    6f8d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    6f90:	e8 2b 7f 00 00       	call   eec0 <slipV_getValue>
    6f95:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    6f99:	89 55 e0             	mov    %edx,-0x20(%rbp)
    6f9c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    6fa0:	48 83 c7 08          	add    $0x8,%rdi
    6fa4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    6fa7:	e8 c4 6a 00 00       	call   da70 <slipS_popValueNum>
    6fac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6fb0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6fb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6fb8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6fbc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6fc0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6fc4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    6fc8:	48 8b 40 10          	mov    0x10(%rax),%rax
    6fcc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6fd0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6fd4:	e8 77 4b 00 00       	call   bb50 <slipL_forward>
    6fd9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6fdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6fe1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6fe5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    6fe9:	48 8b 40 10          	mov    0x10(%rax),%rax
    6fed:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    6ff1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    6ff5:	e8 56 4b 00 00       	call   bb50 <slipL_forward>
    6ffa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6ffe:	48 8d 05 0f 94 01 00 	lea    0x1940f(%rip),%rax        # 20414 <slip_debug_compile>
    7005:	f6 00 01             	testb  $0x1,(%rax)
    7008:	0f 84 15 00 00 00    	je     7023 <_idiv+0xe3>
    700e:	48 8d 3d 24 15 01 00 	lea    0x11524(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7015:	48 8d 35 ac 15 01 00 	lea    0x115ac(%rip),%rsi        # 185c8 <_IO_stdin_used+0x5c8>
    701c:	b0 00                	mov    $0x0,%al
    701e:	e8 ad c0 ff ff       	call   30d0 <printf@plt>
    7023:	e9 00 00 00 00       	jmp    7028 <_idiv+0xe8>
    7028:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    702c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7031:	e8 ba 44 00 00       	call   b4f0 <slipC_getFunc>
    7036:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    703a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7041:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7045:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7049:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    704d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7050:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7054:	e8 27 15 00 00       	call   8580 <load>
    7059:	89 45 98             	mov    %eax,-0x68(%rbp)
    705c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7060:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7064:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7068:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    706b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    706f:	e8 0c 15 00 00       	call   8580 <load>
    7074:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7077:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    707b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    707e:	e8 5d 55 00 00       	call   c5e0 <slipP_popLocalVar>
    7083:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7087:	be 01 00 00 00       	mov    $0x1,%esi
    708c:	e8 1f 55 00 00       	call   c5b0 <slipP_addLocalVar>
    7091:	89 45 90             	mov    %eax,-0x70(%rbp)
    7094:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7098:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    709c:	8b 45 90             	mov    -0x70(%rbp),%eax
    709f:	66 89 c2             	mov    %ax,%dx
    70a2:	8b 45 98             	mov    -0x68(%rbp),%eax
    70a5:	88 c1                	mov    %al,%cl
    70a7:	8b 45 94             	mov    -0x6c(%rbp),%eax
    70aa:	0f b7 fa             	movzwl %dx,%edi
    70ad:	0f b6 f1             	movzbl %cl,%esi
    70b0:	0f b6 d0             	movzbl %al,%edx
    70b3:	e8 d8 1f 00 00       	call   9090 <slipI_idiv>
    70b8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    70bc:	89 45 88             	mov    %eax,-0x78(%rbp)
    70bf:	8b 75 88             	mov    -0x78(%rbp),%esi
    70c2:	e8 59 51 00 00       	call   c220 <slipP_addInstruction>
    70c7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    70cb:	8b 75 90             	mov    -0x70(%rbp),%esi
    70ce:	e8 0d 81 00 00       	call   f1e0 <slipV_pushExpr>
    70d3:	48 8d 05 3a 93 01 00 	lea    0x1933a(%rip),%rax        # 20414 <slip_debug_compile>
    70da:	f6 00 01             	testb  $0x1,(%rax)
    70dd:	0f 84 09 00 00 00    	je     70ec <_idiv+0x1ac>
    70e3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    70e7:	e8 d4 44 00 00       	call   b5c0 <slipC_printStack>
    70ec:	bf 01 00 00 00       	mov    $0x1,%edi
    70f1:	be 02 00 00 00       	mov    $0x2,%esi
    70f6:	e8 15 1a 00 00       	call   8b10 <slip_Return>
    70fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    70ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7103:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    710a:	5d                   	pop    %rbp
    710b:	c3                   	ret
    710c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007110 <_mod>:
    7110:	55                   	push   %rbp
    7111:	48 89 e5             	mov    %rsp,%rbp
    7114:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    711b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    711f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7122:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7126:	0f 8c 05 00 00 00    	jl     7131 <_mod+0x21>
    712c:	e9 1f 00 00 00       	jmp    7150 <_mod+0x40>
    7131:	48 8d 3d ae 10 01 00 	lea    0x110ae(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7138:	48 8d 35 b0 10 01 00 	lea    0x110b0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    713f:	ba ab 00 00 00       	mov    $0xab,%edx
    7144:	48 8d 0d 83 14 01 00 	lea    0x11483(%rip),%rcx        # 185ce <_IO_stdin_used+0x5ce>
    714b:	e8 a0 bf ff ff       	call   30f0 <__assert_fail@plt>
    7150:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7157:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    715b:	31 f6                	xor    %esi,%esi
    715d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7160:	e8 5b 7d 00 00       	call   eec0 <slipV_getValue>
    7165:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7169:	89 55 e0             	mov    %edx,-0x20(%rbp)
    716c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7170:	48 83 c7 08          	add    $0x8,%rdi
    7174:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7177:	e8 f4 68 00 00       	call   da70 <slipS_popValueNum>
    717c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7180:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7184:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7188:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    718c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7190:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7194:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7198:	48 8b 40 10          	mov    0x10(%rax),%rax
    719c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    71a0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    71a4:	e8 a7 49 00 00       	call   bb50 <slipL_forward>
    71a9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    71ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    71b1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    71b5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    71b9:	48 8b 40 10          	mov    0x10(%rax),%rax
    71bd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    71c1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    71c5:	e8 86 49 00 00       	call   bb50 <slipL_forward>
    71ca:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    71ce:	48 8d 05 3f 92 01 00 	lea    0x1923f(%rip),%rax        # 20414 <slip_debug_compile>
    71d5:	f6 00 01             	testb  $0x1,(%rax)
    71d8:	0f 84 15 00 00 00    	je     71f3 <_mod+0xe3>
    71de:	48 8d 3d 54 13 01 00 	lea    0x11354(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    71e5:	48 8d 35 fe 13 01 00 	lea    0x113fe(%rip),%rsi        # 185ea <_IO_stdin_used+0x5ea>
    71ec:	b0 00                	mov    $0x0,%al
    71ee:	e8 dd be ff ff       	call   30d0 <printf@plt>
    71f3:	e9 00 00 00 00       	jmp    71f8 <_mod+0xe8>
    71f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    71fc:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7201:	e8 ea 42 00 00       	call   b4f0 <slipC_getFunc>
    7206:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    720a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7211:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7215:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7219:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    721d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7220:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7224:	e8 57 13 00 00       	call   8580 <load>
    7229:	89 45 98             	mov    %eax,-0x68(%rbp)
    722c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7230:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7234:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7238:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    723b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    723f:	e8 3c 13 00 00       	call   8580 <load>
    7244:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7247:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    724b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    724e:	e8 8d 53 00 00       	call   c5e0 <slipP_popLocalVar>
    7253:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7257:	be 01 00 00 00       	mov    $0x1,%esi
    725c:	e8 4f 53 00 00       	call   c5b0 <slipP_addLocalVar>
    7261:	89 45 90             	mov    %eax,-0x70(%rbp)
    7264:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7268:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    726c:	8b 45 90             	mov    -0x70(%rbp),%eax
    726f:	66 89 c2             	mov    %ax,%dx
    7272:	8b 45 98             	mov    -0x68(%rbp),%eax
    7275:	88 c1                	mov    %al,%cl
    7277:	8b 45 94             	mov    -0x6c(%rbp),%eax
    727a:	0f b7 fa             	movzwl %dx,%edi
    727d:	0f b6 f1             	movzbl %cl,%esi
    7280:	0f b6 d0             	movzbl %al,%edx
    7283:	e8 58 1e 00 00       	call   90e0 <slipI_mod>
    7288:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    728c:	89 45 88             	mov    %eax,-0x78(%rbp)
    728f:	8b 75 88             	mov    -0x78(%rbp),%esi
    7292:	e8 89 4f 00 00       	call   c220 <slipP_addInstruction>
    7297:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    729b:	8b 75 90             	mov    -0x70(%rbp),%esi
    729e:	e8 3d 7f 00 00       	call   f1e0 <slipV_pushExpr>
    72a3:	48 8d 05 6a 91 01 00 	lea    0x1916a(%rip),%rax        # 20414 <slip_debug_compile>
    72aa:	f6 00 01             	testb  $0x1,(%rax)
    72ad:	0f 84 09 00 00 00    	je     72bc <_mod+0x1ac>
    72b3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    72b7:	e8 04 43 00 00       	call   b5c0 <slipC_printStack>
    72bc:	bf 01 00 00 00       	mov    $0x1,%edi
    72c1:	be 02 00 00 00       	mov    $0x2,%esi
    72c6:	e8 45 18 00 00       	call   8b10 <slip_Return>
    72cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    72cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    72d3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    72da:	5d                   	pop    %rbp
    72db:	c3                   	ret
    72dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000072e0 <_set>:
    72e0:	55                   	push   %rbp
    72e1:	48 89 e5             	mov    %rsp,%rbp
    72e4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    72eb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    72ef:	89 75 ec             	mov    %esi,-0x14(%rbp)
    72f2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    72f6:	0f 8c 05 00 00 00    	jl     7301 <_set+0x21>
    72fc:	e9 1f 00 00 00       	jmp    7320 <_set+0x40>
    7301:	48 8d 3d de 0e 01 00 	lea    0x10ede(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7308:	48 8d 35 e0 0e 01 00 	lea    0x10ee0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    730f:	ba ce 00 00 00       	mov    $0xce,%edx
    7314:	48 8d 0d d4 12 01 00 	lea    0x112d4(%rip),%rcx        # 185ef <_IO_stdin_used+0x5ef>
    731b:	e8 d0 bd ff ff       	call   30f0 <__assert_fail@plt>
    7320:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7327:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    732b:	31 f6                	xor    %esi,%esi
    732d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7330:	e8 8b 7b 00 00       	call   eec0 <slipV_getValue>
    7335:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7339:	89 55 e0             	mov    %edx,-0x20(%rbp)
    733c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7340:	48 83 c7 08          	add    $0x8,%rdi
    7344:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7347:	e8 24 67 00 00       	call   da70 <slipS_popValueNum>
    734c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7350:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7354:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7358:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    735c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7360:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7364:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7368:	48 8b 40 10          	mov    0x10(%rax),%rax
    736c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7370:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7374:	e8 d7 47 00 00       	call   bb50 <slipL_forward>
    7379:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    737d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7381:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7385:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7389:	48 8b 40 10          	mov    0x10(%rax),%rax
    738d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7391:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7395:	e8 b6 47 00 00       	call   bb50 <slipL_forward>
    739a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    739e:	48 8d 05 6f 90 01 00 	lea    0x1906f(%rip),%rax        # 20414 <slip_debug_compile>
    73a5:	f6 00 01             	testb  $0x1,(%rax)
    73a8:	0f 84 0e 00 00 00    	je     73bc <_set+0xdc>
    73ae:	48 8d 3d 56 12 01 00 	lea    0x11256(%rip),%rdi        # 1860b <_IO_stdin_used+0x60b>
    73b5:	b0 00                	mov    $0x0,%al
    73b7:	e8 14 bd ff ff       	call   30d0 <printf@plt>
    73bc:	e9 00 00 00 00       	jmp    73c1 <_set+0xe1>
    73c1:	81 7d c0 00 01 00 00 	cmpl   $0x100,-0x40(%rbp)
    73c8:	0f 85 0d 00 00 00    	jne    73db <_set+0xfb>
    73ce:	81 7d b0 00 01 00 00 	cmpl   $0x100,-0x50(%rbp)
    73d5:	0f 84 2d 00 00 00    	je     7408 <_set+0x128>
    73db:	48 8b 05 0e 8c 01 00 	mov    0x18c0e(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    73e2:	48 8b 38             	mov    (%rax),%rdi
    73e5:	48 8d 35 2b 12 01 00 	lea    0x1122b(%rip),%rsi        # 18617 <_IO_stdin_used+0x617>
    73ec:	b0 00                	mov    $0x0,%al
    73ee:	e8 3d bd ff ff       	call   3130 <fprintf@plt>
    73f3:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    73f8:	31 f6                	xor    %esi,%esi
    73fa:	e8 11 17 00 00       	call   8b10 <slip_Return>
    73ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7403:	e9 43 01 00 00       	jmp    754b <_set+0x26b>
    7408:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    740c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7410:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7414:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    7418:	31 c0                	xor    %eax,%eax
    741a:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    741f:	88 85 77 ff ff ff    	mov    %al,-0x89(%rbp)
    7425:	0f 84 0e 00 00 00    	je     7439 <_set+0x159>
    742b:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    7430:	0f 95 c0             	setne  %al
    7433:	88 85 77 ff ff ff    	mov    %al,-0x89(%rbp)
    7439:	8a 85 77 ff ff ff    	mov    -0x89(%rbp),%al
    743f:	a8 01                	test   $0x1,%al
    7441:	0f 85 05 00 00 00    	jne    744c <_set+0x16c>
    7447:	e9 d6 00 00 00       	jmp    7522 <_set+0x242>
    744c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7450:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7455:	e8 96 40 00 00       	call   b4f0 <slipC_getFunc>
    745a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    745e:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
    7465:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7469:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    746d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7471:	48 8b 50 08          	mov    0x8(%rax),%rdx
    7475:	8b 48 10             	mov    0x10(%rax),%ecx
    7478:	4c 8d 45 8c          	lea    -0x74(%rbp),%r8
    747c:	e8 ff 10 00 00       	call   8580 <load>
    7481:	89 45 88             	mov    %eax,-0x78(%rbp)
    7484:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7488:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    748c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7490:	48 8b 50 08          	mov    0x8(%rax),%rdx
    7494:	8b 48 10             	mov    0x10(%rax),%ecx
    7497:	4c 8d 45 8c          	lea    -0x74(%rbp),%r8
    749b:	e8 e0 10 00 00       	call   8580 <load>
    74a0:	89 45 84             	mov    %eax,-0x7c(%rbp)
    74a3:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    74a7:	8b 75 8c             	mov    -0x74(%rbp),%esi
    74aa:	e8 31 51 00 00       	call   c5e0 <slipP_popLocalVar>
    74af:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
    74b3:	be 01 00 00 00       	mov    $0x1,%esi
    74b8:	e8 f3 50 00 00       	call   c5b0 <slipP_addLocalVar>
    74bd:	89 45 80             	mov    %eax,-0x80(%rbp)
    74c0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    74c4:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    74cb:	8b 45 88             	mov    -0x78(%rbp),%eax
    74ce:	66 89 c1             	mov    %ax,%cx
    74d1:	8b 45 84             	mov    -0x7c(%rbp),%eax
    74d4:	0f b7 f9             	movzwl %cx,%edi
    74d7:	0f b7 f0             	movzwl %ax,%esi
    74da:	e8 91 15 00 00       	call   8a70 <slipI_move>
    74df:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
    74e6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
    74ec:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
    74f2:	e8 29 4d 00 00       	call   c220 <slipP_addInstruction>
    74f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    74fb:	8b 75 80             	mov    -0x80(%rbp),%esi
    74fe:	e8 dd 7c 00 00       	call   f1e0 <slipV_pushExpr>
    7503:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7507:	e8 44 46 00 00       	call   bb50 <slipL_forward>
    750c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7510:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
    7514:	e8 37 46 00 00       	call   bb50 <slipL_forward>
    7519:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    751d:	e9 f6 fe ff ff       	jmp    7418 <_set+0x138>
    7522:	48 8d 05 eb 8e 01 00 	lea    0x18eeb(%rip),%rax        # 20414 <slip_debug_compile>
    7529:	f6 00 01             	testb  $0x1,(%rax)
    752c:	0f 84 09 00 00 00    	je     753b <_set+0x25b>
    7532:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7536:	e8 85 40 00 00       	call   b5c0 <slipC_printStack>
    753b:	be 02 00 00 00       	mov    $0x2,%esi
    7540:	89 f7                	mov    %esi,%edi
    7542:	e8 c9 15 00 00       	call   8b10 <slip_Return>
    7547:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    754b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    754f:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    7556:	5d                   	pop    %rbp
    7557:	c3                   	ret
    7558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    755f:	00 

0000000000007560 <_eq>:
    7560:	55                   	push   %rbp
    7561:	48 89 e5             	mov    %rsp,%rbp
    7564:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    756b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    756f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7572:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7576:	0f 8c 05 00 00 00    	jl     7581 <_eq+0x21>
    757c:	e9 1f 00 00 00       	jmp    75a0 <_eq+0x40>
    7581:	48 8d 3d 5e 0c 01 00 	lea    0x10c5e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7588:	48 8d 35 60 0c 01 00 	lea    0x10c60(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    758f:	ba ac 00 00 00       	mov    $0xac,%edx
    7594:	48 8d 0d 8d 10 01 00 	lea    0x1108d(%rip),%rcx        # 18628 <_IO_stdin_used+0x628>
    759b:	e8 50 bb ff ff       	call   30f0 <__assert_fail@plt>
    75a0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    75a7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    75ab:	31 f6                	xor    %esi,%esi
    75ad:	2b 75 ec             	sub    -0x14(%rbp),%esi
    75b0:	e8 0b 79 00 00       	call   eec0 <slipV_getValue>
    75b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    75b9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    75bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    75c0:	48 83 c7 08          	add    $0x8,%rdi
    75c4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    75c7:	e8 a4 64 00 00       	call   da70 <slipS_popValueNum>
    75cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    75d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    75d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    75d8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    75dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    75e0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    75e4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    75e8:	48 8b 40 10          	mov    0x10(%rax),%rax
    75ec:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    75f0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    75f4:	e8 57 45 00 00       	call   bb50 <slipL_forward>
    75f9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    75fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7601:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7605:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7609:	48 8b 40 10          	mov    0x10(%rax),%rax
    760d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7611:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7615:	e8 36 45 00 00       	call   bb50 <slipL_forward>
    761a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    761e:	48 8d 05 ef 8d 01 00 	lea    0x18def(%rip),%rax        # 20414 <slip_debug_compile>
    7625:	f6 00 01             	testb  $0x1,(%rax)
    7628:	0f 84 15 00 00 00    	je     7643 <_eq+0xe3>
    762e:	48 8d 3d 04 0f 01 00 	lea    0x10f04(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7635:	48 8d 35 07 10 01 00 	lea    0x11007(%rip),%rsi        # 18643 <_IO_stdin_used+0x643>
    763c:	b0 00                	mov    $0x0,%al
    763e:	e8 8d ba ff ff       	call   30d0 <printf@plt>
    7643:	e9 00 00 00 00       	jmp    7648 <_eq+0xe8>
    7648:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    764c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7651:	e8 9a 3e 00 00       	call   b4f0 <slipC_getFunc>
    7656:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    765a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7661:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7665:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7669:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    766d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7670:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7674:	e8 07 0f 00 00       	call   8580 <load>
    7679:	89 45 98             	mov    %eax,-0x68(%rbp)
    767c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7680:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7684:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7688:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    768b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    768f:	e8 ec 0e 00 00       	call   8580 <load>
    7694:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7697:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    769b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    769e:	e8 3d 4f 00 00       	call   c5e0 <slipP_popLocalVar>
    76a3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    76a7:	be 01 00 00 00       	mov    $0x1,%esi
    76ac:	e8 ff 4e 00 00       	call   c5b0 <slipP_addLocalVar>
    76b1:	89 45 90             	mov    %eax,-0x70(%rbp)
    76b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    76b8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    76bc:	8b 45 90             	mov    -0x70(%rbp),%eax
    76bf:	66 89 c2             	mov    %ax,%dx
    76c2:	8b 45 98             	mov    -0x68(%rbp),%eax
    76c5:	88 c1                	mov    %al,%cl
    76c7:	8b 45 94             	mov    -0x6c(%rbp),%eax
    76ca:	0f b7 fa             	movzwl %dx,%edi
    76cd:	0f b6 f1             	movzbl %cl,%esi
    76d0:	0f b6 d0             	movzbl %al,%edx
    76d3:	e8 58 1a 00 00       	call   9130 <slipI_eq>
    76d8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    76dc:	89 45 88             	mov    %eax,-0x78(%rbp)
    76df:	8b 75 88             	mov    -0x78(%rbp),%esi
    76e2:	e8 39 4b 00 00       	call   c220 <slipP_addInstruction>
    76e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    76eb:	8b 75 90             	mov    -0x70(%rbp),%esi
    76ee:	e8 ed 7a 00 00       	call   f1e0 <slipV_pushExpr>
    76f3:	48 8d 05 1a 8d 01 00 	lea    0x18d1a(%rip),%rax        # 20414 <slip_debug_compile>
    76fa:	f6 00 01             	testb  $0x1,(%rax)
    76fd:	0f 84 09 00 00 00    	je     770c <_eq+0x1ac>
    7703:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7707:	e8 b4 3e 00 00       	call   b5c0 <slipC_printStack>
    770c:	bf 01 00 00 00       	mov    $0x1,%edi
    7711:	be 02 00 00 00       	mov    $0x2,%esi
    7716:	e8 f5 13 00 00       	call   8b10 <slip_Return>
    771b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    771f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7723:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    772a:	5d                   	pop    %rbp
    772b:	c3                   	ret
    772c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007730 <_le>:
    7730:	55                   	push   %rbp
    7731:	48 89 e5             	mov    %rsp,%rbp
    7734:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    773b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    773f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7742:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7746:	0f 8c 05 00 00 00    	jl     7751 <_le+0x21>
    774c:	e9 1f 00 00 00       	jmp    7770 <_le+0x40>
    7751:	48 8d 3d 8e 0a 01 00 	lea    0x10a8e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7758:	48 8d 35 90 0a 01 00 	lea    0x10a90(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    775f:	ba af 00 00 00       	mov    $0xaf,%edx
    7764:	48 8d 0d dc 0e 01 00 	lea    0x10edc(%rip),%rcx        # 18647 <_IO_stdin_used+0x647>
    776b:	e8 80 b9 ff ff       	call   30f0 <__assert_fail@plt>
    7770:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7777:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    777b:	31 f6                	xor    %esi,%esi
    777d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7780:	e8 3b 77 00 00       	call   eec0 <slipV_getValue>
    7785:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7789:	89 55 e0             	mov    %edx,-0x20(%rbp)
    778c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7790:	48 83 c7 08          	add    $0x8,%rdi
    7794:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7797:	e8 d4 62 00 00       	call   da70 <slipS_popValueNum>
    779c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    77a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    77a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    77a8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    77ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    77b0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    77b4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    77b8:	48 8b 40 10          	mov    0x10(%rax),%rax
    77bc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    77c0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    77c4:	e8 87 43 00 00       	call   bb50 <slipL_forward>
    77c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    77cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    77d1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    77d5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    77d9:	48 8b 40 10          	mov    0x10(%rax),%rax
    77dd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    77e1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    77e5:	e8 66 43 00 00       	call   bb50 <slipL_forward>
    77ea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    77ee:	48 8d 05 1f 8c 01 00 	lea    0x18c1f(%rip),%rax        # 20414 <slip_debug_compile>
    77f5:	f6 00 01             	testb  $0x1,(%rax)
    77f8:	0f 84 15 00 00 00    	je     7813 <_le+0xe3>
    77fe:	48 8d 3d 34 0d 01 00 	lea    0x10d34(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7805:	48 8d 35 56 0e 01 00 	lea    0x10e56(%rip),%rsi        # 18662 <_IO_stdin_used+0x662>
    780c:	b0 00                	mov    $0x0,%al
    780e:	e8 bd b8 ff ff       	call   30d0 <printf@plt>
    7813:	e9 00 00 00 00       	jmp    7818 <_le+0xe8>
    7818:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    781c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7821:	e8 ca 3c 00 00       	call   b4f0 <slipC_getFunc>
    7826:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    782a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7831:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7835:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7839:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    783d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7840:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7844:	e8 37 0d 00 00       	call   8580 <load>
    7849:	89 45 98             	mov    %eax,-0x68(%rbp)
    784c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7850:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7854:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7858:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    785b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    785f:	e8 1c 0d 00 00       	call   8580 <load>
    7864:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7867:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    786b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    786e:	e8 6d 4d 00 00       	call   c5e0 <slipP_popLocalVar>
    7873:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7877:	be 01 00 00 00       	mov    $0x1,%esi
    787c:	e8 2f 4d 00 00       	call   c5b0 <slipP_addLocalVar>
    7881:	89 45 90             	mov    %eax,-0x70(%rbp)
    7884:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7888:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    788c:	8b 45 90             	mov    -0x70(%rbp),%eax
    788f:	66 89 c2             	mov    %ax,%dx
    7892:	8b 45 98             	mov    -0x68(%rbp),%eax
    7895:	88 c1                	mov    %al,%cl
    7897:	8b 45 94             	mov    -0x6c(%rbp),%eax
    789a:	0f b7 fa             	movzwl %dx,%edi
    789d:	0f b6 f1             	movzbl %cl,%esi
    78a0:	0f b6 d0             	movzbl %al,%edx
    78a3:	e8 d8 18 00 00       	call   9180 <slipI_le>
    78a8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    78ac:	89 45 88             	mov    %eax,-0x78(%rbp)
    78af:	8b 75 88             	mov    -0x78(%rbp),%esi
    78b2:	e8 69 49 00 00       	call   c220 <slipP_addInstruction>
    78b7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    78bb:	8b 75 90             	mov    -0x70(%rbp),%esi
    78be:	e8 1d 79 00 00       	call   f1e0 <slipV_pushExpr>
    78c3:	48 8d 05 4a 8b 01 00 	lea    0x18b4a(%rip),%rax        # 20414 <slip_debug_compile>
    78ca:	f6 00 01             	testb  $0x1,(%rax)
    78cd:	0f 84 09 00 00 00    	je     78dc <_le+0x1ac>
    78d3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    78d7:	e8 e4 3c 00 00       	call   b5c0 <slipC_printStack>
    78dc:	bf 01 00 00 00       	mov    $0x1,%edi
    78e1:	be 02 00 00 00       	mov    $0x2,%esi
    78e6:	e8 25 12 00 00       	call   8b10 <slip_Return>
    78eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    78ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    78f3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    78fa:	5d                   	pop    %rbp
    78fb:	c3                   	ret
    78fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007900 <_lt>:
    7900:	55                   	push   %rbp
    7901:	48 89 e5             	mov    %rsp,%rbp
    7904:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    790b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    790f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7912:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7916:	0f 8c 05 00 00 00    	jl     7921 <_lt+0x21>
    791c:	e9 1f 00 00 00       	jmp    7940 <_lt+0x40>
    7921:	48 8d 3d be 08 01 00 	lea    0x108be(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7928:	48 8d 35 c0 08 01 00 	lea    0x108c0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    792f:	ba ae 00 00 00       	mov    $0xae,%edx
    7934:	48 8d 0d 2b 0d 01 00 	lea    0x10d2b(%rip),%rcx        # 18666 <_IO_stdin_used+0x666>
    793b:	e8 b0 b7 ff ff       	call   30f0 <__assert_fail@plt>
    7940:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7947:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    794b:	31 f6                	xor    %esi,%esi
    794d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7950:	e8 6b 75 00 00       	call   eec0 <slipV_getValue>
    7955:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7959:	89 55 e0             	mov    %edx,-0x20(%rbp)
    795c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7960:	48 83 c7 08          	add    $0x8,%rdi
    7964:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7967:	e8 04 61 00 00       	call   da70 <slipS_popValueNum>
    796c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7970:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7974:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7978:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    797c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7980:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7984:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7988:	48 8b 40 10          	mov    0x10(%rax),%rax
    798c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7990:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7994:	e8 b7 41 00 00       	call   bb50 <slipL_forward>
    7999:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    799d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79a1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    79a5:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    79a9:	48 8b 40 10          	mov    0x10(%rax),%rax
    79ad:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    79b1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    79b5:	e8 96 41 00 00       	call   bb50 <slipL_forward>
    79ba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    79be:	48 8d 05 4f 8a 01 00 	lea    0x18a4f(%rip),%rax        # 20414 <slip_debug_compile>
    79c5:	f6 00 01             	testb  $0x1,(%rax)
    79c8:	0f 84 15 00 00 00    	je     79e3 <_lt+0xe3>
    79ce:	48 8d 3d 64 0b 01 00 	lea    0x10b64(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    79d5:	48 8d 35 a5 0c 01 00 	lea    0x10ca5(%rip),%rsi        # 18681 <_IO_stdin_used+0x681>
    79dc:	b0 00                	mov    $0x0,%al
    79de:	e8 ed b6 ff ff       	call   30d0 <printf@plt>
    79e3:	e9 00 00 00 00       	jmp    79e8 <_lt+0xe8>
    79e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    79ec:	be ff ff ff ff       	mov    $0xffffffff,%esi
    79f1:	e8 fa 3a 00 00       	call   b4f0 <slipC_getFunc>
    79f6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    79fa:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7a01:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7a05:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7a09:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7a0d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7a10:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7a14:	e8 67 0b 00 00       	call   8580 <load>
    7a19:	89 45 98             	mov    %eax,-0x68(%rbp)
    7a1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7a20:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7a24:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7a28:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    7a2b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7a2f:	e8 4c 0b 00 00       	call   8580 <load>
    7a34:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7a37:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7a3b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    7a3e:	e8 9d 4b 00 00       	call   c5e0 <slipP_popLocalVar>
    7a43:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7a47:	be 01 00 00 00       	mov    $0x1,%esi
    7a4c:	e8 5f 4b 00 00       	call   c5b0 <slipP_addLocalVar>
    7a51:	89 45 90             	mov    %eax,-0x70(%rbp)
    7a54:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7a58:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    7a5c:	8b 45 90             	mov    -0x70(%rbp),%eax
    7a5f:	66 89 c2             	mov    %ax,%dx
    7a62:	8b 45 98             	mov    -0x68(%rbp),%eax
    7a65:	88 c1                	mov    %al,%cl
    7a67:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7a6a:	0f b7 fa             	movzwl %dx,%edi
    7a6d:	0f b6 f1             	movzbl %cl,%esi
    7a70:	0f b6 d0             	movzbl %al,%edx
    7a73:	e8 58 17 00 00       	call   91d0 <slipI_lt>
    7a78:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    7a7c:	89 45 88             	mov    %eax,-0x78(%rbp)
    7a7f:	8b 75 88             	mov    -0x78(%rbp),%esi
    7a82:	e8 99 47 00 00       	call   c220 <slipP_addInstruction>
    7a87:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7a8b:	8b 75 90             	mov    -0x70(%rbp),%esi
    7a8e:	e8 4d 77 00 00       	call   f1e0 <slipV_pushExpr>
    7a93:	48 8d 05 7a 89 01 00 	lea    0x1897a(%rip),%rax        # 20414 <slip_debug_compile>
    7a9a:	f6 00 01             	testb  $0x1,(%rax)
    7a9d:	0f 84 09 00 00 00    	je     7aac <_lt+0x1ac>
    7aa3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7aa7:	e8 14 3b 00 00       	call   b5c0 <slipC_printStack>
    7aac:	bf 01 00 00 00       	mov    $0x1,%edi
    7ab1:	be 02 00 00 00       	mov    $0x2,%esi
    7ab6:	e8 55 10 00 00       	call   8b10 <slip_Return>
    7abb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ac3:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    7aca:	5d                   	pop    %rbp
    7acb:	c3                   	ret
    7acc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007ad0 <_gt>:
    7ad0:	55                   	push   %rbp
    7ad1:	48 89 e5             	mov    %rsp,%rbp
    7ad4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    7adb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7adf:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7ae2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7ae6:	0f 8c 05 00 00 00    	jl     7af1 <_gt+0x21>
    7aec:	e9 1f 00 00 00       	jmp    7b10 <_gt+0x40>
    7af1:	48 8d 3d ee 06 01 00 	lea    0x106ee(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7af8:	48 8d 35 f0 06 01 00 	lea    0x106f0(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    7aff:	ba b0 00 00 00       	mov    $0xb0,%edx
    7b04:	48 8d 0d 7a 0b 01 00 	lea    0x10b7a(%rip),%rcx        # 18685 <_IO_stdin_used+0x685>
    7b0b:	e8 e0 b5 ff ff       	call   30f0 <__assert_fail@plt>
    7b10:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7b17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7b1b:	31 f6                	xor    %esi,%esi
    7b1d:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7b20:	e8 9b 73 00 00       	call   eec0 <slipV_getValue>
    7b25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7b29:	89 55 e0             	mov    %edx,-0x20(%rbp)
    7b2c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7b30:	48 83 c7 08          	add    $0x8,%rdi
    7b34:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7b37:	e8 34 5f 00 00       	call   da70 <slipS_popValueNum>
    7b3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b40:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7b44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7b48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7b4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b50:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7b54:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7b58:	48 8b 40 10          	mov    0x10(%rax),%rax
    7b5c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7b60:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7b64:	e8 e7 3f 00 00       	call   bb50 <slipL_forward>
    7b69:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7b6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b71:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7b75:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7b79:	48 8b 40 10          	mov    0x10(%rax),%rax
    7b7d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7b81:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7b85:	e8 c6 3f 00 00       	call   bb50 <slipL_forward>
    7b8a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7b8e:	48 8d 05 7f 88 01 00 	lea    0x1887f(%rip),%rax        # 20414 <slip_debug_compile>
    7b95:	f6 00 01             	testb  $0x1,(%rax)
    7b98:	0f 84 15 00 00 00    	je     7bb3 <_gt+0xe3>
    7b9e:	48 8d 3d 94 09 01 00 	lea    0x10994(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7ba5:	48 8d 35 f4 0a 01 00 	lea    0x10af4(%rip),%rsi        # 186a0 <_IO_stdin_used+0x6a0>
    7bac:	b0 00                	mov    $0x0,%al
    7bae:	e8 1d b5 ff ff       	call   30d0 <printf@plt>
    7bb3:	e9 00 00 00 00       	jmp    7bb8 <_gt+0xe8>
    7bb8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7bbc:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7bc1:	e8 2a 39 00 00       	call   b4f0 <slipC_getFunc>
    7bc6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7bca:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7bd1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7bd5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7bd9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7bdd:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7be0:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7be4:	e8 97 09 00 00       	call   8580 <load>
    7be9:	89 45 98             	mov    %eax,-0x68(%rbp)
    7bec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7bf0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7bf4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7bf8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    7bfb:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7bff:	e8 7c 09 00 00       	call   8580 <load>
    7c04:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7c07:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7c0b:	8b 75 9c             	mov    -0x64(%rbp),%esi
    7c0e:	e8 cd 49 00 00       	call   c5e0 <slipP_popLocalVar>
    7c13:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7c17:	be 01 00 00 00       	mov    $0x1,%esi
    7c1c:	e8 8f 49 00 00       	call   c5b0 <slipP_addLocalVar>
    7c21:	89 45 90             	mov    %eax,-0x70(%rbp)
    7c24:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7c28:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    7c2c:	8b 45 90             	mov    -0x70(%rbp),%eax
    7c2f:	66 89 c2             	mov    %ax,%dx
    7c32:	8b 45 98             	mov    -0x68(%rbp),%eax
    7c35:	88 c1                	mov    %al,%cl
    7c37:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7c3a:	0f b7 fa             	movzwl %dx,%edi
    7c3d:	0f b6 f1             	movzbl %cl,%esi
    7c40:	0f b6 d0             	movzbl %al,%edx
    7c43:	e8 d8 15 00 00       	call   9220 <slipI_gt>
    7c48:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    7c4c:	89 45 88             	mov    %eax,-0x78(%rbp)
    7c4f:	8b 75 88             	mov    -0x78(%rbp),%esi
    7c52:	e8 c9 45 00 00       	call   c220 <slipP_addInstruction>
    7c57:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7c5b:	8b 75 90             	mov    -0x70(%rbp),%esi
    7c5e:	e8 7d 75 00 00       	call   f1e0 <slipV_pushExpr>
    7c63:	48 8d 05 aa 87 01 00 	lea    0x187aa(%rip),%rax        # 20414 <slip_debug_compile>
    7c6a:	f6 00 01             	testb  $0x1,(%rax)
    7c6d:	0f 84 09 00 00 00    	je     7c7c <_gt+0x1ac>
    7c73:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7c77:	e8 44 39 00 00       	call   b5c0 <slipC_printStack>
    7c7c:	bf 01 00 00 00       	mov    $0x1,%edi
    7c81:	be 02 00 00 00       	mov    $0x2,%esi
    7c86:	e8 85 0e 00 00       	call   8b10 <slip_Return>
    7c8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7c93:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    7c9a:	5d                   	pop    %rbp
    7c9b:	c3                   	ret
    7c9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007ca0 <_ge>:
    7ca0:	55                   	push   %rbp
    7ca1:	48 89 e5             	mov    %rsp,%rbp
    7ca4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    7cab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7caf:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7cb2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7cb6:	0f 8c 05 00 00 00    	jl     7cc1 <_ge+0x21>
    7cbc:	e9 1f 00 00 00       	jmp    7ce0 <_ge+0x40>
    7cc1:	48 8d 3d 1e 05 01 00 	lea    0x1051e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7cc8:	48 8d 35 20 05 01 00 	lea    0x10520(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    7ccf:	ba b1 00 00 00       	mov    $0xb1,%edx
    7cd4:	48 8d 0d c9 09 01 00 	lea    0x109c9(%rip),%rcx        # 186a4 <_IO_stdin_used+0x6a4>
    7cdb:	e8 10 b4 ff ff       	call   30f0 <__assert_fail@plt>
    7ce0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7ce7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7ceb:	31 f6                	xor    %esi,%esi
    7ced:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7cf0:	e8 cb 71 00 00       	call   eec0 <slipV_getValue>
    7cf5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7cf9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    7cfc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7d00:	48 83 c7 08          	add    $0x8,%rdi
    7d04:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7d07:	e8 64 5d 00 00       	call   da70 <slipS_popValueNum>
    7d0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7d14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7d18:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7d1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7d20:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7d24:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7d28:	48 8b 40 10          	mov    0x10(%rax),%rax
    7d2c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7d30:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7d34:	e8 17 3e 00 00       	call   bb50 <slipL_forward>
    7d39:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7d3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7d41:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7d45:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7d49:	48 8b 40 10          	mov    0x10(%rax),%rax
    7d4d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7d51:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7d55:	e8 f6 3d 00 00       	call   bb50 <slipL_forward>
    7d5a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7d5e:	48 8d 05 af 86 01 00 	lea    0x186af(%rip),%rax        # 20414 <slip_debug_compile>
    7d65:	f6 00 01             	testb  $0x1,(%rax)
    7d68:	0f 84 15 00 00 00    	je     7d83 <_ge+0xe3>
    7d6e:	48 8d 3d c4 07 01 00 	lea    0x107c4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7d75:	48 8d 35 43 09 01 00 	lea    0x10943(%rip),%rsi        # 186bf <_IO_stdin_used+0x6bf>
    7d7c:	b0 00                	mov    $0x0,%al
    7d7e:	e8 4d b3 ff ff       	call   30d0 <printf@plt>
    7d83:	e9 00 00 00 00       	jmp    7d88 <_ge+0xe8>
    7d88:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7d8c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7d91:	e8 5a 37 00 00       	call   b4f0 <slipC_getFunc>
    7d96:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7d9a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7da1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7da5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7da9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7dad:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7db0:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7db4:	e8 c7 07 00 00       	call   8580 <load>
    7db9:	89 45 98             	mov    %eax,-0x68(%rbp)
    7dbc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7dc0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7dc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7dc8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    7dcb:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7dcf:	e8 ac 07 00 00       	call   8580 <load>
    7dd4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7dd7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7ddb:	8b 75 9c             	mov    -0x64(%rbp),%esi
    7dde:	e8 fd 47 00 00       	call   c5e0 <slipP_popLocalVar>
    7de3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7de7:	be 01 00 00 00       	mov    $0x1,%esi
    7dec:	e8 bf 47 00 00       	call   c5b0 <slipP_addLocalVar>
    7df1:	89 45 90             	mov    %eax,-0x70(%rbp)
    7df4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7df8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    7dfc:	8b 45 90             	mov    -0x70(%rbp),%eax
    7dff:	66 89 c2             	mov    %ax,%dx
    7e02:	8b 45 98             	mov    -0x68(%rbp),%eax
    7e05:	88 c1                	mov    %al,%cl
    7e07:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7e0a:	0f b7 fa             	movzwl %dx,%edi
    7e0d:	0f b6 f1             	movzbl %cl,%esi
    7e10:	0f b6 d0             	movzbl %al,%edx
    7e13:	e8 58 14 00 00       	call   9270 <slipI_ge>
    7e18:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    7e1c:	89 45 88             	mov    %eax,-0x78(%rbp)
    7e1f:	8b 75 88             	mov    -0x78(%rbp),%esi
    7e22:	e8 f9 43 00 00       	call   c220 <slipP_addInstruction>
    7e27:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7e2b:	8b 75 90             	mov    -0x70(%rbp),%esi
    7e2e:	e8 ad 73 00 00       	call   f1e0 <slipV_pushExpr>
    7e33:	48 8d 05 da 85 01 00 	lea    0x185da(%rip),%rax        # 20414 <slip_debug_compile>
    7e3a:	f6 00 01             	testb  $0x1,(%rax)
    7e3d:	0f 84 09 00 00 00    	je     7e4c <_ge+0x1ac>
    7e43:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7e47:	e8 74 37 00 00       	call   b5c0 <slipC_printStack>
    7e4c:	bf 01 00 00 00       	mov    $0x1,%edi
    7e51:	be 02 00 00 00       	mov    $0x2,%esi
    7e56:	e8 b5 0c 00 00       	call   8b10 <slip_Return>
    7e5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e63:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    7e6a:	5d                   	pop    %rbp
    7e6b:	c3                   	ret
    7e6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007e70 <_ne>:
    7e70:	55                   	push   %rbp
    7e71:	48 89 e5             	mov    %rsp,%rbp
    7e74:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    7e7b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    7e7f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    7e82:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    7e86:	0f 8c 05 00 00 00    	jl     7e91 <_ne+0x21>
    7e8c:	e9 1f 00 00 00       	jmp    7eb0 <_ne+0x40>
    7e91:	48 8d 3d 4e 03 01 00 	lea    0x1034e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    7e98:	48 8d 35 50 03 01 00 	lea    0x10350(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    7e9f:	ba ad 00 00 00       	mov    $0xad,%edx
    7ea4:	48 8d 0d 18 08 01 00 	lea    0x10818(%rip),%rcx        # 186c3 <_IO_stdin_used+0x6c3>
    7eab:	e8 40 b2 ff ff       	call   30f0 <__assert_fail@plt>
    7eb0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    7eb7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7ebb:	31 f6                	xor    %esi,%esi
    7ebd:	2b 75 ec             	sub    -0x14(%rbp),%esi
    7ec0:	e8 fb 6f 00 00       	call   eec0 <slipV_getValue>
    7ec5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7ec9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    7ecc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7ed0:	48 83 c7 08          	add    $0x8,%rdi
    7ed4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    7ed7:	e8 94 5b 00 00       	call   da70 <slipS_popValueNum>
    7edc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7ee0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7ee4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7ee8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7eec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ef0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7ef4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    7ef8:	48 8b 40 10          	mov    0x10(%rax),%rax
    7efc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7f00:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7f04:	e8 47 3c 00 00       	call   bb50 <slipL_forward>
    7f09:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7f0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f11:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7f15:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    7f19:	48 8b 40 10          	mov    0x10(%rax),%rax
    7f1d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7f21:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    7f25:	e8 26 3c 00 00       	call   bb50 <slipL_forward>
    7f2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7f2e:	48 8d 05 df 84 01 00 	lea    0x184df(%rip),%rax        # 20414 <slip_debug_compile>
    7f35:	f6 00 01             	testb  $0x1,(%rax)
    7f38:	0f 84 15 00 00 00    	je     7f53 <_ne+0xe3>
    7f3e:	48 8d 3d f4 05 01 00 	lea    0x105f4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    7f45:	48 8d 35 92 07 01 00 	lea    0x10792(%rip),%rsi        # 186de <_IO_stdin_used+0x6de>
    7f4c:	b0 00                	mov    $0x0,%al
    7f4e:	e8 7d b1 ff ff       	call   30d0 <printf@plt>
    7f53:	e9 00 00 00 00       	jmp    7f58 <_ne+0xe8>
    7f58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7f5c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    7f61:	e8 8a 35 00 00       	call   b4f0 <slipC_getFunc>
    7f66:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7f6a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    7f71:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7f75:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7f79:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7f7d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    7f80:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7f84:	e8 f7 05 00 00       	call   8580 <load>
    7f89:	89 45 98             	mov    %eax,-0x68(%rbp)
    7f8c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7f90:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7f94:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    7f98:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    7f9b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    7f9f:	e8 dc 05 00 00       	call   8580 <load>
    7fa4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    7fa7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7fab:	8b 75 9c             	mov    -0x64(%rbp),%esi
    7fae:	e8 2d 46 00 00       	call   c5e0 <slipP_popLocalVar>
    7fb3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    7fb7:	be 01 00 00 00       	mov    $0x1,%esi
    7fbc:	e8 ef 45 00 00       	call   c5b0 <slipP_addLocalVar>
    7fc1:	89 45 90             	mov    %eax,-0x70(%rbp)
    7fc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7fc8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    7fcc:	8b 45 90             	mov    -0x70(%rbp),%eax
    7fcf:	66 89 c2             	mov    %ax,%dx
    7fd2:	8b 45 98             	mov    -0x68(%rbp),%eax
    7fd5:	88 c1                	mov    %al,%cl
    7fd7:	8b 45 94             	mov    -0x6c(%rbp),%eax
    7fda:	0f b7 fa             	movzwl %dx,%edi
    7fdd:	0f b6 f1             	movzbl %cl,%esi
    7fe0:	0f b6 d0             	movzbl %al,%edx
    7fe3:	e8 d8 12 00 00       	call   92c0 <slipI_ne>
    7fe8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    7fec:	89 45 88             	mov    %eax,-0x78(%rbp)
    7fef:	8b 75 88             	mov    -0x78(%rbp),%esi
    7ff2:	e8 29 42 00 00       	call   c220 <slipP_addInstruction>
    7ff7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    7ffb:	8b 75 90             	mov    -0x70(%rbp),%esi
    7ffe:	e8 dd 71 00 00       	call   f1e0 <slipV_pushExpr>
    8003:	48 8d 05 0a 84 01 00 	lea    0x1840a(%rip),%rax        # 20414 <slip_debug_compile>
    800a:	f6 00 01             	testb  $0x1,(%rax)
    800d:	0f 84 09 00 00 00    	je     801c <_ne+0x1ac>
    8013:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8017:	e8 a4 35 00 00       	call   b5c0 <slipC_printStack>
    801c:	bf 01 00 00 00       	mov    $0x1,%edi
    8021:	be 02 00 00 00       	mov    $0x2,%esi
    8026:	e8 e5 0a 00 00       	call   8b10 <slip_Return>
    802b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    802f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8033:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    803a:	5d                   	pop    %rbp
    803b:	c3                   	ret
    803c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008040 <_not>:
    8040:	55                   	push   %rbp
    8041:	48 89 e5             	mov    %rsp,%rbp
    8044:	48 83 ec 20          	sub    $0x20,%rsp
    8048:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    804c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    804f:	48 8d 05 be 83 01 00 	lea    0x183be(%rip),%rax        # 20414 <slip_debug_compile>
    8056:	f6 00 01             	testb  $0x1,(%rax)
    8059:	0f 84 11 00 00 00    	je     8070 <_not+0x30>
    805f:	8b 75 ec             	mov    -0x14(%rbp),%esi
    8062:	48 8d 3d 79 06 01 00 	lea    0x10679(%rip),%rdi        # 186e2 <_IO_stdin_used+0x6e2>
    8069:	b0 00                	mov    $0x0,%al
    806b:	e8 60 b0 ff ff       	call   30d0 <printf@plt>
    8070:	e9 00 00 00 00       	jmp    8075 <_not+0x35>
    8075:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8079:	48 83 c7 08          	add    $0x8,%rdi
    807d:	8b 75 ec             	mov    -0x14(%rbp),%esi
    8080:	e8 eb 59 00 00       	call   da70 <slipS_popValueNum>
    8085:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    808a:	31 f6                	xor    %esi,%esi
    808c:	e8 7f 0a 00 00       	call   8b10 <slip_Return>
    8091:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8099:	48 83 c4 20          	add    $0x20,%rsp
    809d:	5d                   	pop    %rbp
    809e:	c3                   	ret
    809f:	90                   	nop

00000000000080a0 <_and>:
    80a0:	55                   	push   %rbp
    80a1:	48 89 e5             	mov    %rsp,%rbp
    80a4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    80ab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    80af:	89 75 ec             	mov    %esi,-0x14(%rbp)
    80b2:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    80b6:	0f 8c 05 00 00 00    	jl     80c1 <_and+0x21>
    80bc:	e9 1f 00 00 00       	jmp    80e0 <_and+0x40>
    80c1:	48 8d 3d 1e 01 01 00 	lea    0x1011e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    80c8:	48 8d 35 20 01 01 00 	lea    0x10120(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    80cf:	ba b2 00 00 00       	mov    $0xb2,%edx
    80d4:	48 8d 0d 16 06 01 00 	lea    0x10616(%rip),%rcx        # 186f1 <_IO_stdin_used+0x6f1>
    80db:	e8 10 b0 ff ff       	call   30f0 <__assert_fail@plt>
    80e0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    80e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    80eb:	31 f6                	xor    %esi,%esi
    80ed:	2b 75 ec             	sub    -0x14(%rbp),%esi
    80f0:	e8 cb 6d 00 00       	call   eec0 <slipV_getValue>
    80f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    80f9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    80fc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8100:	48 83 c7 08          	add    $0x8,%rdi
    8104:	8b 75 ec             	mov    -0x14(%rbp),%esi
    8107:	e8 64 59 00 00       	call   da70 <slipS_popValueNum>
    810c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8110:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8114:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8118:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    811c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8120:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8124:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    8128:	48 8b 40 10          	mov    0x10(%rax),%rax
    812c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8130:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    8134:	e8 17 3a 00 00       	call   bb50 <slipL_forward>
    8139:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    813d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8141:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8145:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    8149:	48 8b 40 10          	mov    0x10(%rax),%rax
    814d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    8151:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    8155:	e8 f6 39 00 00       	call   bb50 <slipL_forward>
    815a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    815e:	48 8d 05 af 82 01 00 	lea    0x182af(%rip),%rax        # 20414 <slip_debug_compile>
    8165:	f6 00 01             	testb  $0x1,(%rax)
    8168:	0f 84 15 00 00 00    	je     8183 <_and+0xe3>
    816e:	48 8d 3d c4 03 01 00 	lea    0x103c4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    8175:	48 8d 35 91 05 01 00 	lea    0x10591(%rip),%rsi        # 1870d <_IO_stdin_used+0x70d>
    817c:	b0 00                	mov    $0x0,%al
    817e:	e8 4d af ff ff       	call   30d0 <printf@plt>
    8183:	e9 00 00 00 00       	jmp    8188 <_and+0xe8>
    8188:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    818c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    8191:	e8 5a 33 00 00       	call   b4f0 <slipC_getFunc>
    8196:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    819a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    81a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    81a5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    81a9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    81ad:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    81b0:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    81b4:	e8 c7 03 00 00       	call   8580 <load>
    81b9:	89 45 98             	mov    %eax,-0x68(%rbp)
    81bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    81c0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    81c4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    81c8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    81cb:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    81cf:	e8 ac 03 00 00       	call   8580 <load>
    81d4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    81d7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    81db:	8b 75 9c             	mov    -0x64(%rbp),%esi
    81de:	e8 fd 43 00 00       	call   c5e0 <slipP_popLocalVar>
    81e3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    81e7:	be 01 00 00 00       	mov    $0x1,%esi
    81ec:	e8 bf 43 00 00       	call   c5b0 <slipP_addLocalVar>
    81f1:	89 45 90             	mov    %eax,-0x70(%rbp)
    81f4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    81f8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    81fc:	8b 45 90             	mov    -0x70(%rbp),%eax
    81ff:	66 89 c2             	mov    %ax,%dx
    8202:	8b 45 98             	mov    -0x68(%rbp),%eax
    8205:	88 c1                	mov    %al,%cl
    8207:	8b 45 94             	mov    -0x6c(%rbp),%eax
    820a:	0f b7 fa             	movzwl %dx,%edi
    820d:	0f b6 f1             	movzbl %cl,%esi
    8210:	0f b6 d0             	movzbl %al,%edx
    8213:	e8 f8 10 00 00       	call   9310 <slipI_and>
    8218:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    821c:	89 45 88             	mov    %eax,-0x78(%rbp)
    821f:	8b 75 88             	mov    -0x78(%rbp),%esi
    8222:	e8 f9 3f 00 00       	call   c220 <slipP_addInstruction>
    8227:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    822b:	8b 75 90             	mov    -0x70(%rbp),%esi
    822e:	e8 ad 6f 00 00       	call   f1e0 <slipV_pushExpr>
    8233:	48 8d 05 da 81 01 00 	lea    0x181da(%rip),%rax        # 20414 <slip_debug_compile>
    823a:	f6 00 01             	testb  $0x1,(%rax)
    823d:	0f 84 09 00 00 00    	je     824c <_and+0x1ac>
    8243:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8247:	e8 74 33 00 00       	call   b5c0 <slipC_printStack>
    824c:	bf 01 00 00 00       	mov    $0x1,%edi
    8251:	be 02 00 00 00       	mov    $0x2,%esi
    8256:	e8 b5 08 00 00       	call   8b10 <slip_Return>
    825b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    825f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8263:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    826a:	5d                   	pop    %rbp
    826b:	c3                   	ret
    826c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008270 <_or>:
    8270:	55                   	push   %rbp
    8271:	48 89 e5             	mov    %rsp,%rbp
    8274:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    827b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    827f:	89 75 ec             	mov    %esi,-0x14(%rbp)
    8282:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    8286:	0f 8c 05 00 00 00    	jl     8291 <_or+0x21>
    828c:	e9 1f 00 00 00       	jmp    82b0 <_or+0x40>
    8291:	48 8d 3d 4e ff 00 00 	lea    0xff4e(%rip),%rdi        # 181e6 <_IO_stdin_used+0x1e6>
    8298:	48 8d 35 50 ff 00 00 	lea    0xff50(%rip),%rsi        # 181ef <_IO_stdin_used+0x1ef>
    829f:	ba b3 00 00 00       	mov    $0xb3,%edx
    82a4:	48 8d 0d 67 04 01 00 	lea    0x10467(%rip),%rcx        # 18712 <_IO_stdin_used+0x712>
    82ab:	e8 40 ae ff ff       	call   30f0 <__assert_fail@plt>
    82b0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
    82b7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    82bb:	31 f6                	xor    %esi,%esi
    82bd:	2b 75 ec             	sub    -0x14(%rbp),%esi
    82c0:	e8 fb 6b 00 00       	call   eec0 <slipV_getValue>
    82c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    82c9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    82cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    82d0:	48 83 c7 08          	add    $0x8,%rdi
    82d4:	8b 75 ec             	mov    -0x14(%rbp),%esi
    82d7:	e8 94 57 00 00       	call   da70 <slipS_popValueNum>
    82dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    82e0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    82e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    82e8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    82ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82f0:	48 8b 48 08          	mov    0x8(%rax),%rcx
    82f4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    82f8:	48 8b 40 10          	mov    0x10(%rax),%rax
    82fc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8300:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    8304:	e8 47 38 00 00       	call   bb50 <slipL_forward>
    8309:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    830d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8311:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8315:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
    8319:	48 8b 40 10          	mov    0x10(%rax),%rax
    831d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    8321:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    8325:	e8 26 38 00 00       	call   bb50 <slipL_forward>
    832a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    832e:	48 8d 05 df 80 01 00 	lea    0x180df(%rip),%rax        # 20414 <slip_debug_compile>
    8335:	f6 00 01             	testb  $0x1,(%rax)
    8338:	0f 84 15 00 00 00    	je     8353 <_or+0xe3>
    833e:	48 8d 3d f4 01 01 00 	lea    0x101f4(%rip),%rdi        # 18539 <_IO_stdin_used+0x539>
    8345:	48 8d 35 e1 03 01 00 	lea    0x103e1(%rip),%rsi        # 1872d <_IO_stdin_used+0x72d>
    834c:	b0 00                	mov    $0x0,%al
    834e:	e8 7d ad ff ff       	call   30d0 <printf@plt>
    8353:	e9 00 00 00 00       	jmp    8358 <_or+0xe8>
    8358:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    835c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    8361:	e8 8a 31 00 00       	call   b4f0 <slipC_getFunc>
    8366:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    836a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    8371:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8375:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    8379:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    837d:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    8380:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    8384:	e8 f7 01 00 00       	call   8580 <load>
    8389:	89 45 98             	mov    %eax,-0x68(%rbp)
    838c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8390:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    8394:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    8398:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    839b:	4c 8d 45 9c          	lea    -0x64(%rbp),%r8
    839f:	e8 dc 01 00 00       	call   8580 <load>
    83a4:	89 45 94             	mov    %eax,-0x6c(%rbp)
    83a7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    83ab:	8b 75 9c             	mov    -0x64(%rbp),%esi
    83ae:	e8 2d 42 00 00       	call   c5e0 <slipP_popLocalVar>
    83b3:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    83b7:	be 01 00 00 00       	mov    $0x1,%esi
    83bc:	e8 ef 41 00 00       	call   c5b0 <slipP_addLocalVar>
    83c1:	89 45 90             	mov    %eax,-0x70(%rbp)
    83c4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    83c8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    83cc:	8b 45 90             	mov    -0x70(%rbp),%eax
    83cf:	66 89 c2             	mov    %ax,%dx
    83d2:	8b 45 98             	mov    -0x68(%rbp),%eax
    83d5:	88 c1                	mov    %al,%cl
    83d7:	8b 45 94             	mov    -0x6c(%rbp),%eax
    83da:	0f b7 fa             	movzwl %dx,%edi
    83dd:	0f b6 f1             	movzbl %cl,%esi
    83e0:	0f b6 d0             	movzbl %al,%edx
    83e3:	e8 78 0f 00 00       	call   9360 <slipI_or>
    83e8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    83ec:	89 45 88             	mov    %eax,-0x78(%rbp)
    83ef:	8b 75 88             	mov    -0x78(%rbp),%esi
    83f2:	e8 29 3e 00 00       	call   c220 <slipP_addInstruction>
    83f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    83fb:	8b 75 90             	mov    -0x70(%rbp),%esi
    83fe:	e8 dd 6d 00 00       	call   f1e0 <slipV_pushExpr>
    8403:	48 8d 05 0a 80 01 00 	lea    0x1800a(%rip),%rax        # 20414 <slip_debug_compile>
    840a:	f6 00 01             	testb  $0x1,(%rax)
    840d:	0f 84 09 00 00 00    	je     841c <_or+0x1ac>
    8413:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8417:	e8 a4 31 00 00       	call   b5c0 <slipC_printStack>
    841c:	bf 01 00 00 00       	mov    $0x1,%edi
    8421:	be 02 00 00 00       	mov    $0x2,%esi
    8426:	e8 e5 06 00 00       	call   8b10 <slip_Return>
    842b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    842f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8433:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    843a:	5d                   	pop    %rbp
    843b:	c3                   	ret
    843c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008440 <check_vars>:
    8440:	55                   	push   %rbp
    8441:	48 89 e5             	mov    %rsp,%rbp
    8444:	48 83 ec 60          	sub    $0x60,%rsp
    8448:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    844c:	89 55 f8             	mov    %edx,-0x8(%rbp)
    844f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8453:	44 89 45 e8          	mov    %r8d,-0x18(%rbp)
    8457:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    845b:	48 8d 3d dc fd 00 00 	lea    0xfddc(%rip),%rdi        # 1823e <_IO_stdin_used+0x23e>
    8462:	b0 00                	mov    $0x0,%al
    8464:	e8 67 ac ff ff       	call   30d0 <printf@plt>
    8469:	81 7d f8 00 01 00 00 	cmpl   $0x100,-0x8(%rbp)
    8470:	0f 85 5e 00 00 00    	jne    84d4 <check_vars+0x94>
    8476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    847a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    847e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8482:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8486:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    848a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    848e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8492:	48 8b 40 08          	mov    0x8(%rax),%rax
    8496:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    849a:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    849e:	48 8d 3d a1 fd 00 00 	lea    0xfda1(%rip),%rdi        # 18246 <_IO_stdin_used+0x246>
    84a5:	b0 00                	mov    $0x0,%al
    84a7:	e8 24 ac ff ff       	call   30d0 <printf@plt>
    84ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    84b0:	48 8b 00             	mov    (%rax),%rax
    84b3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    84b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    84bb:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    84bf:	0f 85 c1 ff ff ff    	jne    8486 <check_vars+0x46>
    84c5:	e9 00 00 00 00       	jmp    84ca <check_vars+0x8a>
    84ca:	e9 00 00 00 00       	jmp    84cf <check_vars+0x8f>
    84cf:	e9 00 00 00 00       	jmp    84d4 <check_vars+0x94>
    84d4:	48 8d 3d 50 fc 00 00 	lea    0xfc50(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    84db:	b0 00                	mov    $0x0,%al
    84dd:	e8 ee ab ff ff       	call   30d0 <printf@plt>
    84e2:	48 8d 3d 61 fd 00 00 	lea    0xfd61(%rip),%rdi        # 1824a <_IO_stdin_used+0x24a>
    84e9:	b0 00                	mov    $0x0,%al
    84eb:	e8 e0 ab ff ff       	call   30d0 <printf@plt>
    84f0:	81 7d e8 00 01 00 00 	cmpl   $0x100,-0x18(%rbp)
    84f7:	0f 85 50 00 00 00    	jne    854d <check_vars+0x10d>
    84fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8501:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8505:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    8509:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    850d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    8511:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    8515:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    8519:	48 8b 78 08          	mov    0x8(%rax),%rdi
    851d:	8b 70 10             	mov    0x10(%rax),%esi
    8520:	e8 0b 64 00 00       	call   e930 <slipV_printValue>
    8525:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    8529:	48 8b 00             	mov    (%rax),%rax
    852c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    8530:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    8534:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
    8538:	0f 85 cf ff ff ff    	jne    850d <check_vars+0xcd>
    853e:	e9 00 00 00 00       	jmp    8543 <check_vars+0x103>
    8543:	e9 00 00 00 00       	jmp    8548 <check_vars+0x108>
    8548:	e9 0c 00 00 00       	jmp    8559 <check_vars+0x119>
    854d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8551:	8b 75 e8             	mov    -0x18(%rbp),%esi
    8554:	e8 d7 63 00 00       	call   e930 <slipV_printValue>
    8559:	48 8d 3d cb fb 00 00 	lea    0xfbcb(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    8560:	b0 00                	mov    $0x0,%al
    8562:	e8 69 ab ff ff       	call   30d0 <printf@plt>
    8567:	48 8d 3d e5 fc 00 00 	lea    0xfce5(%rip),%rdi        # 18253 <_IO_stdin_used+0x253>
    856e:	b0 00                	mov    $0x0,%al
    8570:	e8 5b ab ff ff       	call   30d0 <printf@plt>
    8575:	48 83 c4 60          	add    $0x60,%rsp
    8579:	5d                   	pop    %rbp
    857a:	c3                   	ret
    857b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000008580 <load>:
    8580:	55                   	push   %rbp
    8581:	48 89 e5             	mov    %rsp,%rbp
    8584:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
    858b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    858f:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    8592:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    8596:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    859a:	4c 89 45 d0          	mov    %r8,-0x30(%rbp)
    859e:	c7 45 cc ff ff ff ff 	movl   $0xffffffff,-0x34(%rbp)
    85a5:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    85ac:	8b 45 f0             	mov    -0x10(%rbp),%eax
    85af:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
    85b5:	85 c0                	test   %eax,%eax
    85b7:	0f 84 26 02 00 00    	je     87e3 <load+0x263>
    85bd:	e9 00 00 00 00       	jmp    85c2 <load+0x42>
    85c2:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    85c8:	83 e8 02             	sub    $0x2,%eax
    85cb:	0f 84 ee 02 00 00    	je     88bf <load+0x33f>
    85d1:	e9 00 00 00 00       	jmp    85d6 <load+0x56>
    85d6:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    85dc:	83 e8 04             	sub    $0x4,%eax
    85df:	0f 84 09 04 00 00    	je     89ee <load+0x46e>
    85e5:	e9 00 00 00 00       	jmp    85ea <load+0x6a>
    85ea:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    85f0:	83 e8 08             	sub    $0x8,%eax
    85f3:	0f 84 47 00 00 00    	je     8640 <load+0xc0>
    85f9:	e9 00 00 00 00       	jmp    85fe <load+0x7e>
    85fe:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    8604:	2d 00 01 00 00       	sub    $0x100,%eax
    8609:	0f 84 22 02 00 00    	je     8831 <load+0x2b1>
    860f:	e9 00 00 00 00       	jmp    8614 <load+0x94>
    8614:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    861a:	2d 00 04 00 00       	sub    $0x400,%eax
    861f:	0f 84 5e 03 00 00    	je     8983 <load+0x403>
    8625:	e9 00 00 00 00       	jmp    862a <load+0xaa>
    862a:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    8630:	2d 00 00 01 00       	sub    $0x10000,%eax
    8635:	0f 84 53 02 00 00    	je     888e <load+0x30e>
    863b:	e9 19 04 00 00       	jmp    8a59 <load+0x4d9>
    8640:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8644:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    8648:	e8 93 2b 00 00       	call   b1e0 <slipC_findID>
    864d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    8651:	89 55 c0             	mov    %edx,-0x40(%rbp)
    8654:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
    8658:	0f 85 dc 00 00 00    	jne    873a <load+0x1ba>
    865e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8662:	be 02 00 00 00       	mov    $0x2,%esi
    8667:	e8 44 3f 00 00       	call   c5b0 <slipP_addLocalVar>
    866c:	89 45 cc             	mov    %eax,-0x34(%rbp)
    866f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8673:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    8677:	8b 55 f0             	mov    -0x10(%rbp),%edx
    867a:	e8 41 3d 00 00       	call   c3c0 <slipP_addConstant>
    867f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    8682:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8686:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    868d:	8b 45 cc             	mov    -0x34(%rbp),%eax
    8690:	31 f6                	xor    %esi,%esi
    8692:	0f b7 f8             	movzwl %ax,%edi
    8695:	e8 96 04 00 00       	call   8b30 <slipI_loadK>
    869a:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
    86a1:	89 45 b0             	mov    %eax,-0x50(%rbp)
    86a4:	8b 75 b0             	mov    -0x50(%rbp),%esi
    86a7:	e8 74 3b 00 00       	call   c220 <slipP_addInstruction>
    86ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86b0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    86b7:	8b 45 cc             	mov    -0x34(%rbp),%eax
    86ba:	83 c0 01             	add    $0x1,%eax
    86bd:	66 89 c1             	mov    %ax,%cx
    86c0:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    86c3:	0f b7 f9             	movzwl %cx,%edi
    86c6:	0f b7 f0             	movzwl %ax,%esi
    86c9:	e8 62 04 00 00       	call   8b30 <slipI_loadK>
    86ce:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
    86d5:	89 45 a8             	mov    %eax,-0x58(%rbp)
    86d8:	8b 75 a8             	mov    -0x58(%rbp),%esi
    86db:	e8 40 3b 00 00       	call   c220 <slipP_addInstruction>
    86e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86e4:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    86eb:	8b 45 cc             	mov    -0x34(%rbp),%eax
    86ee:	66 89 c2             	mov    %ax,%dx
    86f1:	8b 45 cc             	mov    -0x34(%rbp),%eax
    86f4:	88 c1                	mov    %al,%cl
    86f6:	8b 45 cc             	mov    -0x34(%rbp),%eax
    86f9:	83 c0 01             	add    $0x1,%eax
    86fc:	0f b7 fa             	movzwl %dx,%edi
    86ff:	0f b6 f1             	movzbl %cl,%esi
    8702:	0f b6 d0             	movzbl %al,%edx
    8705:	e8 76 04 00 00       	call   8b80 <slipI_getTable>
    870a:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
    8711:	89 45 a0             	mov    %eax,-0x60(%rbp)
    8714:	8b 75 a0             	mov    -0x60(%rbp),%esi
    8717:	e8 04 3b 00 00       	call   c220 <slipP_addInstruction>
    871c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8720:	be 01 00 00 00       	mov    $0x1,%esi
    8725:	e8 b6 3e 00 00       	call   c5e0 <slipP_popLocalVar>
    872a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    872e:	8b 08                	mov    (%rax),%ecx
    8730:	83 c1 01             	add    $0x1,%ecx
    8733:	89 08                	mov    %ecx,(%rax)
    8735:	e9 a4 00 00 00       	jmp    87de <load+0x25e>
    873a:	83 7d c0 02          	cmpl   $0x2,-0x40(%rbp)
    873e:	0f 85 0c 00 00 00    	jne    8750 <load+0x1d0>
    8744:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8748:	89 45 cc             	mov    %eax,-0x34(%rbp)
    874b:	e9 89 00 00 00       	jmp    87d9 <load+0x259>
    8750:	83 7d c0 20          	cmpl   $0x20,-0x40(%rbp)
    8754:	0f 84 1a 00 00 00    	je     8774 <load+0x1f4>
    875a:	81 7d c0 00 10 00 00 	cmpl   $0x1000,-0x40(%rbp)
    8761:	0f 84 0d 00 00 00    	je     8774 <load+0x1f4>
    8767:	81 7d c0 00 20 00 00 	cmpl   $0x2000,-0x40(%rbp)
    876e:	0f 85 60 00 00 00    	jne    87d4 <load+0x254>
    8774:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8778:	be 01 00 00 00       	mov    $0x1,%esi
    877d:	e8 2e 3e 00 00       	call   c5b0 <slipP_addLocalVar>
    8782:	89 45 cc             	mov    %eax,-0x34(%rbp)
    8785:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8789:	8b 08                	mov    (%rax),%ecx
    878b:	83 c1 01             	add    $0x1,%ecx
    878e:	89 08                	mov    %ecx,(%rax)
    8790:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8794:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    8798:	8b 55 c0             	mov    -0x40(%rbp),%edx
    879b:	e8 20 3c 00 00       	call   c3c0 <slipP_addConstant>
    87a0:	89 45 9c             	mov    %eax,-0x64(%rbp)
    87a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    87a7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    87ae:	8b 45 cc             	mov    -0x34(%rbp),%eax
    87b1:	66 89 c1             	mov    %ax,%cx
    87b4:	8b 45 9c             	mov    -0x64(%rbp),%eax
    87b7:	0f b7 f9             	movzwl %cx,%edi
    87ba:	0f b7 f0             	movzwl %ax,%esi
    87bd:	e8 6e 03 00 00       	call   8b30 <slipI_loadK>
    87c2:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
    87c9:	89 45 98             	mov    %eax,-0x68(%rbp)
    87cc:	8b 75 98             	mov    -0x68(%rbp),%esi
    87cf:	e8 4c 3a 00 00       	call   c220 <slipP_addInstruction>
    87d4:	e9 00 00 00 00       	jmp    87d9 <load+0x259>
    87d9:	e9 00 00 00 00       	jmp    87de <load+0x25e>
    87de:	e9 7b 02 00 00       	jmp    8a5e <load+0x4de>
    87e3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    87e7:	be 01 00 00 00       	mov    $0x1,%esi
    87ec:	e8 bf 3d 00 00       	call   c5b0 <slipP_addLocalVar>
    87f1:	89 45 cc             	mov    %eax,-0x34(%rbp)
    87f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    87f8:	8b 08                	mov    (%rax),%ecx
    87fa:	83 c1 01             	add    $0x1,%ecx
    87fd:	89 08                	mov    %ecx,(%rax)
    87ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8803:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    880a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    880d:	be 01 00 00 00       	mov    $0x1,%esi
    8812:	0f b7 f8             	movzwl %ax,%edi
    8815:	e8 a6 02 00 00       	call   8ac0 <slipI_loadNil>
    881a:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
    8821:	89 45 90             	mov    %eax,-0x70(%rbp)
    8824:	8b 75 90             	mov    -0x70(%rbp),%esi
    8827:	e8 f4 39 00 00       	call   c220 <slipP_addInstruction>
    882c:	e9 2d 02 00 00       	jmp    8a5e <load+0x4de>
    8831:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8835:	48 83 c7 08          	add    $0x8,%rdi
    8839:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    883d:	8b 55 f0             	mov    -0x10(%rbp),%edx
    8840:	e8 8b 4f 00 00       	call   d7d0 <slipS_pushValue>
    8845:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8849:	31 f6                	xor    %esi,%esi
    884b:	e8 70 6b 00 00       	call   f3c0 <slipV_call>
    8850:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    8854:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8858:	48 83 c7 08          	add    $0x8,%rdi
    885c:	e8 ff 50 00 00       	call   d960 <slipS_popValue>
    8861:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    8868:	89 55 80             	mov    %edx,-0x80(%rbp)
    886b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    886f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    8873:	4c 8b 45 d0          	mov    -0x30(%rbp),%r8
    8877:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    887e:	8b 4d 80             	mov    -0x80(%rbp),%ecx
    8881:	e8 fa fc ff ff       	call   8580 <load>
    8886:	89 45 fc             	mov    %eax,-0x4(%rbp)
    8889:	e9 d6 01 00 00       	jmp    8a64 <load+0x4e4>
    888e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8892:	89 45 cc             	mov    %eax,-0x34(%rbp)
    8895:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8899:	48 83 c7 08          	add    $0x8,%rdi
    889d:	e8 be 50 00 00       	call   d960 <slipS_popValue>
    88a2:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    88a9:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
    88af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    88b3:	8b 08                	mov    (%rax),%ecx
    88b5:	83 c1 01             	add    $0x1,%ecx
    88b8:	89 08                	mov    %ecx,(%rax)
    88ba:	e9 9f 01 00 00       	jmp    8a5e <load+0x4de>
    88bf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    88c3:	be 01 00 00 00       	mov    $0x1,%esi
    88c8:	e8 e3 3c 00 00       	call   c5b0 <slipP_addLocalVar>
    88cd:	89 45 cc             	mov    %eax,-0x34(%rbp)
    88d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    88d4:	8b 08                	mov    (%rax),%ecx
    88d6:	83 c1 01             	add    $0x1,%ecx
    88d9:	89 08                	mov    %ecx,(%rax)
    88db:	48 81 7d e8 ff 7f 00 	cmpq   $0x7fff,-0x18(%rbp)
    88e2:	00 
    88e3:	0f 8f 4b 00 00 00    	jg     8934 <load+0x3b4>
    88e9:	48 81 7d e8 00 80 ff 	cmpq   $0xffffffffffff8000,-0x18(%rbp)
    88f0:	ff 
    88f1:	0f 8c 3d 00 00 00    	jl     8934 <load+0x3b4>
    88f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    88fb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    8902:	8b 45 cc             	mov    -0x34(%rbp),%eax
    8905:	66 89 c1             	mov    %ax,%cx
    8908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    890c:	0f b7 f9             	movzwl %cx,%edi
    890f:	0f bf f0             	movswl %ax,%esi
    8912:	e8 b9 02 00 00       	call   8bd0 <slipI_loadI>
    8917:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
    891e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
    8924:	8b b5 60 ff ff ff    	mov    -0xa0(%rbp),%esi
    892a:	e8 f1 38 00 00       	call   c220 <slipP_addInstruction>
    892f:	e9 4a 00 00 00       	jmp    897e <load+0x3fe>
    8934:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8938:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    893c:	8b 55 f0             	mov    -0x10(%rbp),%edx
    893f:	e8 7c 3a 00 00       	call   c3c0 <slipP_addConstant>
    8944:	89 45 c8             	mov    %eax,-0x38(%rbp)
    8947:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    894b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    8952:	8b 45 cc             	mov    -0x34(%rbp),%eax
    8955:	66 89 c1             	mov    %ax,%cx
    8958:	8b 45 c8             	mov    -0x38(%rbp),%eax
    895b:	0f b7 f9             	movzwl %cx,%edi
    895e:	0f b7 f0             	movzwl %ax,%esi
    8961:	e8 ca 01 00 00       	call   8b30 <slipI_loadK>
    8966:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
    896d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    8973:	8b b5 58 ff ff ff    	mov    -0xa8(%rbp),%esi
    8979:	e8 a2 38 00 00       	call   c220 <slipP_addInstruction>
    897e:	e9 db 00 00 00       	jmp    8a5e <load+0x4de>
    8983:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8987:	be 01 00 00 00       	mov    $0x1,%esi
    898c:	e8 1f 3c 00 00       	call   c5b0 <slipP_addLocalVar>
    8991:	89 45 cc             	mov    %eax,-0x34(%rbp)
    8994:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8998:	8b 08                	mov    (%rax),%ecx
    899a:	83 c1 01             	add    $0x1,%ecx
    899d:	89 08                	mov    %ecx,(%rax)
    899f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    89a3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    89a7:	8b 55 f0             	mov    -0x10(%rbp),%edx
    89aa:	e8 11 3a 00 00       	call   c3c0 <slipP_addConstant>
    89af:	89 45 c8             	mov    %eax,-0x38(%rbp)
    89b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    89b6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    89bd:	8b 45 cc             	mov    -0x34(%rbp),%eax
    89c0:	66 89 c1             	mov    %ax,%cx
    89c3:	8b 45 c8             	mov    -0x38(%rbp),%eax
    89c6:	0f b7 f9             	movzwl %cx,%edi
    89c9:	0f b7 f0             	movzwl %ax,%esi
    89cc:	e8 5f 01 00 00       	call   8b30 <slipI_loadK>
    89d1:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
    89d8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    89de:	8b b5 50 ff ff ff    	mov    -0xb0(%rbp),%esi
    89e4:	e8 37 38 00 00       	call   c220 <slipP_addInstruction>
    89e9:	e9 70 00 00 00       	jmp    8a5e <load+0x4de>
    89ee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    89f2:	be 01 00 00 00       	mov    $0x1,%esi
    89f7:	e8 b4 3b 00 00       	call   c5b0 <slipP_addLocalVar>
    89fc:	89 45 cc             	mov    %eax,-0x34(%rbp)
    89ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8a03:	8b 08                	mov    (%rax),%ecx
    8a05:	83 c1 01             	add    $0x1,%ecx
    8a08:	89 08                	mov    %ecx,(%rax)
    8a0a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    8a0e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    8a12:	8b 55 f0             	mov    -0x10(%rbp),%edx
    8a15:	e8 a6 39 00 00       	call   c3c0 <slipP_addConstant>
    8a1a:	89 45 c8             	mov    %eax,-0x38(%rbp)
    8a1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8a21:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    8a28:	8b 45 cc             	mov    -0x34(%rbp),%eax
    8a2b:	66 89 c1             	mov    %ax,%cx
    8a2e:	8b 45 c8             	mov    -0x38(%rbp),%eax
    8a31:	0f b7 f9             	movzwl %cx,%edi
    8a34:	0f b7 f0             	movzwl %ax,%esi
    8a37:	e8 f4 00 00 00       	call   8b30 <slipI_loadK>
    8a3c:	48 8b bd f8 fe ff ff 	mov    -0x108(%rbp),%rdi
    8a43:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    8a49:	8b b5 48 ff ff ff    	mov    -0xb8(%rbp),%esi
    8a4f:	e8 cc 37 00 00       	call   c220 <slipP_addInstruction>
    8a54:	e9 05 00 00 00       	jmp    8a5e <load+0x4de>
    8a59:	e9 00 00 00 00       	jmp    8a5e <load+0x4de>
    8a5e:	8b 45 cc             	mov    -0x34(%rbp),%eax
    8a61:	89 45 fc             	mov    %eax,-0x4(%rbp)
    8a64:	8b 45 fc             	mov    -0x4(%rbp),%eax
    8a67:	48 81 c4 10 01 00 00 	add    $0x110,%rsp
    8a6e:	5d                   	pop    %rbp
    8a6f:	c3                   	ret

0000000000008a70 <slipI_move>:
    8a70:	55                   	push   %rbp
    8a71:	48 89 e5             	mov    %rsp,%rbp
    8a74:	66 89 f0             	mov    %si,%ax
    8a77:	66 89 f9             	mov    %di,%cx
    8a7a:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8a7e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8a82:	8a 45 f8             	mov    -0x8(%rbp),%al
    8a85:	24 c0                	and    $0xc0,%al
    8a87:	0c 01                	or     $0x1,%al
    8a89:	88 45 f8             	mov    %al,-0x8(%rbp)
    8a8c:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8a90:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8a94:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8a99:	66 c1 e1 06          	shl    $0x6,%cx
    8a9d:	66 83 e0 3f          	and    $0x3f,%ax
    8aa1:	66 09 c8             	or     %cx,%ax
    8aa4:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8aa8:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8aac:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8ab0:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8ab3:	5d                   	pop    %rbp
    8ab4:	c3                   	ret
    8ab5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8abc:	00 00 00 
    8abf:	90                   	nop

0000000000008ac0 <slipI_loadNil>:
    8ac0:	55                   	push   %rbp
    8ac1:	48 89 e5             	mov    %rsp,%rbp
    8ac4:	66 89 f0             	mov    %si,%ax
    8ac7:	66 89 f9             	mov    %di,%cx
    8aca:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8ace:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8ad2:	8a 45 f8             	mov    -0x8(%rbp),%al
    8ad5:	24 c0                	and    $0xc0,%al
    8ad7:	0c 04                	or     $0x4,%al
    8ad9:	88 45 f8             	mov    %al,-0x8(%rbp)
    8adc:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8ae0:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8ae4:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8ae9:	66 c1 e1 06          	shl    $0x6,%cx
    8aed:	66 83 e0 3f          	and    $0x3f,%ax
    8af1:	66 09 c8             	or     %cx,%ax
    8af4:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8af8:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8afc:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8b00:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8b03:	5d                   	pop    %rbp
    8b04:	c3                   	ret
    8b05:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b0c:	00 00 00 
    8b0f:	90                   	nop

0000000000008b10 <slip_Return>:
    8b10:	55                   	push   %rbp
    8b11:	48 89 e5             	mov    %rsp,%rbp
    8b14:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8b17:	89 75 f0             	mov    %esi,-0x10(%rbp)
    8b1a:	8b 45 f4             	mov    -0xc(%rbp),%eax
    8b1d:	89 45 f8             	mov    %eax,-0x8(%rbp)
    8b20:	8b 45 f0             	mov    -0x10(%rbp),%eax
    8b23:	89 45 fc             	mov    %eax,-0x4(%rbp)
    8b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8b2a:	5d                   	pop    %rbp
    8b2b:	c3                   	ret
    8b2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008b30 <slipI_loadK>:
    8b30:	55                   	push   %rbp
    8b31:	48 89 e5             	mov    %rsp,%rbp
    8b34:	66 89 f0             	mov    %si,%ax
    8b37:	66 89 f9             	mov    %di,%cx
    8b3a:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8b3e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8b42:	8a 45 f8             	mov    -0x8(%rbp),%al
    8b45:	24 c0                	and    $0xc0,%al
    8b47:	0c 02                	or     $0x2,%al
    8b49:	88 45 f8             	mov    %al,-0x8(%rbp)
    8b4c:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8b50:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8b54:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8b59:	66 c1 e1 06          	shl    $0x6,%cx
    8b5d:	66 83 e0 3f          	and    $0x3f,%ax
    8b61:	66 09 c8             	or     %cx,%ax
    8b64:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8b68:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8b6c:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8b70:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8b73:	5d                   	pop    %rbp
    8b74:	c3                   	ret
    8b75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b7c:	00 00 00 
    8b7f:	90                   	nop

0000000000008b80 <slipI_getTable>:
    8b80:	55                   	push   %rbp
    8b81:	48 89 e5             	mov    %rsp,%rbp
    8b84:	88 d0                	mov    %dl,%al
    8b86:	40 88 f1             	mov    %sil,%cl
    8b89:	66 89 fa             	mov    %di,%dx
    8b8c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    8b90:	88 4d f5             	mov    %cl,-0xb(%rbp)
    8b93:	88 45 f4             	mov    %al,-0xc(%rbp)
    8b96:	8a 45 f8             	mov    -0x8(%rbp),%al
    8b99:	24 c0                	and    $0xc0,%al
    8b9b:	0c 09                	or     $0x9,%al
    8b9d:	88 45 f8             	mov    %al,-0x8(%rbp)
    8ba0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8ba4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8ba8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8bad:	66 c1 e1 06          	shl    $0x6,%cx
    8bb1:	66 83 e0 3f          	and    $0x3f,%ax
    8bb5:	66 09 c8             	or     %cx,%ax
    8bb8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8bbc:	8a 45 f5             	mov    -0xb(%rbp),%al
    8bbf:	88 45 fa             	mov    %al,-0x6(%rbp)
    8bc2:	8a 45 f4             	mov    -0xc(%rbp),%al
    8bc5:	88 45 fb             	mov    %al,-0x5(%rbp)
    8bc8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8bcb:	5d                   	pop    %rbp
    8bcc:	c3                   	ret
    8bcd:	0f 1f 00             	nopl   (%rax)

0000000000008bd0 <slipI_loadI>:
    8bd0:	55                   	push   %rbp
    8bd1:	48 89 e5             	mov    %rsp,%rbp
    8bd4:	66 89 f0             	mov    %si,%ax
    8bd7:	66 89 f9             	mov    %di,%cx
    8bda:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8bde:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8be2:	8a 45 f8             	mov    -0x8(%rbp),%al
    8be5:	24 c0                	and    $0xc0,%al
    8be7:	0c 03                	or     $0x3,%al
    8be9:	88 45 f8             	mov    %al,-0x8(%rbp)
    8bec:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8bf0:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8bf4:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8bf9:	66 c1 e1 06          	shl    $0x6,%cx
    8bfd:	66 83 e0 3f          	and    $0x3f,%ax
    8c01:	66 09 c8             	or     %cx,%ax
    8c04:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8c08:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8c0c:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8c10:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8c13:	5d                   	pop    %rbp
    8c14:	c3                   	ret
    8c15:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c1c:	00 00 00 
    8c1f:	90                   	nop

0000000000008c20 <check_func>:
    8c20:	55                   	push   %rbp
    8c21:	48 89 e5             	mov    %rsp,%rbp
    8c24:	48 83 ec 40          	sub    $0x40,%rsp
    8c28:	48 8d 45 10          	lea    0x10(%rbp),%rax
    8c2c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    8c30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8c34:	89 55 f8             	mov    %edx,-0x8(%rbp)
    8c37:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8c3b:	44 89 45 e8          	mov    %r8d,-0x18(%rbp)
    8c3f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    8c43:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    8c47:	48 8d 3d 92 f6 00 00 	lea    0xf692(%rip),%rdi        # 182e0 <_IO_stdin_used+0x2e0>
    8c4e:	b0 00                	mov    $0x0,%al
    8c50:	e8 7b a4 ff ff       	call   30d0 <printf@plt>
    8c55:	48 8d 3d 92 f6 00 00 	lea    0xf692(%rip),%rdi        # 182ee <_IO_stdin_used+0x2ee>
    8c5c:	b0 00                	mov    $0x0,%al
    8c5e:	e8 6d a4 ff ff       	call   30d0 <printf@plt>
    8c63:	81 7d e8 00 01 00 00 	cmpl   $0x100,-0x18(%rbp)
    8c6a:	0f 85 46 00 00 00    	jne    8cb6 <check_func+0x96>
    8c70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8c74:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8c78:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    8c7d:	0f 84 2e 00 00 00    	je     8cb1 <check_func+0x91>
    8c83:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8c87:	48 8b 40 08          	mov    0x8(%rax),%rax
    8c8b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    8c8f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    8c93:	48 8d 3d ac f5 00 00 	lea    0xf5ac(%rip),%rdi        # 18246 <_IO_stdin_used+0x246>
    8c9a:	b0 00                	mov    $0x0,%al
    8c9c:	e8 2f a4 ff ff       	call   30d0 <printf@plt>
    8ca1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8ca5:	48 8b 00             	mov    (%rax),%rax
    8ca8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8cac:	e9 c7 ff ff ff       	jmp    8c78 <check_func+0x58>
    8cb1:	e9 00 00 00 00       	jmp    8cb6 <check_func+0x96>
    8cb6:	48 8d 3d 6e f4 00 00 	lea    0xf46e(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    8cbd:	b0 00                	mov    $0x0,%al
    8cbf:	e8 0c a4 ff ff       	call   30d0 <printf@plt>
    8cc4:	48 8d 3d 2a f6 00 00 	lea    0xf62a(%rip),%rdi        # 182f5 <_IO_stdin_used+0x2f5>
    8ccb:	b0 00                	mov    $0x0,%al
    8ccd:	e8 fe a3 ff ff       	call   30d0 <printf@plt>
    8cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    8cd6:	48 8b 38             	mov    (%rax),%rdi
    8cd9:	8b 70 08             	mov    0x8(%rax),%esi
    8cdc:	e8 4f 5c 00 00       	call   e930 <slipV_printValue>
    8ce1:	48 8d 3d 43 f4 00 00 	lea    0xf443(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    8ce8:	b0 00                	mov    $0x0,%al
    8cea:	e8 e1 a3 ff ff       	call   30d0 <printf@plt>
    8cef:	48 8d 3d 5d f5 00 00 	lea    0xf55d(%rip),%rdi        # 18253 <_IO_stdin_used+0x253>
    8cf6:	b0 00                	mov    $0x0,%al
    8cf8:	e8 d3 a3 ff ff       	call   30d0 <printf@plt>
    8cfd:	48 83 c4 40          	add    $0x40,%rsp
    8d01:	5d                   	pop    %rbp
    8d02:	c3                   	ret
    8d03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d0a:	00 00 00 
    8d0d:	0f 1f 00             	nopl   (%rax)

0000000000008d10 <slipI_return>:
    8d10:	55                   	push   %rbp
    8d11:	48 89 e5             	mov    %rsp,%rbp
    8d14:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8d17:	8a 45 f8             	mov    -0x8(%rbp),%al
    8d1a:	24 c0                	and    $0xc0,%al
    8d1c:	0c 23                	or     $0x23,%al
    8d1e:	88 45 f8             	mov    %al,-0x8(%rbp)
    8d21:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    8d24:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d27:	81 e1 ff ff ff 03    	and    $0x3ffffff,%ecx
    8d2d:	c1 e1 06             	shl    $0x6,%ecx
    8d30:	83 e0 3f             	and    $0x3f,%eax
    8d33:	09 c8                	or     %ecx,%eax
    8d35:	89 45 f8             	mov    %eax,-0x8(%rbp)
    8d38:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d3b:	5d                   	pop    %rbp
    8d3c:	c3                   	ret
    8d3d:	0f 1f 00             	nopl   (%rax)

0000000000008d40 <slipI_push>:
    8d40:	55                   	push   %rbp
    8d41:	48 89 e5             	mov    %rsp,%rbp
    8d44:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8d47:	8a 45 f8             	mov    -0x8(%rbp),%al
    8d4a:	24 c0                	and    $0xc0,%al
    8d4c:	0c 05                	or     $0x5,%al
    8d4e:	88 45 f8             	mov    %al,-0x8(%rbp)
    8d51:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    8d54:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d57:	81 e1 ff ff ff 03    	and    $0x3ffffff,%ecx
    8d5d:	c1 e1 06             	shl    $0x6,%ecx
    8d60:	83 e0 3f             	and    $0x3f,%eax
    8d63:	09 c8                	or     %ecx,%eax
    8d65:	89 45 f8             	mov    %eax,-0x8(%rbp)
    8d68:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d6b:	5d                   	pop    %rbp
    8d6c:	c3                   	ret
    8d6d:	0f 1f 00             	nopl   (%rax)

0000000000008d70 <slipI_call>:
    8d70:	55                   	push   %rbp
    8d71:	48 89 e5             	mov    %rsp,%rbp
    8d74:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8d77:	8a 45 f8             	mov    -0x8(%rbp),%al
    8d7a:	24 c0                	and    $0xc0,%al
    8d7c:	0c 21                	or     $0x21,%al
    8d7e:	88 45 f8             	mov    %al,-0x8(%rbp)
    8d81:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    8d84:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d87:	81 e1 ff ff ff 03    	and    $0x3ffffff,%ecx
    8d8d:	c1 e1 06             	shl    $0x6,%ecx
    8d90:	83 e0 3f             	and    $0x3f,%eax
    8d93:	09 c8                	or     %ecx,%eax
    8d95:	89 45 f8             	mov    %eax,-0x8(%rbp)
    8d98:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8d9b:	5d                   	pop    %rbp
    8d9c:	c3                   	ret
    8d9d:	0f 1f 00             	nopl   (%rax)

0000000000008da0 <check_if>:
    8da0:	55                   	push   %rbp
    8da1:	48 89 e5             	mov    %rsp,%rbp
    8da4:	48 83 ec 30          	sub    $0x30,%rsp
    8da8:	48 8d 45 10          	lea    0x10(%rbp),%rax
    8dac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    8db0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8db4:	89 55 f8             	mov    %edx,-0x8(%rbp)
    8db7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    8dbb:	44 89 45 e8          	mov    %r8d,-0x18(%rbp)
    8dbf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    8dc3:	48 8d 05 4a 76 01 00 	lea    0x1764a(%rip),%rax        # 20414 <slip_debug_compile>
    8dca:	f6 00 01             	testb  $0x1,(%rax)
    8dcd:	0f 84 0e 00 00 00    	je     8de1 <check_if+0x41>
    8dd3:	48 8d 3d 04 f6 00 00 	lea    0xf604(%rip),%rdi        # 183de <_IO_stdin_used+0x3de>
    8dda:	b0 00                	mov    $0x0,%al
    8ddc:	e8 ef a2 ff ff       	call   30d0 <printf@plt>
    8de1:	e9 00 00 00 00       	jmp    8de6 <check_if+0x46>
    8de6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    8dea:	8b 75 f8             	mov    -0x8(%rbp),%esi
    8ded:	e8 3e 5b 00 00       	call   e930 <slipV_printValue>
    8df2:	48 8d 05 1b 76 01 00 	lea    0x1761b(%rip),%rax        # 20414 <slip_debug_compile>
    8df9:	f6 00 01             	testb  $0x1,(%rax)
    8dfc:	0f 84 0e 00 00 00    	je     8e10 <check_if+0x70>
    8e02:	48 8d 3d dc f5 00 00 	lea    0xf5dc(%rip),%rdi        # 183e5 <_IO_stdin_used+0x3e5>
    8e09:	b0 00                	mov    $0x0,%al
    8e0b:	e8 c0 a2 ff ff       	call   30d0 <printf@plt>
    8e10:	e9 00 00 00 00       	jmp    8e15 <check_if+0x75>
    8e15:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    8e19:	8b 75 e8             	mov    -0x18(%rbp),%esi
    8e1c:	e8 0f 5b 00 00       	call   e930 <slipV_printValue>
    8e21:	48 8d 05 ec 75 01 00 	lea    0x175ec(%rip),%rax        # 20414 <slip_debug_compile>
    8e28:	f6 00 01             	testb  $0x1,(%rax)
    8e2b:	0f 84 0e 00 00 00    	je     8e3f <check_if+0x9f>
    8e31:	48 8d 3d bc f5 00 00 	lea    0xf5bc(%rip),%rdi        # 183f4 <_IO_stdin_used+0x3f4>
    8e38:	b0 00                	mov    $0x0,%al
    8e3a:	e8 91 a2 ff ff       	call   30d0 <printf@plt>
    8e3f:	e9 00 00 00 00       	jmp    8e44 <check_if+0xa4>
    8e44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8e48:	48 8b 38             	mov    (%rax),%rdi
    8e4b:	8b 70 08             	mov    0x8(%rax),%esi
    8e4e:	e8 dd 5a 00 00       	call   e930 <slipV_printValue>
    8e53:	48 8d 05 ba 75 01 00 	lea    0x175ba(%rip),%rax        # 20414 <slip_debug_compile>
    8e5a:	f6 00 01             	testb  $0x1,(%rax)
    8e5d:	0f 84 0e 00 00 00    	je     8e71 <check_if+0xd1>
    8e63:	48 8d 3d c1 f2 00 00 	lea    0xf2c1(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    8e6a:	b0 00                	mov    $0x0,%al
    8e6c:	e8 5f a2 ff ff       	call   30d0 <printf@plt>
    8e71:	e9 00 00 00 00       	jmp    8e76 <check_if+0xd6>
    8e76:	48 83 c4 30          	add    $0x30,%rsp
    8e7a:	5d                   	pop    %rbp
    8e7b:	c3                   	ret
    8e7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000008e80 <slipI_cjp>:
    8e80:	55                   	push   %rbp
    8e81:	48 89 e5             	mov    %rsp,%rbp
    8e84:	66 89 f0             	mov    %si,%ax
    8e87:	66 89 f9             	mov    %di,%cx
    8e8a:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8e8e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8e92:	8a 45 f8             	mov    -0x8(%rbp),%al
    8e95:	24 c0                	and    $0xc0,%al
    8e97:	0c 1a                	or     $0x1a,%al
    8e99:	88 45 f8             	mov    %al,-0x8(%rbp)
    8e9c:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8ea0:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8ea4:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8ea9:	66 c1 e1 06          	shl    $0x6,%cx
    8ead:	66 83 e0 3f          	and    $0x3f,%ax
    8eb1:	66 09 c8             	or     %cx,%ax
    8eb4:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8eb8:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8ebc:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8ec0:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8ec3:	5d                   	pop    %rbp
    8ec4:	c3                   	ret
    8ec5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ecc:	00 00 00 
    8ecf:	90                   	nop

0000000000008ed0 <slipI_jmp>:
    8ed0:	55                   	push   %rbp
    8ed1:	48 89 e5             	mov    %rsp,%rbp
    8ed4:	89 7d f4             	mov    %edi,-0xc(%rbp)
    8ed7:	8a 45 f8             	mov    -0x8(%rbp),%al
    8eda:	24 c0                	and    $0xc0,%al
    8edc:	0c 19                	or     $0x19,%al
    8ede:	88 45 f8             	mov    %al,-0x8(%rbp)
    8ee1:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    8ee4:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8ee7:	81 e1 ff ff ff 03    	and    $0x3ffffff,%ecx
    8eed:	c1 e1 06             	shl    $0x6,%ecx
    8ef0:	83 e0 3f             	and    $0x3f,%eax
    8ef3:	09 c8                	or     %ecx,%eax
    8ef5:	89 45 f8             	mov    %eax,-0x8(%rbp)
    8ef8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8efb:	5d                   	pop    %rbp
    8efc:	c3                   	ret
    8efd:	0f 1f 00             	nopl   (%rax)

0000000000008f00 <slipI_not>:
    8f00:	55                   	push   %rbp
    8f01:	48 89 e5             	mov    %rsp,%rbp
    8f04:	66 89 f0             	mov    %si,%ax
    8f07:	66 89 f9             	mov    %di,%cx
    8f0a:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
    8f0e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
    8f12:	8a 45 f8             	mov    -0x8(%rbp),%al
    8f15:	24 c0                	and    $0xc0,%al
    8f17:	0c 13                	or     $0x13,%al
    8f19:	88 45 f8             	mov    %al,-0x8(%rbp)
    8f1c:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8f20:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8f24:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8f29:	66 c1 e1 06          	shl    $0x6,%cx
    8f2d:	66 83 e0 3f          	and    $0x3f,%ax
    8f31:	66 09 c8             	or     %cx,%ax
    8f34:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8f38:	66 8b 45 f4          	mov    -0xc(%rbp),%ax
    8f3c:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
    8f40:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8f43:	5d                   	pop    %rbp
    8f44:	c3                   	ret
    8f45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f4c:	00 00 00 
    8f4f:	90                   	nop

0000000000008f50 <slipI_add>:
    8f50:	55                   	push   %rbp
    8f51:	48 89 e5             	mov    %rsp,%rbp
    8f54:	88 d0                	mov    %dl,%al
    8f56:	40 88 f1             	mov    %sil,%cl
    8f59:	66 89 fa             	mov    %di,%dx
    8f5c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    8f60:	88 4d f5             	mov    %cl,-0xb(%rbp)
    8f63:	88 45 f4             	mov    %al,-0xc(%rbp)
    8f66:	8a 45 f8             	mov    -0x8(%rbp),%al
    8f69:	24 c0                	and    $0xc0,%al
    8f6b:	0c 0d                	or     $0xd,%al
    8f6d:	88 45 f8             	mov    %al,-0x8(%rbp)
    8f70:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8f74:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8f78:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8f7d:	66 c1 e1 06          	shl    $0x6,%cx
    8f81:	66 83 e0 3f          	and    $0x3f,%ax
    8f85:	66 09 c8             	or     %cx,%ax
    8f88:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8f8c:	8a 45 f5             	mov    -0xb(%rbp),%al
    8f8f:	88 45 fa             	mov    %al,-0x6(%rbp)
    8f92:	8a 45 f4             	mov    -0xc(%rbp),%al
    8f95:	88 45 fb             	mov    %al,-0x5(%rbp)
    8f98:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8f9b:	5d                   	pop    %rbp
    8f9c:	c3                   	ret
    8f9d:	0f 1f 00             	nopl   (%rax)

0000000000008fa0 <slipI_sub>:
    8fa0:	55                   	push   %rbp
    8fa1:	48 89 e5             	mov    %rsp,%rbp
    8fa4:	88 d0                	mov    %dl,%al
    8fa6:	40 88 f1             	mov    %sil,%cl
    8fa9:	66 89 fa             	mov    %di,%dx
    8fac:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    8fb0:	88 4d f5             	mov    %cl,-0xb(%rbp)
    8fb3:	88 45 f4             	mov    %al,-0xc(%rbp)
    8fb6:	8a 45 f8             	mov    -0x8(%rbp),%al
    8fb9:	24 c0                	and    $0xc0,%al
    8fbb:	0c 0e                	or     $0xe,%al
    8fbd:	88 45 f8             	mov    %al,-0x8(%rbp)
    8fc0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    8fc4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    8fc8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    8fcd:	66 c1 e1 06          	shl    $0x6,%cx
    8fd1:	66 83 e0 3f          	and    $0x3f,%ax
    8fd5:	66 09 c8             	or     %cx,%ax
    8fd8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    8fdc:	8a 45 f5             	mov    -0xb(%rbp),%al
    8fdf:	88 45 fa             	mov    %al,-0x6(%rbp)
    8fe2:	8a 45 f4             	mov    -0xc(%rbp),%al
    8fe5:	88 45 fb             	mov    %al,-0x5(%rbp)
    8fe8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    8feb:	5d                   	pop    %rbp
    8fec:	c3                   	ret
    8fed:	0f 1f 00             	nopl   (%rax)

0000000000008ff0 <slipI_mul>:
    8ff0:	55                   	push   %rbp
    8ff1:	48 89 e5             	mov    %rsp,%rbp
    8ff4:	88 d0                	mov    %dl,%al
    8ff6:	40 88 f1             	mov    %sil,%cl
    8ff9:	66 89 fa             	mov    %di,%dx
    8ffc:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9000:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9003:	88 45 f4             	mov    %al,-0xc(%rbp)
    9006:	8a 45 f8             	mov    -0x8(%rbp),%al
    9009:	24 c0                	and    $0xc0,%al
    900b:	0c 0f                	or     $0xf,%al
    900d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9010:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9014:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9018:	66 81 e1 ff 03       	and    $0x3ff,%cx
    901d:	66 c1 e1 06          	shl    $0x6,%cx
    9021:	66 83 e0 3f          	and    $0x3f,%ax
    9025:	66 09 c8             	or     %cx,%ax
    9028:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    902c:	8a 45 f5             	mov    -0xb(%rbp),%al
    902f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9032:	8a 45 f4             	mov    -0xc(%rbp),%al
    9035:	88 45 fb             	mov    %al,-0x5(%rbp)
    9038:	8b 45 f8             	mov    -0x8(%rbp),%eax
    903b:	5d                   	pop    %rbp
    903c:	c3                   	ret
    903d:	0f 1f 00             	nopl   (%rax)

0000000000009040 <slipI_div>:
    9040:	55                   	push   %rbp
    9041:	48 89 e5             	mov    %rsp,%rbp
    9044:	88 d0                	mov    %dl,%al
    9046:	40 88 f1             	mov    %sil,%cl
    9049:	66 89 fa             	mov    %di,%dx
    904c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9050:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9053:	88 45 f4             	mov    %al,-0xc(%rbp)
    9056:	8a 45 f8             	mov    -0x8(%rbp),%al
    9059:	24 c0                	and    $0xc0,%al
    905b:	0c 10                	or     $0x10,%al
    905d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9060:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9064:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9068:	66 81 e1 ff 03       	and    $0x3ff,%cx
    906d:	66 c1 e1 06          	shl    $0x6,%cx
    9071:	66 83 e0 3f          	and    $0x3f,%ax
    9075:	66 09 c8             	or     %cx,%ax
    9078:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    907c:	8a 45 f5             	mov    -0xb(%rbp),%al
    907f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9082:	8a 45 f4             	mov    -0xc(%rbp),%al
    9085:	88 45 fb             	mov    %al,-0x5(%rbp)
    9088:	8b 45 f8             	mov    -0x8(%rbp),%eax
    908b:	5d                   	pop    %rbp
    908c:	c3                   	ret
    908d:	0f 1f 00             	nopl   (%rax)

0000000000009090 <slipI_idiv>:
    9090:	55                   	push   %rbp
    9091:	48 89 e5             	mov    %rsp,%rbp
    9094:	88 d0                	mov    %dl,%al
    9096:	40 88 f1             	mov    %sil,%cl
    9099:	66 89 fa             	mov    %di,%dx
    909c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    90a0:	88 4d f5             	mov    %cl,-0xb(%rbp)
    90a3:	88 45 f4             	mov    %al,-0xc(%rbp)
    90a6:	8a 45 f8             	mov    -0x8(%rbp),%al
    90a9:	24 c0                	and    $0xc0,%al
    90ab:	0c 11                	or     $0x11,%al
    90ad:	88 45 f8             	mov    %al,-0x8(%rbp)
    90b0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    90b4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    90b8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    90bd:	66 c1 e1 06          	shl    $0x6,%cx
    90c1:	66 83 e0 3f          	and    $0x3f,%ax
    90c5:	66 09 c8             	or     %cx,%ax
    90c8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    90cc:	8a 45 f5             	mov    -0xb(%rbp),%al
    90cf:	88 45 fa             	mov    %al,-0x6(%rbp)
    90d2:	8a 45 f4             	mov    -0xc(%rbp),%al
    90d5:	88 45 fb             	mov    %al,-0x5(%rbp)
    90d8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    90db:	5d                   	pop    %rbp
    90dc:	c3                   	ret
    90dd:	0f 1f 00             	nopl   (%rax)

00000000000090e0 <slipI_mod>:
    90e0:	55                   	push   %rbp
    90e1:	48 89 e5             	mov    %rsp,%rbp
    90e4:	88 d0                	mov    %dl,%al
    90e6:	40 88 f1             	mov    %sil,%cl
    90e9:	66 89 fa             	mov    %di,%dx
    90ec:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    90f0:	88 4d f5             	mov    %cl,-0xb(%rbp)
    90f3:	88 45 f4             	mov    %al,-0xc(%rbp)
    90f6:	8a 45 f8             	mov    -0x8(%rbp),%al
    90f9:	24 c0                	and    $0xc0,%al
    90fb:	0c 12                	or     $0x12,%al
    90fd:	88 45 f8             	mov    %al,-0x8(%rbp)
    9100:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9104:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9108:	66 81 e1 ff 03       	and    $0x3ff,%cx
    910d:	66 c1 e1 06          	shl    $0x6,%cx
    9111:	66 83 e0 3f          	and    $0x3f,%ax
    9115:	66 09 c8             	or     %cx,%ax
    9118:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    911c:	8a 45 f5             	mov    -0xb(%rbp),%al
    911f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9122:	8a 45 f4             	mov    -0xc(%rbp),%al
    9125:	88 45 fb             	mov    %al,-0x5(%rbp)
    9128:	8b 45 f8             	mov    -0x8(%rbp),%eax
    912b:	5d                   	pop    %rbp
    912c:	c3                   	ret
    912d:	0f 1f 00             	nopl   (%rax)

0000000000009130 <slipI_eq>:
    9130:	55                   	push   %rbp
    9131:	48 89 e5             	mov    %rsp,%rbp
    9134:	88 d0                	mov    %dl,%al
    9136:	40 88 f1             	mov    %sil,%cl
    9139:	66 89 fa             	mov    %di,%dx
    913c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9140:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9143:	88 45 f4             	mov    %al,-0xc(%rbp)
    9146:	8a 45 f8             	mov    -0x8(%rbp),%al
    9149:	24 c0                	and    $0xc0,%al
    914b:	0c 1c                	or     $0x1c,%al
    914d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9150:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9154:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9158:	66 81 e1 ff 03       	and    $0x3ff,%cx
    915d:	66 c1 e1 06          	shl    $0x6,%cx
    9161:	66 83 e0 3f          	and    $0x3f,%ax
    9165:	66 09 c8             	or     %cx,%ax
    9168:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    916c:	8a 45 f5             	mov    -0xb(%rbp),%al
    916f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9172:	8a 45 f4             	mov    -0xc(%rbp),%al
    9175:	88 45 fb             	mov    %al,-0x5(%rbp)
    9178:	8b 45 f8             	mov    -0x8(%rbp),%eax
    917b:	5d                   	pop    %rbp
    917c:	c3                   	ret
    917d:	0f 1f 00             	nopl   (%rax)

0000000000009180 <slipI_le>:
    9180:	55                   	push   %rbp
    9181:	48 89 e5             	mov    %rsp,%rbp
    9184:	88 d0                	mov    %dl,%al
    9186:	40 88 f1             	mov    %sil,%cl
    9189:	66 89 fa             	mov    %di,%dx
    918c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9190:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9193:	88 45 f4             	mov    %al,-0xc(%rbp)
    9196:	8a 45 f8             	mov    -0x8(%rbp),%al
    9199:	24 c0                	and    $0xc0,%al
    919b:	0c 1e                	or     $0x1e,%al
    919d:	88 45 f8             	mov    %al,-0x8(%rbp)
    91a0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    91a4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    91a8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    91ad:	66 c1 e1 06          	shl    $0x6,%cx
    91b1:	66 83 e0 3f          	and    $0x3f,%ax
    91b5:	66 09 c8             	or     %cx,%ax
    91b8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    91bc:	8a 45 f5             	mov    -0xb(%rbp),%al
    91bf:	88 45 fa             	mov    %al,-0x6(%rbp)
    91c2:	8a 45 f4             	mov    -0xc(%rbp),%al
    91c5:	88 45 fb             	mov    %al,-0x5(%rbp)
    91c8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    91cb:	5d                   	pop    %rbp
    91cc:	c3                   	ret
    91cd:	0f 1f 00             	nopl   (%rax)

00000000000091d0 <slipI_lt>:
    91d0:	55                   	push   %rbp
    91d1:	48 89 e5             	mov    %rsp,%rbp
    91d4:	88 d0                	mov    %dl,%al
    91d6:	40 88 f1             	mov    %sil,%cl
    91d9:	66 89 fa             	mov    %di,%dx
    91dc:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    91e0:	88 4d f5             	mov    %cl,-0xb(%rbp)
    91e3:	88 45 f4             	mov    %al,-0xc(%rbp)
    91e6:	8a 45 f8             	mov    -0x8(%rbp),%al
    91e9:	24 c0                	and    $0xc0,%al
    91eb:	0c 1d                	or     $0x1d,%al
    91ed:	88 45 f8             	mov    %al,-0x8(%rbp)
    91f0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    91f4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    91f8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    91fd:	66 c1 e1 06          	shl    $0x6,%cx
    9201:	66 83 e0 3f          	and    $0x3f,%ax
    9205:	66 09 c8             	or     %cx,%ax
    9208:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    920c:	8a 45 f5             	mov    -0xb(%rbp),%al
    920f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9212:	8a 45 f4             	mov    -0xc(%rbp),%al
    9215:	88 45 fb             	mov    %al,-0x5(%rbp)
    9218:	8b 45 f8             	mov    -0x8(%rbp),%eax
    921b:	5d                   	pop    %rbp
    921c:	c3                   	ret
    921d:	0f 1f 00             	nopl   (%rax)

0000000000009220 <slipI_gt>:
    9220:	55                   	push   %rbp
    9221:	48 89 e5             	mov    %rsp,%rbp
    9224:	88 d0                	mov    %dl,%al
    9226:	40 88 f1             	mov    %sil,%cl
    9229:	66 89 fa             	mov    %di,%dx
    922c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9230:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9233:	88 45 f4             	mov    %al,-0xc(%rbp)
    9236:	8a 45 f8             	mov    -0x8(%rbp),%al
    9239:	24 c0                	and    $0xc0,%al
    923b:	0c 1f                	or     $0x1f,%al
    923d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9240:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9244:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9248:	66 81 e1 ff 03       	and    $0x3ff,%cx
    924d:	66 c1 e1 06          	shl    $0x6,%cx
    9251:	66 83 e0 3f          	and    $0x3f,%ax
    9255:	66 09 c8             	or     %cx,%ax
    9258:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    925c:	8a 45 f5             	mov    -0xb(%rbp),%al
    925f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9262:	8a 45 f4             	mov    -0xc(%rbp),%al
    9265:	88 45 fb             	mov    %al,-0x5(%rbp)
    9268:	8b 45 f8             	mov    -0x8(%rbp),%eax
    926b:	5d                   	pop    %rbp
    926c:	c3                   	ret
    926d:	0f 1f 00             	nopl   (%rax)

0000000000009270 <slipI_ge>:
    9270:	55                   	push   %rbp
    9271:	48 89 e5             	mov    %rsp,%rbp
    9274:	88 d0                	mov    %dl,%al
    9276:	40 88 f1             	mov    %sil,%cl
    9279:	66 89 fa             	mov    %di,%dx
    927c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9280:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9283:	88 45 f4             	mov    %al,-0xc(%rbp)
    9286:	8a 45 f8             	mov    -0x8(%rbp),%al
    9289:	24 c0                	and    $0xc0,%al
    928b:	0c 20                	or     $0x20,%al
    928d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9290:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9294:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9298:	66 81 e1 ff 03       	and    $0x3ff,%cx
    929d:	66 c1 e1 06          	shl    $0x6,%cx
    92a1:	66 83 e0 3f          	and    $0x3f,%ax
    92a5:	66 09 c8             	or     %cx,%ax
    92a8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    92ac:	8a 45 f5             	mov    -0xb(%rbp),%al
    92af:	88 45 fa             	mov    %al,-0x6(%rbp)
    92b2:	8a 45 f4             	mov    -0xc(%rbp),%al
    92b5:	88 45 fb             	mov    %al,-0x5(%rbp)
    92b8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    92bb:	5d                   	pop    %rbp
    92bc:	c3                   	ret
    92bd:	0f 1f 00             	nopl   (%rax)

00000000000092c0 <slipI_ne>:
    92c0:	55                   	push   %rbp
    92c1:	48 89 e5             	mov    %rsp,%rbp
    92c4:	88 d0                	mov    %dl,%al
    92c6:	40 88 f1             	mov    %sil,%cl
    92c9:	66 89 fa             	mov    %di,%dx
    92cc:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    92d0:	88 4d f5             	mov    %cl,-0xb(%rbp)
    92d3:	88 45 f4             	mov    %al,-0xc(%rbp)
    92d6:	8a 45 f8             	mov    -0x8(%rbp),%al
    92d9:	24 c0                	and    $0xc0,%al
    92db:	0c 1b                	or     $0x1b,%al
    92dd:	88 45 f8             	mov    %al,-0x8(%rbp)
    92e0:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    92e4:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    92e8:	66 81 e1 ff 03       	and    $0x3ff,%cx
    92ed:	66 c1 e1 06          	shl    $0x6,%cx
    92f1:	66 83 e0 3f          	and    $0x3f,%ax
    92f5:	66 09 c8             	or     %cx,%ax
    92f8:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    92fc:	8a 45 f5             	mov    -0xb(%rbp),%al
    92ff:	88 45 fa             	mov    %al,-0x6(%rbp)
    9302:	8a 45 f4             	mov    -0xc(%rbp),%al
    9305:	88 45 fb             	mov    %al,-0x5(%rbp)
    9308:	8b 45 f8             	mov    -0x8(%rbp),%eax
    930b:	5d                   	pop    %rbp
    930c:	c3                   	ret
    930d:	0f 1f 00             	nopl   (%rax)

0000000000009310 <slipI_and>:
    9310:	55                   	push   %rbp
    9311:	48 89 e5             	mov    %rsp,%rbp
    9314:	88 d0                	mov    %dl,%al
    9316:	40 88 f1             	mov    %sil,%cl
    9319:	66 89 fa             	mov    %di,%dx
    931c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9320:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9323:	88 45 f4             	mov    %al,-0xc(%rbp)
    9326:	8a 45 f8             	mov    -0x8(%rbp),%al
    9329:	24 c0                	and    $0xc0,%al
    932b:	0c 14                	or     $0x14,%al
    932d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9330:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9334:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9338:	66 81 e1 ff 03       	and    $0x3ff,%cx
    933d:	66 c1 e1 06          	shl    $0x6,%cx
    9341:	66 83 e0 3f          	and    $0x3f,%ax
    9345:	66 09 c8             	or     %cx,%ax
    9348:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    934c:	8a 45 f5             	mov    -0xb(%rbp),%al
    934f:	88 45 fa             	mov    %al,-0x6(%rbp)
    9352:	8a 45 f4             	mov    -0xc(%rbp),%al
    9355:	88 45 fb             	mov    %al,-0x5(%rbp)
    9358:	8b 45 f8             	mov    -0x8(%rbp),%eax
    935b:	5d                   	pop    %rbp
    935c:	c3                   	ret
    935d:	0f 1f 00             	nopl   (%rax)

0000000000009360 <slipI_or>:
    9360:	55                   	push   %rbp
    9361:	48 89 e5             	mov    %rsp,%rbp
    9364:	88 d0                	mov    %dl,%al
    9366:	40 88 f1             	mov    %sil,%cl
    9369:	66 89 fa             	mov    %di,%dx
    936c:	66 89 55 f6          	mov    %dx,-0xa(%rbp)
    9370:	88 4d f5             	mov    %cl,-0xb(%rbp)
    9373:	88 45 f4             	mov    %al,-0xc(%rbp)
    9376:	8a 45 f8             	mov    -0x8(%rbp),%al
    9379:	24 c0                	and    $0xc0,%al
    937b:	0c 15                	or     $0x15,%al
    937d:	88 45 f8             	mov    %al,-0x8(%rbp)
    9380:	66 8b 4d f6          	mov    -0xa(%rbp),%cx
    9384:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    9388:	66 81 e1 ff 03       	and    $0x3ff,%cx
    938d:	66 c1 e1 06          	shl    $0x6,%cx
    9391:	66 83 e0 3f          	and    $0x3f,%ax
    9395:	66 09 c8             	or     %cx,%ax
    9398:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
    939c:	8a 45 f5             	mov    -0xb(%rbp),%al
    939f:	88 45 fa             	mov    %al,-0x6(%rbp)
    93a2:	8a 45 f4             	mov    -0xc(%rbp),%al
    93a5:	88 45 fb             	mov    %al,-0x5(%rbp)
    93a8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    93ab:	5d                   	pop    %rbp
    93ac:	c3                   	ret
    93ad:	0f 1f 00             	nopl   (%rax)

00000000000093b0 <slip_openIOLib>:
    93b0:	55                   	push   %rbp
    93b1:	48 89 e5             	mov    %rsp,%rbp
    93b4:	48 83 ec 10          	sub    $0x10,%rsp
    93b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    93bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    93c0:	48 8d 35 a9 65 01 00 	lea    0x165a9(%rip),%rsi        # 1f970 <meta>
    93c7:	e8 44 0a 00 00       	call   9e10 <slipL_regGlobalCFuncs>
    93cc:	31 c0                	xor    %eax,%eax
    93ce:	48 83 c4 10          	add    $0x10,%rsp
    93d2:	5d                   	pop    %rbp
    93d3:	c3                   	ret
    93d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    93db:	00 00 00 
    93de:	66 90                	xchg   %ax,%ax

00000000000093e0 <_close>:
    93e0:	55                   	push   %rbp
    93e1:	48 89 e5             	mov    %rsp,%rbp
    93e4:	48 83 ec 20          	sub    $0x20,%rsp
    93e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    93ec:	89 75 ec             	mov    %esi,-0x14(%rbp)
    93ef:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    93f4:	31 f6                	xor    %esi,%esi
    93f6:	e8 d5 00 00 00       	call   94d0 <slip_Return>
    93fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    93ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9403:	48 83 c4 20          	add    $0x20,%rsp
    9407:	5d                   	pop    %rbp
    9408:	c3                   	ret
    9409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009410 <_read>:
    9410:	55                   	push   %rbp
    9411:	48 89 e5             	mov    %rsp,%rbp
    9414:	48 83 ec 20          	sub    $0x20,%rsp
    9418:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    941c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    941f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9424:	31 f6                	xor    %esi,%esi
    9426:	e8 a5 00 00 00       	call   94d0 <slip_Return>
    942b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    942f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9433:	48 83 c4 20          	add    $0x20,%rsp
    9437:	5d                   	pop    %rbp
    9438:	c3                   	ret
    9439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009440 <_write>:
    9440:	55                   	push   %rbp
    9441:	48 89 e5             	mov    %rsp,%rbp
    9444:	48 83 ec 20          	sub    $0x20,%rsp
    9448:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    944c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    944f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9454:	31 f6                	xor    %esi,%esi
    9456:	e8 75 00 00 00       	call   94d0 <slip_Return>
    945b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    945f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9463:	48 83 c4 20          	add    $0x20,%rsp
    9467:	5d                   	pop    %rbp
    9468:	c3                   	ret
    9469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009470 <_open>:
    9470:	55                   	push   %rbp
    9471:	48 89 e5             	mov    %rsp,%rbp
    9474:	48 83 ec 20          	sub    $0x20,%rsp
    9478:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    947c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    947f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9484:	31 f6                	xor    %esi,%esi
    9486:	e8 45 00 00 00       	call   94d0 <slip_Return>
    948b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    948f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9493:	48 83 c4 20          	add    $0x20,%rsp
    9497:	5d                   	pop    %rbp
    9498:	c3                   	ret
    9499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000094a0 <_flush>:
    94a0:	55                   	push   %rbp
    94a1:	48 89 e5             	mov    %rsp,%rbp
    94a4:	48 83 ec 20          	sub    $0x20,%rsp
    94a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    94ac:	89 75 ec             	mov    %esi,-0x14(%rbp)
    94af:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    94b4:	31 f6                	xor    %esi,%esi
    94b6:	e8 15 00 00 00       	call   94d0 <slip_Return>
    94bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    94bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94c3:	48 83 c4 20          	add    $0x20,%rsp
    94c7:	5d                   	pop    %rbp
    94c8:	c3                   	ret
    94c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000094d0 <slip_Return>:
    94d0:	55                   	push   %rbp
    94d1:	48 89 e5             	mov    %rsp,%rbp
    94d4:	89 7d f4             	mov    %edi,-0xc(%rbp)
    94d7:	89 75 f0             	mov    %esi,-0x10(%rbp)
    94da:	8b 45 f4             	mov    -0xc(%rbp),%eax
    94dd:	89 45 f8             	mov    %eax,-0x8(%rbp)
    94e0:	8b 45 f0             	mov    -0x10(%rbp),%eax
    94e3:	89 45 fc             	mov    %eax,-0x4(%rbp)
    94e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94ea:	5d                   	pop    %rbp
    94eb:	c3                   	ret
    94ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000094f0 <slip_openMathLib>:
    94f0:	55                   	push   %rbp
    94f1:	48 89 e5             	mov    %rsp,%rbp
    94f4:	48 83 ec 10          	sub    $0x10,%rsp
    94f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    94fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9500:	48 8d 35 c9 64 01 00 	lea    0x164c9(%rip),%rsi        # 1f9d0 <mathlib>
    9507:	e8 04 09 00 00       	call   9e10 <slipL_regGlobalCFuncs>
    950c:	31 c0                	xor    %eax,%eax
    950e:	48 83 c4 10          	add    $0x10,%rsp
    9512:	5d                   	pop    %rbp
    9513:	c3                   	ret
    9514:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    951b:	00 00 00 
    951e:	66 90                	xchg   %ax,%ax

0000000000009520 <_abs>:
    9520:	55                   	push   %rbp
    9521:	48 89 e5             	mov    %rsp,%rbp
    9524:	48 83 ec 20          	sub    $0x20,%rsp
    9528:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    952c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    952f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9534:	31 f6                	xor    %esi,%esi
    9536:	e8 f5 04 00 00       	call   9a30 <slip_Return>
    953b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    953f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9543:	48 83 c4 20          	add    $0x20,%rsp
    9547:	5d                   	pop    %rbp
    9548:	c3                   	ret
    9549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009550 <_acos>:
    9550:	55                   	push   %rbp
    9551:	48 89 e5             	mov    %rsp,%rbp
    9554:	48 83 ec 20          	sub    $0x20,%rsp
    9558:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    955c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    955f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9564:	31 f6                	xor    %esi,%esi
    9566:	e8 c5 04 00 00       	call   9a30 <slip_Return>
    956b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    956f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9573:	48 83 c4 20          	add    $0x20,%rsp
    9577:	5d                   	pop    %rbp
    9578:	c3                   	ret
    9579:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009580 <_asin>:
    9580:	55                   	push   %rbp
    9581:	48 89 e5             	mov    %rsp,%rbp
    9584:	48 83 ec 20          	sub    $0x20,%rsp
    9588:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    958c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    958f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9594:	31 f6                	xor    %esi,%esi
    9596:	e8 95 04 00 00       	call   9a30 <slip_Return>
    959b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    959f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95a3:	48 83 c4 20          	add    $0x20,%rsp
    95a7:	5d                   	pop    %rbp
    95a8:	c3                   	ret
    95a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000095b0 <_atan>:
    95b0:	55                   	push   %rbp
    95b1:	48 89 e5             	mov    %rsp,%rbp
    95b4:	48 83 ec 20          	sub    $0x20,%rsp
    95b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    95bc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    95bf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    95c4:	31 f6                	xor    %esi,%esi
    95c6:	e8 65 04 00 00       	call   9a30 <slip_Return>
    95cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    95cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95d3:	48 83 c4 20          	add    $0x20,%rsp
    95d7:	5d                   	pop    %rbp
    95d8:	c3                   	ret
    95d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000095e0 <_ceil>:
    95e0:	55                   	push   %rbp
    95e1:	48 89 e5             	mov    %rsp,%rbp
    95e4:	48 83 ec 20          	sub    $0x20,%rsp
    95e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    95ec:	89 75 ec             	mov    %esi,-0x14(%rbp)
    95ef:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    95f4:	31 f6                	xor    %esi,%esi
    95f6:	e8 35 04 00 00       	call   9a30 <slip_Return>
    95fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    95ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9603:	48 83 c4 20          	add    $0x20,%rsp
    9607:	5d                   	pop    %rbp
    9608:	c3                   	ret
    9609:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009610 <_cos>:
    9610:	55                   	push   %rbp
    9611:	48 89 e5             	mov    %rsp,%rbp
    9614:	48 83 ec 20          	sub    $0x20,%rsp
    9618:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    961c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    961f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9624:	31 f6                	xor    %esi,%esi
    9626:	e8 05 04 00 00       	call   9a30 <slip_Return>
    962b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    962f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9633:	48 83 c4 20          	add    $0x20,%rsp
    9637:	5d                   	pop    %rbp
    9638:	c3                   	ret
    9639:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009640 <_deg>:
    9640:	55                   	push   %rbp
    9641:	48 89 e5             	mov    %rsp,%rbp
    9644:	48 83 ec 20          	sub    $0x20,%rsp
    9648:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    964c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    964f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9654:	31 f6                	xor    %esi,%esi
    9656:	e8 d5 03 00 00       	call   9a30 <slip_Return>
    965b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    965f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9663:	48 83 c4 20          	add    $0x20,%rsp
    9667:	5d                   	pop    %rbp
    9668:	c3                   	ret
    9669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009670 <_exp>:
    9670:	55                   	push   %rbp
    9671:	48 89 e5             	mov    %rsp,%rbp
    9674:	48 83 ec 20          	sub    $0x20,%rsp
    9678:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    967c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    967f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9684:	31 f6                	xor    %esi,%esi
    9686:	e8 a5 03 00 00       	call   9a30 <slip_Return>
    968b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    968f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9693:	48 83 c4 20          	add    $0x20,%rsp
    9697:	5d                   	pop    %rbp
    9698:	c3                   	ret
    9699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000096a0 <_floor>:
    96a0:	55                   	push   %rbp
    96a1:	48 89 e5             	mov    %rsp,%rbp
    96a4:	48 83 ec 20          	sub    $0x20,%rsp
    96a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    96ac:	89 75 ec             	mov    %esi,-0x14(%rbp)
    96af:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    96b4:	31 f6                	xor    %esi,%esi
    96b6:	e8 75 03 00 00       	call   9a30 <slip_Return>
    96bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    96bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96c3:	48 83 c4 20          	add    $0x20,%rsp
    96c7:	5d                   	pop    %rbp
    96c8:	c3                   	ret
    96c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000096d0 <_fmod>:
    96d0:	55                   	push   %rbp
    96d1:	48 89 e5             	mov    %rsp,%rbp
    96d4:	48 83 ec 20          	sub    $0x20,%rsp
    96d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    96dc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    96df:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    96e4:	31 f6                	xor    %esi,%esi
    96e6:	e8 45 03 00 00       	call   9a30 <slip_Return>
    96eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    96ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96f3:	48 83 c4 20          	add    $0x20,%rsp
    96f7:	5d                   	pop    %rbp
    96f8:	c3                   	ret
    96f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009700 <_ult>:
    9700:	55                   	push   %rbp
    9701:	48 89 e5             	mov    %rsp,%rbp
    9704:	48 83 ec 20          	sub    $0x20,%rsp
    9708:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    970c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    970f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9714:	31 f6                	xor    %esi,%esi
    9716:	e8 15 03 00 00       	call   9a30 <slip_Return>
    971b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    971f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9723:	48 83 c4 20          	add    $0x20,%rsp
    9727:	5d                   	pop    %rbp
    9728:	c3                   	ret
    9729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009730 <_log>:
    9730:	55                   	push   %rbp
    9731:	48 89 e5             	mov    %rsp,%rbp
    9734:	48 83 ec 20          	sub    $0x20,%rsp
    9738:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    973c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    973f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9744:	31 f6                	xor    %esi,%esi
    9746:	e8 e5 02 00 00       	call   9a30 <slip_Return>
    974b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    974f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9753:	48 83 c4 20          	add    $0x20,%rsp
    9757:	5d                   	pop    %rbp
    9758:	c3                   	ret
    9759:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009760 <_max>:
    9760:	55                   	push   %rbp
    9761:	48 89 e5             	mov    %rsp,%rbp
    9764:	48 83 ec 20          	sub    $0x20,%rsp
    9768:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    976c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    976f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9774:	31 f6                	xor    %esi,%esi
    9776:	e8 b5 02 00 00       	call   9a30 <slip_Return>
    977b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    977f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9783:	48 83 c4 20          	add    $0x20,%rsp
    9787:	5d                   	pop    %rbp
    9788:	c3                   	ret
    9789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009790 <_min>:
    9790:	55                   	push   %rbp
    9791:	48 89 e5             	mov    %rsp,%rbp
    9794:	48 83 ec 20          	sub    $0x20,%rsp
    9798:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    979c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    979f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    97a4:	31 f6                	xor    %esi,%esi
    97a6:	e8 85 02 00 00       	call   9a30 <slip_Return>
    97ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    97af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97b3:	48 83 c4 20          	add    $0x20,%rsp
    97b7:	5d                   	pop    %rbp
    97b8:	c3                   	ret
    97b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000097c0 <_modf>:
    97c0:	55                   	push   %rbp
    97c1:	48 89 e5             	mov    %rsp,%rbp
    97c4:	48 83 ec 20          	sub    $0x20,%rsp
    97c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    97cc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    97cf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    97d4:	31 f6                	xor    %esi,%esi
    97d6:	e8 55 02 00 00       	call   9a30 <slip_Return>
    97db:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    97df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97e3:	48 83 c4 20          	add    $0x20,%rsp
    97e7:	5d                   	pop    %rbp
    97e8:	c3                   	ret
    97e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000097f0 <_rad>:
    97f0:	55                   	push   %rbp
    97f1:	48 89 e5             	mov    %rsp,%rbp
    97f4:	48 83 ec 20          	sub    $0x20,%rsp
    97f8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    97fc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    97ff:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9804:	31 f6                	xor    %esi,%esi
    9806:	e8 25 02 00 00       	call   9a30 <slip_Return>
    980b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    980f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9813:	48 83 c4 20          	add    $0x20,%rsp
    9817:	5d                   	pop    %rbp
    9818:	c3                   	ret
    9819:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009820 <_rand>:
    9820:	55                   	push   %rbp
    9821:	48 89 e5             	mov    %rsp,%rbp
    9824:	48 83 ec 20          	sub    $0x20,%rsp
    9828:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    982c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    982f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9834:	31 f6                	xor    %esi,%esi
    9836:	e8 f5 01 00 00       	call   9a30 <slip_Return>
    983b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    983f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9843:	48 83 c4 20          	add    $0x20,%rsp
    9847:	5d                   	pop    %rbp
    9848:	c3                   	ret
    9849:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009850 <_srand>:
    9850:	55                   	push   %rbp
    9851:	48 89 e5             	mov    %rsp,%rbp
    9854:	48 83 ec 20          	sub    $0x20,%rsp
    9858:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    985c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    985f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9864:	31 f6                	xor    %esi,%esi
    9866:	e8 c5 01 00 00       	call   9a30 <slip_Return>
    986b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    986f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9873:	48 83 c4 20          	add    $0x20,%rsp
    9877:	5d                   	pop    %rbp
    9878:	c3                   	ret
    9879:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009880 <_sin>:
    9880:	55                   	push   %rbp
    9881:	48 89 e5             	mov    %rsp,%rbp
    9884:	48 83 ec 20          	sub    $0x20,%rsp
    9888:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    988c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    988f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9894:	31 f6                	xor    %esi,%esi
    9896:	e8 95 01 00 00       	call   9a30 <slip_Return>
    989b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    989f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98a3:	48 83 c4 20          	add    $0x20,%rsp
    98a7:	5d                   	pop    %rbp
    98a8:	c3                   	ret
    98a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000098b0 <_sqrt>:
    98b0:	55                   	push   %rbp
    98b1:	48 89 e5             	mov    %rsp,%rbp
    98b4:	48 83 ec 20          	sub    $0x20,%rsp
    98b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    98bc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    98bf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    98c4:	31 f6                	xor    %esi,%esi
    98c6:	e8 65 01 00 00       	call   9a30 <slip_Return>
    98cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    98cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98d3:	48 83 c4 20          	add    $0x20,%rsp
    98d7:	5d                   	pop    %rbp
    98d8:	c3                   	ret
    98d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000098e0 <_tan>:
    98e0:	55                   	push   %rbp
    98e1:	48 89 e5             	mov    %rsp,%rbp
    98e4:	48 83 ec 20          	sub    $0x20,%rsp
    98e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    98ec:	89 75 ec             	mov    %esi,-0x14(%rbp)
    98ef:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    98f4:	31 f6                	xor    %esi,%esi
    98f6:	e8 35 01 00 00       	call   9a30 <slip_Return>
    98fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    98ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9903:	48 83 c4 20          	add    $0x20,%rsp
    9907:	5d                   	pop    %rbp
    9908:	c3                   	ret
    9909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009910 <_type>:
    9910:	55                   	push   %rbp
    9911:	48 89 e5             	mov    %rsp,%rbp
    9914:	48 83 ec 20          	sub    $0x20,%rsp
    9918:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    991c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    991f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9924:	31 f6                	xor    %esi,%esi
    9926:	e8 05 01 00 00       	call   9a30 <slip_Return>
    992b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    992f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9933:	48 83 c4 20          	add    $0x20,%rsp
    9937:	5d                   	pop    %rbp
    9938:	c3                   	ret
    9939:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009940 <_cosh>:
    9940:	55                   	push   %rbp
    9941:	48 89 e5             	mov    %rsp,%rbp
    9944:	48 83 ec 20          	sub    $0x20,%rsp
    9948:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    994c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    994f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9954:	31 f6                	xor    %esi,%esi
    9956:	e8 d5 00 00 00       	call   9a30 <slip_Return>
    995b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    995f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9963:	48 83 c4 20          	add    $0x20,%rsp
    9967:	5d                   	pop    %rbp
    9968:	c3                   	ret
    9969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009970 <_sinh>:
    9970:	55                   	push   %rbp
    9971:	48 89 e5             	mov    %rsp,%rbp
    9974:	48 83 ec 20          	sub    $0x20,%rsp
    9978:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    997c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    997f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9984:	31 f6                	xor    %esi,%esi
    9986:	e8 a5 00 00 00       	call   9a30 <slip_Return>
    998b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    998f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9993:	48 83 c4 20          	add    $0x20,%rsp
    9997:	5d                   	pop    %rbp
    9998:	c3                   	ret
    9999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000099a0 <_tanh>:
    99a0:	55                   	push   %rbp
    99a1:	48 89 e5             	mov    %rsp,%rbp
    99a4:	48 83 ec 20          	sub    $0x20,%rsp
    99a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    99ac:	89 75 ec             	mov    %esi,-0x14(%rbp)
    99af:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    99b4:	31 f6                	xor    %esi,%esi
    99b6:	e8 75 00 00 00       	call   9a30 <slip_Return>
    99bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    99bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99c3:	48 83 c4 20          	add    $0x20,%rsp
    99c7:	5d                   	pop    %rbp
    99c8:	c3                   	ret
    99c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000099d0 <_pow>:
    99d0:	55                   	push   %rbp
    99d1:	48 89 e5             	mov    %rsp,%rbp
    99d4:	48 83 ec 20          	sub    $0x20,%rsp
    99d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    99dc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    99df:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    99e4:	31 f6                	xor    %esi,%esi
    99e6:	e8 45 00 00 00       	call   9a30 <slip_Return>
    99eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    99ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99f3:	48 83 c4 20          	add    $0x20,%rsp
    99f7:	5d                   	pop    %rbp
    99f8:	c3                   	ret
    99f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009a00 <_log10>:
    9a00:	55                   	push   %rbp
    9a01:	48 89 e5             	mov    %rsp,%rbp
    9a04:	48 83 ec 20          	sub    $0x20,%rsp
    9a08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9a0c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9a0f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9a14:	31 f6                	xor    %esi,%esi
    9a16:	e8 15 00 00 00       	call   9a30 <slip_Return>
    9a1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a23:	48 83 c4 20          	add    $0x20,%rsp
    9a27:	5d                   	pop    %rbp
    9a28:	c3                   	ret
    9a29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009a30 <slip_Return>:
    9a30:	55                   	push   %rbp
    9a31:	48 89 e5             	mov    %rsp,%rbp
    9a34:	89 7d f4             	mov    %edi,-0xc(%rbp)
    9a37:	89 75 f0             	mov    %esi,-0x10(%rbp)
    9a3a:	8b 45 f4             	mov    -0xc(%rbp),%eax
    9a3d:	89 45 f8             	mov    %eax,-0x8(%rbp)
    9a40:	8b 45 f0             	mov    -0x10(%rbp),%eax
    9a43:	89 45 fc             	mov    %eax,-0x4(%rbp)
    9a46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a4a:	5d                   	pop    %rbp
    9a4b:	c3                   	ret
    9a4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000009a50 <slip_openStringLib>:
    9a50:	55                   	push   %rbp
    9a51:	48 89 e5             	mov    %rsp,%rbp
    9a54:	48 83 ec 10          	sub    $0x10,%rsp
    9a58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a5c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9a60:	48 8d 35 29 61 01 00 	lea    0x16129(%rip),%rsi        # 1fb90 <strlib>
    9a67:	e8 a4 03 00 00       	call   9e10 <slipL_regGlobalCFuncs>
    9a6c:	31 c0                	xor    %eax,%eax
    9a6e:	48 83 c4 10          	add    $0x10,%rsp
    9a72:	5d                   	pop    %rbp
    9a73:	c3                   	ret
    9a74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9a7b:	00 00 00 
    9a7e:	66 90                	xchg   %ax,%ax

0000000000009a80 <_getchar>:
    9a80:	55                   	push   %rbp
    9a81:	48 89 e5             	mov    %rsp,%rbp
    9a84:	48 83 ec 20          	sub    $0x20,%rsp
    9a88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9a8c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9a8f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9a94:	31 f6                	xor    %esi,%esi
    9a96:	e8 95 01 00 00       	call   9c30 <slip_Return>
    9a9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9a9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aa3:	48 83 c4 20          	add    $0x20,%rsp
    9aa7:	5d                   	pop    %rbp
    9aa8:	c3                   	ret
    9aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009ab0 <_setchar>:
    9ab0:	55                   	push   %rbp
    9ab1:	48 89 e5             	mov    %rsp,%rbp
    9ab4:	48 83 ec 20          	sub    $0x20,%rsp
    9ab8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9abc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9abf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9ac4:	31 f6                	xor    %esi,%esi
    9ac6:	e8 65 01 00 00       	call   9c30 <slip_Return>
    9acb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ad3:	48 83 c4 20          	add    $0x20,%rsp
    9ad7:	5d                   	pop    %rbp
    9ad8:	c3                   	ret
    9ad9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009ae0 <_find>:
    9ae0:	55                   	push   %rbp
    9ae1:	48 89 e5             	mov    %rsp,%rbp
    9ae4:	48 83 ec 20          	sub    $0x20,%rsp
    9ae8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9aec:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9aef:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9af4:	31 f6                	xor    %esi,%esi
    9af6:	e8 35 01 00 00       	call   9c30 <slip_Return>
    9afb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b03:	48 83 c4 20          	add    $0x20,%rsp
    9b07:	5d                   	pop    %rbp
    9b08:	c3                   	ret
    9b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009b10 <_format>:
    9b10:	55                   	push   %rbp
    9b11:	48 89 e5             	mov    %rsp,%rbp
    9b14:	48 83 ec 20          	sub    $0x20,%rsp
    9b18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9b1c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9b1f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9b24:	31 f6                	xor    %esi,%esi
    9b26:	e8 05 01 00 00       	call   9c30 <slip_Return>
    9b2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9b2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b33:	48 83 c4 20          	add    $0x20,%rsp
    9b37:	5d                   	pop    %rbp
    9b38:	c3                   	ret
    9b39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009b40 <_gsub>:
    9b40:	55                   	push   %rbp
    9b41:	48 89 e5             	mov    %rsp,%rbp
    9b44:	48 83 ec 20          	sub    $0x20,%rsp
    9b48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9b4c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9b4f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9b54:	31 f6                	xor    %esi,%esi
    9b56:	e8 d5 00 00 00       	call   9c30 <slip_Return>
    9b5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9b5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b63:	48 83 c4 20          	add    $0x20,%rsp
    9b67:	5d                   	pop    %rbp
    9b68:	c3                   	ret
    9b69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009b70 <_len>:
    9b70:	55                   	push   %rbp
    9b71:	48 89 e5             	mov    %rsp,%rbp
    9b74:	48 83 ec 20          	sub    $0x20,%rsp
    9b78:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9b7c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9b7f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9b84:	31 f6                	xor    %esi,%esi
    9b86:	e8 a5 00 00 00       	call   9c30 <slip_Return>
    9b8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9b8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b93:	48 83 c4 20          	add    $0x20,%rsp
    9b97:	5d                   	pop    %rbp
    9b98:	c3                   	ret
    9b99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009ba0 <_lower>:
    9ba0:	55                   	push   %rbp
    9ba1:	48 89 e5             	mov    %rsp,%rbp
    9ba4:	48 83 ec 20          	sub    $0x20,%rsp
    9ba8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9bac:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9baf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9bb4:	31 f6                	xor    %esi,%esi
    9bb6:	e8 75 00 00 00       	call   9c30 <slip_Return>
    9bbb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9bbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9bc3:	48 83 c4 20          	add    $0x20,%rsp
    9bc7:	5d                   	pop    %rbp
    9bc8:	c3                   	ret
    9bc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009bd0 <_upper>:
    9bd0:	55                   	push   %rbp
    9bd1:	48 89 e5             	mov    %rsp,%rbp
    9bd4:	48 83 ec 20          	sub    $0x20,%rsp
    9bd8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9bdc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9bdf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9be4:	31 f6                	xor    %esi,%esi
    9be6:	e8 45 00 00 00       	call   9c30 <slip_Return>
    9beb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9bf3:	48 83 c4 20          	add    $0x20,%rsp
    9bf7:	5d                   	pop    %rbp
    9bf8:	c3                   	ret
    9bf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009c00 <_reverse>:
    9c00:	55                   	push   %rbp
    9c01:	48 89 e5             	mov    %rsp,%rbp
    9c04:	48 83 ec 20          	sub    $0x20,%rsp
    9c08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9c0c:	89 75 ec             	mov    %esi,-0x14(%rbp)
    9c0f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    9c14:	31 f6                	xor    %esi,%esi
    9c16:	e8 15 00 00 00       	call   9c30 <slip_Return>
    9c1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9c1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c23:	48 83 c4 20          	add    $0x20,%rsp
    9c27:	5d                   	pop    %rbp
    9c28:	c3                   	ret
    9c29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000009c30 <slip_Return>:
    9c30:	55                   	push   %rbp
    9c31:	48 89 e5             	mov    %rsp,%rbp
    9c34:	89 7d f4             	mov    %edi,-0xc(%rbp)
    9c37:	89 75 f0             	mov    %esi,-0x10(%rbp)
    9c3a:	8b 45 f4             	mov    -0xc(%rbp),%eax
    9c3d:	89 45 f8             	mov    %eax,-0x8(%rbp)
    9c40:	8b 45 f0             	mov    -0x10(%rbp),%eax
    9c43:	89 45 fc             	mov    %eax,-0x4(%rbp)
    9c46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c4a:	5d                   	pop    %rbp
    9c4b:	c3                   	ret
    9c4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000009c50 <slipL_regLib>:
    9c50:	55                   	push   %rbp
    9c51:	48 89 e5             	mov    %rsp,%rbp
    9c54:	48 83 ec 70          	sub    $0x70,%rsp
    9c58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9c5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9c60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9c64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c68:	48 8b 78 48          	mov    0x48(%rax),%rdi
    9c6c:	e8 af 31 00 00       	call   ce20 <slipD_str>
    9c71:	48 8b 40 08          	mov    0x8(%rax),%rax
    9c75:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9c79:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    9c7d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    9c81:	ff d0                	call   *%rax
    9c83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    9c87:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9c8b:	31 f6                	xor    %esi,%esi
    9c8d:	e8 2e 18 00 00       	call   b4c0 <slipC_getEnv>
    9c92:	48 89 c7             	mov    %rax,%rdi
    9c95:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9c99:	e8 b2 00 00 00       	call   9d50 <getOrInsertHashTable>
    9c9e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    9ca2:	89 55 d8             	mov    %edx,-0x28(%rbp)
    9ca5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9ca9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    9cad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9cb1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9cb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9cb9:	48 83 38 00          	cmpq   $0x0,(%rax)
    9cbd:	0f 84 7d 00 00 00    	je     9d40 <slipL_regLib+0xf0>
    9cc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9cc7:	48 8b 00             	mov    (%rax),%rax
    9cca:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    9cce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9cd2:	48 8b 40 08          	mov    0x8(%rax),%rax
    9cd6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    9cda:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    9cde:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    9ce2:	e8 79 45 00 00       	call   e260 <slipV_setValueCFunc>
    9ce7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ceb:	48 8b 78 48          	mov    0x48(%rax),%rdi
    9cef:	e8 2c 31 00 00       	call   ce20 <slipD_str>
    9cf4:	48 8b 40 10          	mov    0x10(%rax),%rax
    9cf8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9cfc:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    9d00:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    9d04:	ff d0                	call   *%rax
    9d06:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    9d0a:	89 55 98             	mov    %edx,-0x68(%rbp)
    9d0d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9d11:	e8 8a 0c 00 00       	call   a9a0 <slipM_getMeta>
    9d16:	48 8b 40 20          	mov    0x20(%rax),%rax
    9d1a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9d1e:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    9d22:	8b 55 98             	mov    -0x68(%rbp),%edx
    9d25:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    9d29:	44 8b 45 a8          	mov    -0x58(%rbp),%r8d
    9d2d:	ff d0                	call   *%rax
    9d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d33:	48 83 c0 10          	add    $0x10,%rax
    9d37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9d3b:	e9 75 ff ff ff       	jmp    9cb5 <slipL_regLib+0x65>
    9d40:	31 c0                	xor    %eax,%eax
    9d42:	48 83 c4 70          	add    $0x70,%rsp
    9d46:	5d                   	pop    %rbp
    9d47:	c3                   	ret
    9d48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    9d4f:	00 

0000000000009d50 <getOrInsertHashTable>:
    9d50:	55                   	push   %rbp
    9d51:	48 89 e5             	mov    %rsp,%rbp
    9d54:	48 83 ec 40          	sub    $0x40,%rsp
    9d58:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d5c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9d60:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9d64:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    9d68:	e8 73 43 00 00       	call   e0e0 <slipV_setValueString>
    9d6d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9d71:	e8 2a 0c 00 00       	call   a9a0 <slipM_getMeta>
    9d76:	48 8b 40 28          	mov    0x28(%rax),%rax
    9d7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9d7e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    9d82:	8b 55 d8             	mov    -0x28(%rbp),%edx
    9d85:	ff d0                	call   *%rax
    9d87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    9d8b:	89 55 f8             	mov    %edx,-0x8(%rbp)
    9d8e:	81 7d f8 00 02 00 00 	cmpl   $0x200,-0x8(%rbp)
    9d95:	0f 85 05 00 00 00    	jne    9da0 <getOrInsertHashTable+0x50>
    9d9b:	e9 56 00 00 00       	jmp    9df6 <getOrInsertHashTable+0xa6>
    9da0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9da4:	e8 f7 0b 00 00       	call   a9a0 <slipM_getMeta>
    9da9:	48 8b 40 08          	mov    0x8(%rax),%rax
    9dad:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9db1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9db5:	e8 06 0c 00 00       	call   a9c0 <slipM_getGlobal>
    9dba:	48 89 c7             	mov    %rax,%rdi
    9dbd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    9dc1:	ff d0                	call   *%rax
    9dc3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    9dc7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    9dcb:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    9dcf:	e8 3c 43 00 00       	call   e110 <slipV_setValueTable>
    9dd4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9dd8:	e8 c3 0b 00 00       	call   a9a0 <slipM_getMeta>
    9ddd:	48 8b 40 20          	mov    0x20(%rax),%rax
    9de1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    9de5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    9de9:	8b 55 d8             	mov    -0x28(%rbp),%edx
    9dec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9df0:	44 8b 45 f8          	mov    -0x8(%rbp),%r8d
    9df4:	ff d0                	call   *%rax
    9df6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9dfa:	8b 55 f8             	mov    -0x8(%rbp),%edx
    9dfd:	48 83 c4 40          	add    $0x40,%rsp
    9e01:	5d                   	pop    %rbp
    9e02:	c3                   	ret
    9e03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9e0a:	00 00 00 
    9e0d:	0f 1f 00             	nopl   (%rax)

0000000000009e10 <slipL_regGlobalCFuncs>:
    9e10:	55                   	push   %rbp
    9e11:	48 89 e5             	mov    %rsp,%rbp
    9e14:	48 83 ec 50          	sub    $0x50,%rsp
    9e18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9e1c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    9e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e24:	48 83 38 00          	cmpq   $0x0,(%rax)
    9e28:	0f 84 a3 00 00 00    	je     9ed1 <slipL_regGlobalCFuncs+0xc1>
    9e2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e32:	48 8b 00             	mov    (%rax),%rax
    9e35:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    9e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e3d:	48 8b 40 08          	mov    0x8(%rax),%rax
    9e41:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9e45:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    9e4a:	0f 85 0c 00 00 00    	jne    9e5c <slipL_regGlobalCFuncs+0x4c>
    9e50:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    9e57:	e9 7c 00 00 00       	jmp    9ed8 <slipL_regGlobalCFuncs+0xc8>
    9e5c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    9e60:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    9e64:	e8 f7 43 00 00       	call   e260 <slipV_setValueCFunc>
    9e69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9e6d:	48 8b 78 48          	mov    0x48(%rax),%rdi
    9e71:	e8 aa 2f 00 00       	call   ce20 <slipD_str>
    9e76:	48 8b 40 10          	mov    0x10(%rax),%rax
    9e7a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    9e7e:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    9e82:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9e86:	ff d0                	call   *%rax
    9e88:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    9e8c:	89 55 c0             	mov    %edx,-0x40(%rbp)
    9e8f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    9e93:	31 f6                	xor    %esi,%esi
    9e95:	e8 26 16 00 00       	call   b4c0 <slipC_getEnv>
    9e9a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    9e9e:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    9ea2:	e8 f9 0a 00 00       	call   a9a0 <slipM_getMeta>
    9ea7:	48 8b 40 20          	mov    0x20(%rax),%rax
    9eab:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    9eaf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    9eb3:	8b 55 c0             	mov    -0x40(%rbp),%edx
    9eb6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    9eba:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
    9ebe:	ff d0                	call   *%rax
    9ec0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ec4:	48 83 c0 10          	add    $0x10,%rax
    9ec8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9ecc:	e9 4f ff ff ff       	jmp    9e20 <slipL_regGlobalCFuncs+0x10>
    9ed1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    9ed8:	8b 45 fc             	mov    -0x4(%rbp),%eax
    9edb:	48 83 c4 50          	add    $0x50,%rsp
    9edf:	5d                   	pop    %rbp
    9ee0:	c3                   	ret
    9ee1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    9ee8:	00 00 00 
    9eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000009ef0 <slipL_regLibMacro>:
    9ef0:	55                   	push   %rbp
    9ef1:	48 89 e5             	mov    %rsp,%rbp
    9ef4:	48 83 ec 70          	sub    $0x70,%rsp
    9ef8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9efc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    9f00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    9f04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f08:	48 8b 78 48          	mov    0x48(%rax),%rdi
    9f0c:	e8 0f 2f 00 00       	call   ce20 <slipD_str>
    9f11:	48 8b 40 08          	mov    0x8(%rax),%rax
    9f15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9f19:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    9f1d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    9f21:	ff d0                	call   *%rax
    9f23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    9f27:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    9f2b:	31 f6                	xor    %esi,%esi
    9f2d:	e8 8e 15 00 00       	call   b4c0 <slipC_getEnv>
    9f32:	48 89 c7             	mov    %rax,%rdi
    9f35:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9f39:	e8 12 fe ff ff       	call   9d50 <getOrInsertHashTable>
    9f3e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    9f42:	89 55 d8             	mov    %edx,-0x28(%rbp)
    9f45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9f49:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    9f4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f51:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f59:	48 83 38 00          	cmpq   $0x0,(%rax)
    9f5d:	0f 84 7d 00 00 00    	je     9fe0 <slipL_regLibMacro+0xf0>
    9f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f67:	48 8b 00             	mov    (%rax),%rax
    9f6a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    9f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f72:	48 8b 40 08          	mov    0x8(%rax),%rax
    9f76:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    9f7a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    9f7e:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    9f82:	e8 09 43 00 00       	call   e290 <slipV_setValueCMacro>
    9f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f8b:	48 8b 78 48          	mov    0x48(%rax),%rdi
    9f8f:	e8 8c 2e 00 00       	call   ce20 <slipD_str>
    9f94:	48 8b 40 10          	mov    0x10(%rax),%rax
    9f98:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9f9c:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    9fa0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    9fa4:	ff d0                	call   *%rax
    9fa6:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    9faa:	89 55 98             	mov    %edx,-0x68(%rbp)
    9fad:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9fb1:	e8 ea 09 00 00       	call   a9a0 <slipM_getMeta>
    9fb6:	48 8b 40 20          	mov    0x20(%rax),%rax
    9fba:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9fbe:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    9fc2:	8b 55 98             	mov    -0x68(%rbp),%edx
    9fc5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    9fc9:	44 8b 45 a8          	mov    -0x58(%rbp),%r8d
    9fcd:	ff d0                	call   *%rax
    9fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fd3:	48 83 c0 10          	add    $0x10,%rax
    9fd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9fdb:	e9 75 ff ff ff       	jmp    9f55 <slipL_regLibMacro+0x65>
    9fe0:	31 c0                	xor    %eax,%eax
    9fe2:	48 83 c4 70          	add    $0x70,%rsp
    9fe6:	5d                   	pop    %rbp
    9fe7:	c3                   	ret
    9fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    9fef:	00 

0000000000009ff0 <slipL_regGlobalCMacros>:
    9ff0:	55                   	push   %rbp
    9ff1:	48 89 e5             	mov    %rsp,%rbp
    9ff4:	48 83 ec 50          	sub    $0x50,%rsp
    9ff8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    9ffc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a000:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a004:	48 83 38 00          	cmpq   $0x0,(%rax)
    a008:	0f 84 a3 00 00 00    	je     a0b1 <slipL_regGlobalCMacros+0xc1>
    a00e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a012:	48 8b 00             	mov    (%rax),%rax
    a015:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a019:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a01d:	48 8b 40 08          	mov    0x8(%rax),%rax
    a021:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a025:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    a02a:	0f 85 0c 00 00 00    	jne    a03c <slipL_regGlobalCMacros+0x4c>
    a030:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    a037:	e9 7c 00 00 00       	jmp    a0b8 <slipL_regGlobalCMacros+0xc8>
    a03c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    a040:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    a044:	e8 47 42 00 00       	call   e290 <slipV_setValueCMacro>
    a049:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a04d:	48 8b 78 48          	mov    0x48(%rax),%rdi
    a051:	e8 ca 2d 00 00       	call   ce20 <slipD_str>
    a056:	48 8b 40 10          	mov    0x10(%rax),%rax
    a05a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a05e:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    a062:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    a066:	ff d0                	call   *%rax
    a068:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    a06c:	89 55 c0             	mov    %edx,-0x40(%rbp)
    a06f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a073:	31 f6                	xor    %esi,%esi
    a075:	e8 46 14 00 00       	call   b4c0 <slipC_getEnv>
    a07a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    a07e:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    a082:	e8 19 09 00 00       	call   a9a0 <slipM_getMeta>
    a087:	48 8b 40 20          	mov    0x20(%rax),%rax
    a08b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    a08f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    a093:	8b 55 c0             	mov    -0x40(%rbp),%edx
    a096:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a09a:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
    a09e:	ff d0                	call   *%rax
    a0a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a0a4:	48 83 c0 10          	add    $0x10,%rax
    a0a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a0ac:	e9 4f ff ff ff       	jmp    a000 <slipL_regGlobalCMacros+0x10>
    a0b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    a0b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
    a0bb:	48 83 c4 50          	add    $0x50,%rsp
    a0bf:	5d                   	pop    %rbp
    a0c0:	c3                   	ret
    a0c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a0c8:	00 00 00 
    a0cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a0d0 <slipL_callCFunction>:
    a0d0:	55                   	push   %rbp
    a0d1:	48 89 e5             	mov    %rsp,%rbp
    a0d4:	48 83 ec 20          	sub    $0x20,%rsp
    a0d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a0dc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a0e0:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    a0e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a0e7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a0eb:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    a0ee:	ff d0                	call   *%rax
    a0f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a0f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0f8:	48 83 c4 20          	add    $0x20,%rsp
    a0fc:	5d                   	pop    %rbp
    a0fd:	c3                   	ret
    a0fe:	66 90                	xchg   %ax,%ax

000000000000a100 <slipL_callCMacro>:
    a100:	55                   	push   %rbp
    a101:	48 89 e5             	mov    %rsp,%rbp
    a104:	48 83 ec 20          	sub    $0x20,%rsp
    a108:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a10c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a110:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    a113:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a117:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a11b:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    a11e:	ff d0                	call   *%rax
    a120:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a128:	48 83 c4 20          	add    $0x20,%rsp
    a12c:	5d                   	pop    %rbp
    a12d:	c3                   	ret
    a12e:	66 90                	xchg   %ax,%ax

000000000000a130 <slipM_malloc>:
    a130:	55                   	push   %rbp
    a131:	48 89 e5             	mov    %rsp,%rbp
    a134:	48 83 ec 10          	sub    $0x10,%rsp
    a138:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a13c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a140:	e8 4b 90 ff ff       	call   3190 <malloc@plt>
    a145:	48 83 c4 10          	add    $0x10,%rsp
    a149:	5d                   	pop    %rbp
    a14a:	c3                   	ret
    a14b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a150 <slipM_aligned_alloc>:
    a150:	55                   	push   %rbp
    a151:	48 89 e5             	mov    %rsp,%rbp
    a154:	48 83 ec 10          	sub    $0x10,%rsp
    a158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a15c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a160:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a164:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a168:	e8 a3 90 ff ff       	call   3210 <aligned_alloc@plt>
    a16d:	48 83 c4 10          	add    $0x10,%rsp
    a171:	5d                   	pop    %rbp
    a172:	c3                   	ret
    a173:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a17a:	00 00 00 
    a17d:	0f 1f 00             	nopl   (%rax)

000000000000a180 <slipM_realloc>:
    a180:	55                   	push   %rbp
    a181:	48 89 e5             	mov    %rsp,%rbp
    a184:	48 83 ec 10          	sub    $0x10,%rsp
    a188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a18c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a190:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a194:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a198:	e8 13 90 ff ff       	call   31b0 <realloc@plt>
    a19d:	48 83 c4 10          	add    $0x10,%rsp
    a1a1:	5d                   	pop    %rbp
    a1a2:	c3                   	ret
    a1a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a1aa:	00 00 00 
    a1ad:	0f 1f 00             	nopl   (%rax)

000000000000a1b0 <slipM_free>:
    a1b0:	55                   	push   %rbp
    a1b1:	48 89 e5             	mov    %rsp,%rbp
    a1b4:	48 83 ec 10          	sub    $0x10,%rsp
    a1b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a1c0:	e8 6b 8e ff ff       	call   3030 <free@plt>
    a1c5:	48 83 c4 10          	add    $0x10,%rsp
    a1c9:	5d                   	pop    %rbp
    a1ca:	c3                   	ret
    a1cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a1d0 <slipM_aligned_free>:
    a1d0:	55                   	push   %rbp
    a1d1:	48 89 e5             	mov    %rsp,%rbp
    a1d4:	48 83 ec 10          	sub    $0x10,%rsp
    a1d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a1e0:	e8 4b 8e ff ff       	call   3030 <free@plt>
    a1e5:	48 83 c4 10          	add    $0x10,%rsp
    a1e9:	5d                   	pop    %rbp
    a1ea:	c3                   	ret
    a1eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a1f0 <slipM_pool_create>:
    a1f0:	55                   	push   %rbp
    a1f1:	48 89 e5             	mov    %rsp,%rbp
    a1f4:	48 83 ec 30          	sub    $0x30,%rsp
    a1f8:	89 7d fc             	mov    %edi,-0x4(%rbp)
    a1fb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a1ff:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    a203:	bf 30 00 00 00       	mov    $0x30,%edi
    a208:	e8 23 ff ff ff       	call   a130 <slipM_malloc>
    a20d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a211:	8b 45 fc             	mov    -0x4(%rbp),%eax
    a214:	89 c1                	mov    %eax,%ecx
    a216:	b8 00 10 00 00       	mov    $0x1000,%eax
    a21b:	31 d2                	xor    %edx,%edx
    a21d:	48 f7 f1             	div    %rcx
    a220:	89 45 dc             	mov    %eax,-0x24(%rbp)
    a223:	8b 45 dc             	mov    -0x24(%rbp),%eax
    a226:	83 c0 1f             	add    $0x1f,%eax
    a229:	c1 e8 05             	shr    $0x5,%eax
    a22c:	c1 e0 02             	shl    $0x2,%eax
    a22f:	89 c0                	mov    %eax,%eax
    a231:	48 83 c0 20          	add    $0x20,%rax
    a235:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    a238:	0f af 4d fc          	imul   -0x4(%rbp),%ecx
    a23c:	89 c9                	mov    %ecx,%ecx
    a23e:	48 01 c8             	add    %rcx,%rax
    a241:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
    a247:	0f 86 0e 00 00 00    	jbe    a25b <slipM_pool_create+0x6b>
    a24d:	8b 45 dc             	mov    -0x24(%rbp),%eax
    a250:	83 c0 ff             	add    $0xffffffff,%eax
    a253:	89 45 dc             	mov    %eax,-0x24(%rbp)
    a256:	e9 c8 ff ff ff       	jmp    a223 <slipM_pool_create+0x33>
    a25b:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    a25e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a262:	89 48 04             	mov    %ecx,0x4(%rax)
    a265:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    a268:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a26c:	89 08                	mov    %ecx,(%rax)
    a26e:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    a271:	83 c1 1f             	add    $0x1f,%ecx
    a274:	c1 e9 05             	shr    $0x5,%ecx
    a277:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a27b:	89 48 08             	mov    %ecx,0x8(%rax)
    a27e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a282:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    a289:	00 
    a28a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a28e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    a295:	00 
    a296:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a29a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a29e:	48 89 48 20          	mov    %rcx,0x20(%rax)
    a2a2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a2a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a2aa:	48 89 48 28          	mov    %rcx,0x28(%rax)
    a2ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a2b2:	48 83 c4 30          	add    $0x30,%rsp
    a2b6:	5d                   	pop    %rbp
    a2b7:	c3                   	ret
    a2b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    a2bf:	00 

000000000000a2c0 <slipM_pool_get_meta>:
    a2c0:	55                   	push   %rbp
    a2c1:	48 89 e5             	mov    %rsp,%rbp
    a2c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a2c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2cc:	48 8b 40 28          	mov    0x28(%rax),%rax
    a2d0:	5d                   	pop    %rbp
    a2d1:	c3                   	ret
    a2d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a2d9:	00 00 00 
    a2dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000a2e0 <slipM_pool_alloc>:
    a2e0:	55                   	push   %rbp
    a2e1:	48 89 e5             	mov    %rsp,%rbp
    a2e4:	48 83 ec 20          	sub    $0x20,%rsp
    a2e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a2ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2f0:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
    a2f5:	0f 85 19 00 00 00    	jne    a314 <slipM_pool_alloc+0x34>
    a2fb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a2ff:	e8 dc 00 00 00       	call   a3e0 <createPoolNode>
    a304:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a308:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a30c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a310:	48 89 48 18          	mov    %rcx,0x18(%rax)
    a314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a318:	48 8b 40 18          	mov    0x18(%rax),%rax
    a31c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a320:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a324:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    a328:	e8 83 01 00 00       	call   a4b0 <getFreeElement>
    a32d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    a330:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%rbp)
    a334:	0f 84 05 00 00 00    	je     a33f <slipM_pool_alloc+0x5f>
    a33a:	e9 1f 00 00 00       	jmp    a35e <slipM_pool_alloc+0x7e>
    a33f:	48 8d 3d ce e4 00 00 	lea    0xe4ce(%rip),%rdi        # 18814 <getFreeElement.b+0x14>
    a346:	48 8d 35 cf e4 00 00 	lea    0xe4cf(%rip),%rsi        # 1881c <getFreeElement.b+0x1c>
    a34d:	ba ac 00 00 00       	mov    $0xac,%edx
    a352:	48 8d 0d de e4 00 00 	lea    0xe4de(%rip),%rcx        # 18837 <getFreeElement.b+0x37>
    a359:	e8 92 8d ff ff       	call   30f0 <__assert_fail@plt>
    a35e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a362:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    a366:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    a369:	e8 52 02 00 00       	call   a5c0 <setNodeAlloc>
    a36e:	a8 01                	test   $0x1,%al
    a370:	0f 85 05 00 00 00    	jne    a37b <slipM_pool_alloc+0x9b>
    a376:	e9 2a 00 00 00       	jmp    a3a5 <slipM_pool_alloc+0xc5>
    a37b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a37f:	48 8b 08             	mov    (%rax),%rcx
    a382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a386:	48 89 48 18          	mov    %rcx,0x18(%rax)
    a38a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a38e:	48 8b 48 10          	mov    0x10(%rax),%rcx
    a392:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a396:	48 89 08             	mov    %rcx,(%rax)
    a399:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a39d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3a1:	48 89 48 10          	mov    %rcx,0x10(%rax)
    a3a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3a9:	48 83 c0 20          	add    $0x20,%rax
    a3ad:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a3b1:	8b 49 08             	mov    0x8(%rcx),%ecx
    a3b4:	48 c1 e1 02          	shl    $0x2,%rcx
    a3b8:	48 01 c8             	add    %rcx,%rax
    a3bb:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a3be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a3c2:	0f af 4a 04          	imul   0x4(%rdx),%ecx
    a3c6:	89 c9                	mov    %ecx,%ecx
    a3c8:	48 01 c8             	add    %rcx,%rax
    a3cb:	48 83 c4 20          	add    $0x20,%rsp
    a3cf:	5d                   	pop    %rbp
    a3d0:	c3                   	ret
    a3d1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a3d8:	00 00 00 
    a3db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a3e0 <createPoolNode>:
    a3e0:	55                   	push   %rbp
    a3e1:	48 89 e5             	mov    %rsp,%rbp
    a3e4:	48 83 ec 20          	sub    $0x20,%rsp
    a3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a3ec:	be 00 10 00 00       	mov    $0x1000,%esi
    a3f1:	48 89 f7             	mov    %rsi,%rdi
    a3f4:	e8 57 fd ff ff       	call   a150 <slipM_aligned_alloc>
    a3f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a3fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a401:	48 25 ff 0f 00 00    	and    $0xfff,%rax
    a407:	48 83 f8 00          	cmp    $0x0,%rax
    a40b:	0f 85 05 00 00 00    	jne    a416 <createPoolNode+0x36>
    a411:	e9 1f 00 00 00       	jmp    a435 <createPoolNode+0x55>
    a416:	48 8d 3d 40 e4 00 00 	lea    0xe440(%rip),%rdi        # 1885d <getFreeElement.b+0x5d>
    a41d:	48 8d 35 f8 e3 00 00 	lea    0xe3f8(%rip),%rsi        # 1881c <getFreeElement.b+0x1c>
    a424:	ba 47 00 00 00       	mov    $0x47,%edx
    a429:	48 8d 0d 50 e4 00 00 	lea    0xe450(%rip),%rcx        # 18880 <getFreeElement.b+0x80>
    a430:	e8 bb 8c ff ff       	call   30f0 <__assert_fail@plt>
    a435:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a439:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    a440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a444:	48 8b 48 20          	mov    0x20(%rax),%rcx
    a448:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a44c:	48 89 48 08          	mov    %rcx,0x8(%rax)
    a450:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a454:	48 8b 48 28          	mov    0x28(%rax),%rcx
    a458:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a45c:	48 89 48 10          	mov    %rcx,0x10(%rax)
    a460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a464:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
    a46b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    a472:	8b 45 ec             	mov    -0x14(%rbp),%eax
    a475:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a479:	3b 41 08             	cmp    0x8(%rcx),%eax
    a47c:	0f 83 1d 00 00 00    	jae    a49f <createPoolNode+0xbf>
    a482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a486:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    a489:	c7 44 88 1c 00 00 00 	movl   $0x0,0x1c(%rax,%rcx,4)
    a490:	00 
    a491:	8b 45 ec             	mov    -0x14(%rbp),%eax
    a494:	83 c0 01             	add    $0x1,%eax
    a497:	89 45 ec             	mov    %eax,-0x14(%rbp)
    a49a:	e9 d3 ff ff ff       	jmp    a472 <createPoolNode+0x92>
    a49f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a4a3:	48 83 c4 20          	add    $0x20,%rsp
    a4a7:	5d                   	pop    %rbp
    a4a8:	c3                   	ret
    a4a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000a4b0 <getFreeElement>:
    a4b0:	55                   	push   %rbp
    a4b1:	48 89 e5             	mov    %rsp,%rbp
    a4b4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a4b8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a4bc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
    a4c3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    a4c6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a4ca:	3b 41 08             	cmp    0x8(%rcx),%eax
    a4cd:	0f 83 d6 00 00 00    	jae    a5a9 <getFreeElement+0xf9>
    a4d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a4d7:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a4da:	8b 44 88 1c          	mov    0x1c(%rax,%rcx,4),%eax
    a4de:	83 c0 01             	add    $0x1,%eax
    a4e1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a4e5:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    a4e8:	8b 4c 91 1c          	mov    0x1c(%rcx,%rdx,4),%ecx
    a4ec:	83 f1 ff             	xor    $0xffffffff,%ecx
    a4ef:	21 c8                	and    %ecx,%eax
    a4f1:	89 45 e0             	mov    %eax,-0x20(%rbp)
    a4f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    a4f8:	0f 85 05 00 00 00    	jne    a503 <getFreeElement+0x53>
    a4fe:	e9 98 00 00 00       	jmp    a59b <getFreeElement+0xeb>
    a503:	8b 45 e0             	mov    -0x20(%rbp),%eax
    a506:	89 45 dc             	mov    %eax,-0x24(%rbp)
    a509:	8b 45 dc             	mov    -0x24(%rbp),%eax
    a50c:	23 05 ee e2 00 00    	and    0xe2ee(%rip),%eax        # 18800 <getFreeElement.b>
    a512:	83 f8 00             	cmp    $0x0,%eax
    a515:	0f 95 c0             	setne  %al
    a518:	24 01                	and    $0x1,%al
    a51a:	0f b6 c0             	movzbl %al,%eax
    a51d:	89 45 d8             	mov    %eax,-0x28(%rbp)
    a520:	c7 45 d4 04 00 00 00 	movl   $0x4,-0x2c(%rbp)
    a527:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    a52b:	0f 86 36 00 00 00    	jbe    a567 <getFreeElement+0xb7>
    a531:	8b 45 dc             	mov    -0x24(%rbp),%eax
    a534:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    a537:	89 ca                	mov    %ecx,%edx
    a539:	48 8d 0d c0 e2 00 00 	lea    0xe2c0(%rip),%rcx        # 18800 <getFreeElement.b>
    a540:	23 04 91             	and    (%rcx,%rdx,4),%eax
    a543:	83 f8 00             	cmp    $0x0,%eax
    a546:	0f 95 c0             	setne  %al
    a549:	24 01                	and    $0x1,%al
    a54b:	0f b6 c0             	movzbl %al,%eax
    a54e:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    a551:	d3 e0                	shl    %cl,%eax
    a553:	0b 45 d8             	or     -0x28(%rbp),%eax
    a556:	89 45 d8             	mov    %eax,-0x28(%rbp)
    a559:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    a55c:	83 c0 ff             	add    $0xffffffff,%eax
    a55f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    a562:	e9 c0 ff ff ff       	jmp    a527 <getFreeElement+0x77>
    a567:	8b 45 d8             	mov    -0x28(%rbp),%eax
    a56a:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a56d:	c1 e1 05             	shl    $0x5,%ecx
    a570:	01 c8                	add    %ecx,%eax
    a572:	89 45 d0             	mov    %eax,-0x30(%rbp)
    a575:	8b 45 d0             	mov    -0x30(%rbp),%eax
    a578:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a57c:	3b 01                	cmp    (%rcx),%eax
    a57e:	0f 82 0c 00 00 00    	jb     a590 <getFreeElement+0xe0>
    a584:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    a58b:	e9 20 00 00 00       	jmp    a5b0 <getFreeElement+0x100>
    a590:	8b 45 d0             	mov    -0x30(%rbp),%eax
    a593:	89 45 fc             	mov    %eax,-0x4(%rbp)
    a596:	e9 15 00 00 00       	jmp    a5b0 <getFreeElement+0x100>
    a59b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    a59e:	83 c0 01             	add    $0x1,%eax
    a5a1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    a5a4:	e9 1a ff ff ff       	jmp    a4c3 <getFreeElement+0x13>
    a5a9:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    a5b0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    a5b3:	5d                   	pop    %rbp
    a5b4:	c3                   	ret
    a5b5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a5bc:	00 00 00 
    a5bf:	90                   	nop

000000000000a5c0 <setNodeAlloc>:
    a5c0:	55                   	push   %rbp
    a5c1:	48 89 e5             	mov    %rsp,%rbp
    a5c4:	48 83 ec 20          	sub    $0x20,%rsp
    a5c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a5cc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a5d0:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    a5d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a5d7:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a5da:	c1 e9 05             	shr    $0x5,%ecx
    a5dd:	89 c9                	mov    %ecx,%ecx
    a5df:	8b 44 88 1c          	mov    0x1c(%rax,%rcx,4),%eax
    a5e3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a5e6:	83 e1 1f             	and    $0x1f,%ecx
    a5e9:	ba 01 00 00 00       	mov    $0x1,%edx
    a5ee:	d3 e2                	shl    %cl,%edx
    a5f0:	89 d1                	mov    %edx,%ecx
    a5f2:	21 c8                	and    %ecx,%eax
    a5f4:	83 f8 00             	cmp    $0x0,%eax
    a5f7:	0f 85 05 00 00 00    	jne    a602 <setNodeAlloc+0x42>
    a5fd:	e9 1f 00 00 00       	jmp    a621 <setNodeAlloc+0x61>
    a602:	48 8d 3d a0 e2 00 00 	lea    0xe2a0(%rip),%rdi        # 188a9 <getFreeElement.b+0xa9>
    a609:	48 8d 35 0c e2 00 00 	lea    0xe20c(%rip),%rsi        # 1881c <getFreeElement.b+0x1c>
    a610:	ba 8c 00 00 00       	mov    $0x8c,%edx
    a615:	48 8d 0d bb e2 00 00 	lea    0xe2bb(%rip),%rcx        # 188d7 <getFreeElement.b+0xd7>
    a61c:	e8 cf 8a ff ff       	call   30f0 <__assert_fail@plt>
    a621:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a624:	83 e1 1f             	and    $0x1f,%ecx
    a627:	ba 01 00 00 00       	mov    $0x1,%edx
    a62c:	d3 e2                	shl    %cl,%edx
    a62e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a632:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a635:	c1 e9 05             	shr    $0x5,%ecx
    a638:	89 c9                	mov    %ecx,%ecx
    a63a:	0b 54 88 1c          	or     0x1c(%rax,%rcx,4),%edx
    a63e:	89 54 88 1c          	mov    %edx,0x1c(%rax,%rcx,4)
    a642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a646:	8b 48 18             	mov    0x18(%rax),%ecx
    a649:	83 c1 01             	add    $0x1,%ecx
    a64c:	89 48 18             	mov    %ecx,0x18(%rax)
    a64f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a653:	8b 40 18             	mov    0x18(%rax),%eax
    a656:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a65a:	3b 01                	cmp    (%rcx),%eax
    a65c:	0f 85 09 00 00 00    	jne    a66b <setNodeAlloc+0xab>
    a662:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
    a666:	e9 04 00 00 00       	jmp    a66f <setNodeAlloc+0xaf>
    a66b:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    a66f:	8a 45 ff             	mov    -0x1(%rbp),%al
    a672:	24 01                	and    $0x1,%al
    a674:	0f b6 c0             	movzbl %al,%eax
    a677:	48 83 c4 20          	add    $0x20,%rsp
    a67b:	5d                   	pop    %rbp
    a67c:	c3                   	ret
    a67d:	0f 1f 00             	nopl   (%rax)

000000000000a680 <slipM_pool_free>:
    a680:	55                   	push   %rbp
    a681:	48 89 e5             	mov    %rsp,%rbp
    a684:	48 83 ec 40          	sub    $0x40,%rsp
    a688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a68c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a690:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a695:	0f 85 05 00 00 00    	jne    a6a0 <slipM_pool_free+0x20>
    a69b:	e9 c7 01 00 00       	jmp    a867 <slipM_pool_free+0x1e7>
    a6a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6a4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    a6aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a6ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a6b6:	48 83 c1 1c          	add    $0x1c,%rcx
    a6ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a6be:	8b 52 08             	mov    0x8(%rdx),%edx
    a6c1:	48 c1 e2 02          	shl    $0x2,%rdx
    a6c5:	48 01 d1             	add    %rdx,%rcx
    a6c8:	48 29 c8             	sub    %rcx,%rax
    a6cb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a6cf:	8b 49 04             	mov    0x4(%rcx),%ecx
    a6d2:	31 d2                	xor    %edx,%edx
    a6d4:	48 f7 f1             	div    %rcx
    a6d7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    a6da:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a6de:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    a6e2:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    a6e5:	e8 86 01 00 00       	call   a870 <setNodeFree>
    a6ea:	a8 01                	test   $0x1,%al
    a6ec:	0f 85 05 00 00 00    	jne    a6f7 <slipM_pool_free+0x77>
    a6f2:	e9 78 00 00 00       	jmp    a76f <slipM_pool_free+0xef>
    a6f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6fb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a6ff:	48 3b 41 18          	cmp    0x18(%rcx),%rax
    a703:	0f 85 1d 00 00 00    	jne    a726 <slipM_pool_free+0xa6>
    a709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a70d:	48 8b 08             	mov    (%rax),%rcx
    a710:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a714:	48 89 48 18          	mov    %rcx,0x18(%rax)
    a718:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a71c:	e8 8f fa ff ff       	call   a1b0 <slipM_free>
    a721:	e9 44 00 00 00       	jmp    a76a <slipM_pool_free+0xea>
    a726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a72a:	48 8b 40 18          	mov    0x18(%rax),%rax
    a72e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a732:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a736:	48 8b 00             	mov    (%rax),%rax
    a739:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a73d:	0f 84 10 00 00 00    	je     a753 <slipM_pool_free+0xd3>
    a743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a747:	48 8b 00             	mov    (%rax),%rax
    a74a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a74e:	e9 df ff ff ff       	jmp    a732 <slipM_pool_free+0xb2>
    a753:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a757:	48 8b 08             	mov    (%rax),%rcx
    a75a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a75e:	48 89 08             	mov    %rcx,(%rax)
    a761:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    a765:	e8 46 fa ff ff       	call   a1b0 <slipM_free>
    a76a:	e9 00 00 00 00       	jmp    a76f <slipM_pool_free+0xef>
    a76f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a773:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a777:	48 3b 41 18          	cmp    0x18(%rcx),%rax
    a77b:	0f 84 e6 00 00 00    	je     a867 <slipM_pool_free+0x1e7>
    a781:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a785:	8b 40 18             	mov    0x18(%rax),%eax
    a788:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a78c:	6b 09 03             	imul   $0x3,(%rcx),%ecx
    a78f:	c1 e9 02             	shr    $0x2,%ecx
    a792:	39 c8                	cmp    %ecx,%eax
    a794:	0f 85 cd 00 00 00    	jne    a867 <slipM_pool_free+0x1e7>
    a79a:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
    a79e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7a2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a7a6:	48 3b 41 10          	cmp    0x10(%rcx),%rax
    a7aa:	0f 85 18 00 00 00    	jne    a7c8 <slipM_pool_free+0x148>
    a7b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7b4:	48 8b 08             	mov    (%rax),%rcx
    a7b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7bb:	48 89 48 10          	mov    %rcx,0x10(%rax)
    a7bf:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    a7c3:	e9 75 00 00 00       	jmp    a83d <slipM_pool_free+0x1bd>
    a7c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7cc:	48 8b 40 10          	mov    0x10(%rax),%rax
    a7d0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a7d4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    a7d8:	31 c0                	xor    %eax,%eax
    a7da:	48 83 39 00          	cmpq   $0x0,(%rcx)
    a7de:	88 45 c7             	mov    %al,-0x39(%rbp)
    a7e1:	0f 84 11 00 00 00    	je     a7f8 <slipM_pool_free+0x178>
    a7e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a7eb:	48 8b 00             	mov    (%rax),%rax
    a7ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a7f2:	0f 95 c0             	setne  %al
    a7f5:	88 45 c7             	mov    %al,-0x39(%rbp)
    a7f8:	8a 45 c7             	mov    -0x39(%rbp),%al
    a7fb:	a8 01                	test   $0x1,%al
    a7fd:	0f 85 05 00 00 00    	jne    a808 <slipM_pool_free+0x188>
    a803:	e9 10 00 00 00       	jmp    a818 <slipM_pool_free+0x198>
    a808:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a80c:	48 8b 00             	mov    (%rax),%rax
    a80f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a813:	e9 bc ff ff ff       	jmp    a7d4 <slipM_pool_free+0x154>
    a818:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a81c:	48 83 38 00          	cmpq   $0x0,(%rax)
    a820:	0f 84 12 00 00 00    	je     a838 <slipM_pool_free+0x1b8>
    a826:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a82a:	48 8b 08             	mov    (%rax),%rcx
    a82d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a831:	48 89 08             	mov    %rcx,(%rax)
    a834:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
    a838:	e9 00 00 00 00       	jmp    a83d <slipM_pool_free+0x1bd>
    a83d:	f6 45 d7 01          	testb  $0x1,-0x29(%rbp)
    a841:	0f 84 1b 00 00 00    	je     a862 <slipM_pool_free+0x1e2>
    a847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a84b:	48 8b 48 18          	mov    0x18(%rax),%rcx
    a84f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a853:	48 89 08             	mov    %rcx,(%rax)
    a856:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a85a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a85e:	48 89 48 18          	mov    %rcx,0x18(%rax)
    a862:	e9 00 00 00 00       	jmp    a867 <slipM_pool_free+0x1e7>
    a867:	48 83 c4 40          	add    $0x40,%rsp
    a86b:	5d                   	pop    %rbp
    a86c:	c3                   	ret
    a86d:	0f 1f 00             	nopl   (%rax)

000000000000a870 <setNodeFree>:
    a870:	55                   	push   %rbp
    a871:	48 89 e5             	mov    %rsp,%rbp
    a874:	48 83 ec 20          	sub    $0x20,%rsp
    a878:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    a87c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    a880:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    a883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a887:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a88a:	c1 e9 05             	shr    $0x5,%ecx
    a88d:	89 c9                	mov    %ecx,%ecx
    a88f:	8b 44 88 1c          	mov    0x1c(%rax,%rcx,4),%eax
    a893:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a896:	83 e1 1f             	and    $0x1f,%ecx
    a899:	ba 01 00 00 00       	mov    $0x1,%edx
    a89e:	d3 e2                	shl    %cl,%edx
    a8a0:	89 d1                	mov    %edx,%ecx
    a8a2:	21 c8                	and    %ecx,%eax
    a8a4:	83 f8 00             	cmp    $0x0,%eax
    a8a7:	0f 84 05 00 00 00    	je     a8b2 <setNodeFree+0x42>
    a8ad:	e9 1f 00 00 00       	jmp    a8d1 <setNodeFree+0x61>
    a8b2:	48 8d 3d 5b e0 00 00 	lea    0xe05b(%rip),%rdi        # 18914 <getFreeElement.b+0x114>
    a8b9:	48 8d 35 5c df 00 00 	lea    0xdf5c(%rip),%rsi        # 1881c <getFreeElement.b+0x1c>
    a8c0:	ba 9a 00 00 00       	mov    $0x9a,%edx
    a8c5:	48 8d 0d 76 e0 00 00 	lea    0xe076(%rip),%rcx        # 18942 <getFreeElement.b+0x142>
    a8cc:	e8 1f 88 ff ff       	call   30f0 <__assert_fail@plt>
    a8d1:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a8d4:	83 e1 1f             	and    $0x1f,%ecx
    a8d7:	ba 01 00 00 00       	mov    $0x1,%edx
    a8dc:	d3 e2                	shl    %cl,%edx
    a8de:	83 f2 ff             	xor    $0xffffffff,%edx
    a8e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8e5:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    a8e8:	c1 e9 05             	shr    $0x5,%ecx
    a8eb:	89 c9                	mov    %ecx,%ecx
    a8ed:	23 54 88 1c          	and    0x1c(%rax,%rcx,4),%edx
    a8f1:	89 54 88 1c          	mov    %edx,0x1c(%rax,%rcx,4)
    a8f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8f9:	8b 48 18             	mov    0x18(%rax),%ecx
    a8fc:	83 c1 ff             	add    $0xffffffff,%ecx
    a8ff:	89 48 18             	mov    %ecx,0x18(%rax)
    a902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a906:	83 78 18 00          	cmpl   $0x0,0x18(%rax)
    a90a:	0f 85 09 00 00 00    	jne    a919 <setNodeFree+0xa9>
    a910:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
    a914:	e9 04 00 00 00       	jmp    a91d <setNodeFree+0xad>
    a919:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    a91d:	8a 45 ff             	mov    -0x1(%rbp),%al
    a920:	24 01                	and    $0x1,%al
    a922:	0f b6 c0             	movzbl %al,%eax
    a925:	48 83 c4 20          	add    $0x20,%rsp
    a929:	5d                   	pop    %rbp
    a92a:	c3                   	ret
    a92b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000a930 <slipM_pool_release>:
    a930:	55                   	push   %rbp
    a931:	48 89 e5             	mov    %rsp,%rbp
    a934:	48 83 ec 20          	sub    $0x20,%rsp
    a938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a93c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a940:	48 8b 40 10          	mov    0x10(%rax),%rax
    a944:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a948:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a94d:	0f 84 21 00 00 00    	je     a974 <slipM_pool_release+0x44>
    a953:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a957:	48 8b 00             	mov    (%rax),%rax
    a95a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a95e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    a962:	e8 69 f8 ff ff       	call   a1d0 <slipM_aligned_free>
    a967:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a96b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a96f:	e9 d4 ff ff ff       	jmp    a948 <slipM_pool_release+0x18>
    a974:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a978:	e8 33 f8 ff ff       	call   a1b0 <slipM_free>
    a97d:	48 83 c4 20          	add    $0x20,%rsp
    a981:	5d                   	pop    %rbp
    a982:	c3                   	ret
    a983:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    a98a:	00 00 00 
    a98d:	0f 1f 00             	nopl   (%rax)

000000000000a990 <slipM_pool_gc>:
    a990:	55                   	push   %rbp
    a991:	48 89 e5             	mov    %rsp,%rbp
    a994:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a998:	5d                   	pop    %rbp
    a999:	c3                   	ret
    a99a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000a9a0 <slipM_getMeta>:
    a9a0:	55                   	push   %rbp
    a9a1:	48 89 e5             	mov    %rsp,%rbp
    a9a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a9a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    a9b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a9ba:	48 8b 40 10          	mov    0x10(%rax),%rax
    a9be:	5d                   	pop    %rbp
    a9bf:	c3                   	ret

000000000000a9c0 <slipM_getGlobal>:
    a9c0:	55                   	push   %rbp
    a9c1:	48 89 e5             	mov    %rsp,%rbp
    a9c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a9c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9cc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    a9d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a9d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a9da:	48 8b 40 08          	mov    0x8(%rax),%rax
    a9de:	5d                   	pop    %rbp
    a9df:	c3                   	ret

000000000000a9e0 <slip_init>:
    a9e0:	55                   	push   %rbp
    a9e1:	48 89 e5             	mov    %rsp,%rbp
    a9e4:	48 83 ec 20          	sub    $0x20,%rsp
    a9e8:	e8 73 03 00 00       	call   ad60 <loadDefaultConfig>
    a9ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a9f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a9f5:	e8 66 04 00 00       	call   ae60 <slipC_createGlobal>
    a9fa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a9fe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    aa02:	e8 e9 03 00 00       	call   adf0 <slipC_createCore>
    aa07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    aa0b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    aa0f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    aa13:	e8 38 00 00 00       	call   aa50 <slipC_initPool>
    aa18:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    aa1c:	e8 df 24 00 00       	call   cf00 <slipD_table>
    aa21:	48 8b 40 08          	mov    0x8(%rax),%rax
    aa25:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    aa29:	ff d0                	call   *%rax
    aa2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    aa2f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    aa33:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    aa37:	e8 14 0a 00 00       	call   b450 <slipC_pushEnvStack>
    aa3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa40:	48 83 c4 20          	add    $0x20,%rsp
    aa44:	5d                   	pop    %rbp
    aa45:	c3                   	ret
    aa46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aa4d:	00 00 00 

000000000000aa50 <slipC_initPool>:
    aa50:	55                   	push   %rbp
    aa51:	48 89 e5             	mov    %rsp,%rbp
    aa54:	48 83 ec 10          	sub    $0x10,%rsp
    aa58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aa60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa64:	48 8b 40 30          	mov    0x30(%rax),%rax
    aa68:	48 8b 00             	mov    (%rax),%rax
    aa6b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    aa6f:	ff d0                	call   *%rax
    aa71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa75:	48 8b 40 38          	mov    0x38(%rax),%rax
    aa79:	48 8b 00             	mov    (%rax),%rax
    aa7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    aa80:	ff d0                	call   *%rax
    aa82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa86:	48 8b 40 40          	mov    0x40(%rax),%rax
    aa8a:	48 8b 00             	mov    (%rax),%rax
    aa8d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    aa91:	ff d0                	call   *%rax
    aa93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa97:	48 8b 40 48          	mov    0x48(%rax),%rax
    aa9b:	48 8b 08             	mov    (%rax),%rcx
    aa9e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    aaa2:	b0 00                	mov    $0x0,%al
    aaa4:	ff d1                	call   *%rcx
    aaa6:	48 83 c4 10          	add    $0x10,%rsp
    aaaa:	5d                   	pop    %rbp
    aaab:	c3                   	ret
    aaac:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000aab0 <slip_init_ex>:
    aab0:	55                   	push   %rbp
    aab1:	48 89 e5             	mov    %rsp,%rbp
    aab4:	48 83 ec 30          	sub    $0x30,%rsp
    aab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aabc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aac0:	e8 9b 02 00 00       	call   ad60 <loadDefaultConfig>
    aac5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    aac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aacd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    aad1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    aad5:	ff d0                	call   *%rax
    aad7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    aadb:	e8 80 03 00 00       	call   ae60 <slipC_createGlobal>
    aae0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    aae4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    aae8:	e8 03 03 00 00       	call   adf0 <slipC_createCore>
    aaed:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    aaf1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    aaf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aaf9:	48 89 48 48          	mov    %rcx,0x48(%rax)
    aafd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ab01:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    ab05:	e8 46 ff ff ff       	call   aa50 <slipC_initPool>
    ab0a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    ab0e:	e8 ed 23 00 00       	call   cf00 <slipD_table>
    ab13:	48 8b 40 08          	mov    0x8(%rax),%rax
    ab17:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    ab1b:	ff d0                	call   *%rax
    ab1d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ab21:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ab25:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    ab29:	e8 22 09 00 00       	call   b450 <slipC_pushEnvStack>
    ab2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab32:	48 83 c4 30          	add    $0x30,%rsp
    ab36:	5d                   	pop    %rbp
    ab37:	c3                   	ret
    ab38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    ab3f:	00 

000000000000ab40 <slip_newThread>:
    ab40:	55                   	push   %rbp
    ab41:	48 89 e5             	mov    %rsp,%rbp
    ab44:	48 83 ec 10          	sub    $0x10,%rsp
    ab48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab50:	48 8b 78 48          	mov    0x48(%rax),%rdi
    ab54:	e8 97 02 00 00       	call   adf0 <slipC_createCore>
    ab59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ab5d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ab61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab65:	48 8b 40 48          	mov    0x48(%rax),%rax
    ab69:	48 8b 40 08          	mov    0x8(%rax),%rax
    ab6d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ab71:	48 8b 71 48          	mov    0x48(%rcx),%rsi
    ab75:	8b 4e 10             	mov    0x10(%rsi),%ecx
    ab78:	89 cf                	mov    %ecx,%edi
    ab7a:	83 c7 01             	add    $0x1,%edi
    ab7d:	89 7e 10             	mov    %edi,0x10(%rsi)
    ab80:	48 63 c9             	movslq %ecx,%rcx
    ab83:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
    ab87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ab8b:	48 83 c4 10          	add    $0x10,%rsp
    ab8f:	5d                   	pop    %rbp
    ab90:	c3                   	ret
    ab91:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ab98:	00 00 00 
    ab9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000aba0 <slip_close>:
    aba0:	55                   	push   %rbp
    aba1:	48 89 e5             	mov    %rsp,%rbp
    aba4:	48 83 ec 10          	sub    $0x10,%rsp
    aba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abb0:	48 8b 40 48          	mov    0x48(%rax),%rax
    abb4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    abb8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    abbc:	e8 9f 03 00 00       	call   af60 <slipC_close>
    abc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    abc5:	83 78 10 00          	cmpl   $0x0,0x10(%rax)
    abc9:	0f 85 09 00 00 00    	jne    abd8 <slip_close+0x38>
    abcf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    abd3:	e8 18 03 00 00       	call   aef0 <slipC_releaseGlobal>
    abd8:	48 83 c4 10          	add    $0x10,%rsp
    abdc:	5d                   	pop    %rbp
    abdd:	c3                   	ret
    abde:	66 90                	xchg   %ax,%ax

000000000000abe0 <slip_setErrorHandler>:
    abe0:	55                   	push   %rbp
    abe1:	48 89 e5             	mov    %rsp,%rbp
    abe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abe8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    abec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    abf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abf4:	48 8b 40 48          	mov    0x48(%rax),%rax
    abf8:	48 8b 00             	mov    (%rax),%rax
    abfb:	48 89 48 18          	mov    %rcx,0x18(%rax)
    abff:	5d                   	pop    %rbp
    ac00:	c3                   	ret
    ac01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ac08:	00 00 00 
    ac0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ac10 <slip_setStdoutHandler>:
    ac10:	55                   	push   %rbp
    ac11:	48 89 e5             	mov    %rsp,%rbp
    ac14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac1c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ac20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac24:	48 8b 40 48          	mov    0x48(%rax),%rax
    ac28:	48 8b 00             	mov    (%rax),%rax
    ac2b:	48 89 48 20          	mov    %rcx,0x20(%rax)
    ac2f:	5d                   	pop    %rbp
    ac30:	c3                   	ret
    ac31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ac38:	00 00 00 
    ac3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ac40 <slip_setStderrHandler>:
    ac40:	55                   	push   %rbp
    ac41:	48 89 e5             	mov    %rsp,%rbp
    ac44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac4c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ac50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac54:	48 8b 40 48          	mov    0x48(%rax),%rax
    ac58:	48 8b 00             	mov    (%rax),%rax
    ac5b:	48 89 48 28          	mov    %rcx,0x28(%rax)
    ac5f:	5d                   	pop    %rbp
    ac60:	c3                   	ret
    ac61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ac68:	00 00 00 
    ac6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ac70 <slip_absIdx>:
    ac70:	55                   	push   %rbp
    ac71:	48 89 e5             	mov    %rsp,%rbp
    ac74:	48 83 ec 10          	sub    $0x10,%rsp
    ac78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac7c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ac7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    ac83:	0f 8c 0b 00 00 00    	jl     ac94 <slip_absIdx+0x24>
    ac89:	8b 45 f4             	mov    -0xc(%rbp),%eax
    ac8c:	89 45 f0             	mov    %eax,-0x10(%rbp)
    ac8f:	e9 0f 00 00 00       	jmp    aca3 <slip_absIdx+0x33>
    ac94:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    ac98:	e8 13 00 00 00       	call   acb0 <slip_getStackSize>
    ac9d:	03 45 f4             	add    -0xc(%rbp),%eax
    aca0:	89 45 f0             	mov    %eax,-0x10(%rbp)
    aca3:	8b 45 f0             	mov    -0x10(%rbp),%eax
    aca6:	48 83 c4 10          	add    $0x10,%rsp
    acaa:	5d                   	pop    %rbp
    acab:	c3                   	ret
    acac:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000acb0 <slip_getStackSize>:
    acb0:	55                   	push   %rbp
    acb1:	48 89 e5             	mov    %rsp,%rbp
    acb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    acb8:	31 c0                	xor    %eax,%eax
    acba:	5d                   	pop    %rbp
    acbb:	c3                   	ret
    acbc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000acc0 <slip_setTop>:
    acc0:	55                   	push   %rbp
    acc1:	48 89 e5             	mov    %rsp,%rbp
    acc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    acc8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    accb:	5d                   	pop    %rbp
    accc:	c3                   	ret
    accd:	0f 1f 00             	nopl   (%rax)

000000000000acd0 <slip_push>:
    acd0:	55                   	push   %rbp
    acd1:	48 89 e5             	mov    %rsp,%rbp
    acd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    acd8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    acdb:	5d                   	pop    %rbp
    acdc:	c3                   	ret
    acdd:	0f 1f 00             	nopl   (%rax)

000000000000ace0 <slip_pop>:
    ace0:	55                   	push   %rbp
    ace1:	48 89 e5             	mov    %rsp,%rbp
    ace4:	48 83 ec 10          	sub    $0x10,%rsp
    ace8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    acec:	89 75 f4             	mov    %esi,-0xc(%rbp)
    acef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    acf3:	48 83 c7 08          	add    $0x8,%rdi
    acf7:	8b 75 f4             	mov    -0xc(%rbp),%esi
    acfa:	e8 71 2d 00 00       	call   da70 <slipS_popValueNum>
    acff:	48 83 c4 10          	add    $0x10,%rsp
    ad03:	5d                   	pop    %rbp
    ad04:	c3                   	ret
    ad05:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ad0c:	00 00 00 
    ad0f:	90                   	nop

000000000000ad10 <slip_reverse>:
    ad10:	55                   	push   %rbp
    ad11:	48 89 e5             	mov    %rsp,%rbp
    ad14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad18:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ad1b:	89 55 f0             	mov    %edx,-0x10(%rbp)
    ad1e:	5d                   	pop    %rbp
    ad1f:	c3                   	ret

000000000000ad20 <slip_copy>:
    ad20:	55                   	push   %rbp
    ad21:	48 89 e5             	mov    %rsp,%rbp
    ad24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad28:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ad2b:	89 55 f0             	mov    %edx,-0x10(%rbp)
    ad2e:	5d                   	pop    %rbp
    ad2f:	c3                   	ret

000000000000ad30 <slip_xmove>:
    ad30:	55                   	push   %rbp
    ad31:	48 89 e5             	mov    %rsp,%rbp
    ad34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ad3c:	89 55 ec             	mov    %edx,-0x14(%rbp)
    ad3f:	5d                   	pop    %rbp
    ad40:	c3                   	ret
    ad41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ad48:	00 00 00 
    ad4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ad50 <slip_setStackSize>:
    ad50:	55                   	push   %rbp
    ad51:	48 89 e5             	mov    %rsp,%rbp
    ad54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad58:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ad5b:	31 c0                	xor    %eax,%eax
    ad5d:	5d                   	pop    %rbp
    ad5e:	c3                   	ret
    ad5f:	90                   	nop

000000000000ad60 <loadDefaultConfig>:
    ad60:	55                   	push   %rbp
    ad61:	48 89 e5             	mov    %rsp,%rbp
    ad64:	48 83 ec 10          	sub    $0x10,%rsp
    ad68:	bf 50 00 00 00       	mov    $0x50,%edi
    ad6d:	e8 1e 84 ff ff       	call   3190 <malloc@plt>
    ad72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ad76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad7a:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    ad81:	00 
    ad82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad86:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    ad8d:	00 
    ad8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad92:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    ad99:	00 
    ad9a:	b0 00                	mov    $0x0,%al
    ad9c:	e8 8f 21 00 00       	call   cf30 <slipD_getDefaultTableMeta>
    ada1:	48 89 c1             	mov    %rax,%rcx
    ada4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ada8:	48 89 48 30          	mov    %rcx,0x30(%rax)
    adac:	b0 00                	mov    $0x0,%al
    adae:	e8 dd 11 00 00       	call   bf90 <slipD_getListMeta>
    adb3:	48 89 c1             	mov    %rax,%rcx
    adb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adba:	48 89 48 38          	mov    %rcx,0x38(%rax)
    adbe:	b0 00                	mov    $0x0,%al
    adc0:	e8 fb 1d 00 00       	call   cbc0 <slipD_getStringMeta>
    adc5:	48 89 c1             	mov    %rax,%rcx
    adc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adcc:	48 89 48 40          	mov    %rcx,0x40(%rax)
    add0:	b0 00                	mov    $0x0,%al
    add2:	e8 19 32 00 00       	call   dff0 <slipD_getVectorMeta>
    add7:	48 89 c1             	mov    %rax,%rcx
    adda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adde:	48 89 48 48          	mov    %rcx,0x48(%rax)
    ade2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ade6:	48 83 c4 10          	add    $0x10,%rsp
    adea:	5d                   	pop    %rbp
    adeb:	c3                   	ret
    adec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000adf0 <slipC_createCore>:
    adf0:	55                   	push   %rbp
    adf1:	48 89 e5             	mov    %rsp,%rbp
    adf4:	48 83 ec 10          	sub    $0x10,%rsp
    adf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adfc:	bf 50 00 00 00       	mov    $0x50,%edi
    ae01:	e8 2a f3 ff ff       	call   a130 <slipM_malloc>
    ae06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ae0a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    ae0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae12:	48 89 48 48          	mov    %rcx,0x48(%rax)
    ae16:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ae1a:	48 83 c7 18          	add    $0x18,%rdi
    ae1e:	e8 ed 2c 00 00       	call   db10 <slipS_init>
    ae23:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ae27:	48 83 c7 28          	add    $0x28,%rdi
    ae2b:	e8 e0 2c 00 00       	call   db10 <slipS_init>
    ae30:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ae34:	48 83 c7 38          	add    $0x38,%rdi
    ae38:	e8 d3 2c 00 00       	call   db10 <slipS_init>
    ae3d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ae41:	48 83 c7 08          	add    $0x8,%rdi
    ae45:	e8 c6 2c 00 00       	call   db10 <slipS_init>
    ae4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae4e:	48 83 c4 10          	add    $0x10,%rsp
    ae52:	5d                   	pop    %rbp
    ae53:	c3                   	ret
    ae54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ae5b:	00 00 00 
    ae5e:	66 90                	xchg   %ax,%ax

000000000000ae60 <slipC_createGlobal>:
    ae60:	55                   	push   %rbp
    ae61:	48 89 e5             	mov    %rsp,%rbp
    ae64:	48 83 ec 10          	sub    $0x10,%rsp
    ae68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ae6c:	bf 30 00 00 00       	mov    $0x30,%edi
    ae71:	e8 ba f2 ff ff       	call   a130 <slipM_malloc>
    ae76:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ae7a:	bf 40 00 00 00       	mov    $0x40,%edi
    ae7f:	e8 ac f2 ff ff       	call   a130 <slipM_malloc>
    ae84:	48 89 c1             	mov    %rax,%rcx
    ae87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae8b:	48 89 48 08          	mov    %rcx,0x8(%rax)
    ae8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ae93:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
    ae9a:	bf 40 00 00 00       	mov    $0x40,%edi
    ae9f:	e8 8c f2 ff ff       	call   a130 <slipM_malloc>
    aea4:	48 89 c1             	mov    %rax,%rcx
    aea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aeab:	48 89 48 18          	mov    %rcx,0x18(%rax)
    aeaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aeb3:	c7 40 20 08 00 00 00 	movl   $0x8,0x20(%rax)
    aeba:	b0 00                	mov    $0x0,%al
    aebc:	e8 0f cc 00 00       	call   17ad0 <slipG_create>
    aec1:	48 89 c1             	mov    %rax,%rcx
    aec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aec8:	48 89 48 28          	mov    %rcx,0x28(%rax)
    aecc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    aed0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aed4:	48 89 08             	mov    %rcx,(%rax)
    aed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aedb:	48 83 c4 10          	add    $0x10,%rsp
    aedf:	5d                   	pop    %rbp
    aee0:	c3                   	ret
    aee1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    aee8:	00 00 00 
    aeeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000aef0 <slipC_releaseGlobal>:
    aef0:	55                   	push   %rbp
    aef1:	48 89 e5             	mov    %rsp,%rbp
    aef4:	48 83 ec 10          	sub    $0x10,%rsp
    aef8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aefc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    af03:	8b 45 f4             	mov    -0xc(%rbp),%eax
    af06:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    af0a:	3b 41 20             	cmp    0x20(%rcx),%eax
    af0d:	0f 8d 23 00 00 00    	jge    af36 <slipC_releaseGlobal+0x46>
    af13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af17:	48 8b 40 18          	mov    0x18(%rax),%rax
    af1b:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
    af1f:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    af23:	e8 08 fa ff ff       	call   a930 <slipM_pool_release>
    af28:	8b 45 f4             	mov    -0xc(%rbp),%eax
    af2b:	83 c0 01             	add    $0x1,%eax
    af2e:	89 45 f4             	mov    %eax,-0xc(%rbp)
    af31:	e9 cd ff ff ff       	jmp    af03 <slipC_releaseGlobal+0x13>
    af36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af3a:	48 8b 78 28          	mov    0x28(%rax),%rdi
    af3e:	e8 ad cb 00 00       	call   17af0 <slipG_release>
    af43:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    af47:	e8 e4 80 ff ff       	call   3030 <free@plt>
    af4c:	48 83 c4 10          	add    $0x10,%rsp
    af50:	5d                   	pop    %rbp
    af51:	c3                   	ret
    af52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    af59:	00 00 00 
    af5c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000af60 <slipC_close>:
    af60:	55                   	push   %rbp
    af61:	48 89 e5             	mov    %rsp,%rbp
    af64:	48 83 ec 10          	sub    $0x10,%rsp
    af68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af70:	48 8b 40 48          	mov    0x48(%rax),%rax
    af74:	8b 48 10             	mov    0x10(%rax),%ecx
    af77:	83 c1 ff             	add    $0xffffffff,%ecx
    af7a:	89 48 10             	mov    %ecx,0x10(%rax)
    af7d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    af81:	e8 aa 80 ff ff       	call   3030 <free@plt>
    af86:	31 c0                	xor    %eax,%eax
    af88:	48 83 c4 10          	add    $0x10,%rsp
    af8c:	5d                   	pop    %rbp
    af8d:	c3                   	ret
    af8e:	66 90                	xchg   %ax,%ax

000000000000af90 <slipC_loadProgram>:
    af90:	55                   	push   %rbp
    af91:	48 89 e5             	mov    %rsp,%rbp
    af94:	48 83 ec 50          	sub    $0x50,%rsp
    af98:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    af9c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    afa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    afa4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    afa8:	b0 00                	mov    $0x0,%al
    afaa:	e8 01 12 00 00       	call   c1b0 <slipP_createProto>
    afaf:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    afb3:	48 89 c6             	mov    %rax,%rsi
    afb6:	e8 05 01 00 00       	call   b0c0 <slipC_pushFuncStack>
    afbb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    afbf:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    afc3:	e8 d8 41 00 00       	call   f1a0 <slipV_pushListNode>
    afc8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    afcc:	31 f6                	xor    %esi,%esi
    afce:	e8 ed 43 00 00       	call   f3c0 <slipV_call>
    afd3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    afd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    afdb:	0f 8e 10 00 00 00    	jle    aff1 <slipC_loadProgram+0x61>
    afe1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    afe5:	48 83 c7 08          	add    $0x8,%rdi
    afe9:	8b 75 e0             	mov    -0x20(%rbp),%esi
    afec:	e8 7f 2a 00 00       	call   da70 <slipS_popValueNum>
    aff1:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    aff5:	0f 8d 0b 00 00 00    	jge    b006 <slipC_loadProgram+0x76>
    affb:	8b 45 e0             	mov    -0x20(%rbp),%eax
    affe:	89 45 fc             	mov    %eax,-0x4(%rbp)
    b001:	e9 a3 00 00 00       	jmp    b0a9 <slipC_loadProgram+0x119>
    b006:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b00a:	e8 f1 00 00 00       	call   b100 <slipC_popFuncStack>
    b00f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b013:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b017:	48 8b 40 38          	mov    0x38(%rax),%rax
    b01b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    b01f:	8b 49 18             	mov    0x18(%rcx),%ecx
    b022:	83 e9 01             	sub    $0x1,%ecx
    b025:	89 c9                	mov    %ecx,%ecx
    b027:	8a 04 88             	mov    (%rax,%rcx,4),%al
    b02a:	24 3f                	and    $0x3f,%al
    b02c:	0f b6 c0             	movzbl %al,%eax
    b02f:	83 f8 23             	cmp    $0x23,%eax
    b032:	0f 84 1e 00 00 00    	je     b056 <slipC_loadProgram+0xc6>
    b038:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b03c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    b040:	31 ff                	xor    %edi,%edi
    b042:	e8 e9 00 00 00       	call   b130 <slipI_return>
    b047:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    b04b:	89 45 c0             	mov    %eax,-0x40(%rbp)
    b04e:	8b 75 c0             	mov    -0x40(%rbp),%esi
    b051:	e8 ca 11 00 00       	call   c220 <slipP_addInstruction>
    b056:	f6 05 b7 53 01 00 01 	testb  $0x1,0x153b7(%rip)        # 20414 <slip_debug_compile>
    b05d:	0f 84 09 00 00 00    	je     b06c <slipC_loadProgram+0xdc>
    b063:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    b067:	e8 94 15 00 00       	call   c600 <slipP_dump>
    b06c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    b070:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    b074:	e8 57 31 00 00       	call   e1d0 <slipV_setValueFunc>
    b079:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b07d:	48 83 c7 08          	add    $0x8,%rdi
    b081:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    b085:	8b 55 d8             	mov    -0x28(%rbp),%edx
    b088:	e8 b3 27 00 00       	call   d840 <slipS_push>
    b08d:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    b091:	0f 8c 0c 00 00 00    	jl     b0a3 <slipC_loadProgram+0x113>
    b097:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    b09e:	e9 06 00 00 00       	jmp    b0a9 <slipC_loadProgram+0x119>
    b0a3:	8b 45 e0             	mov    -0x20(%rbp),%eax
    b0a6:	89 45 fc             	mov    %eax,-0x4(%rbp)
    b0a9:	8b 45 fc             	mov    -0x4(%rbp),%eax
    b0ac:	48 83 c4 50          	add    $0x50,%rsp
    b0b0:	5d                   	pop    %rbp
    b0b1:	c3                   	ret
    b0b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b0b9:	00 00 00 
    b0bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b0c0 <slipC_pushFuncStack>:
    b0c0:	55                   	push   %rbp
    b0c1:	48 89 e5             	mov    %rsp,%rbp
    b0c4:	48 83 ec 20          	sub    $0x20,%rsp
    b0c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0d0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b0d4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    b0d8:	e8 f3 30 00 00       	call   e1d0 <slipV_setValueFunc>
    b0dd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b0e1:	48 83 c7 28          	add    $0x28,%rdi
    b0e5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b0e9:	8b 55 e8             	mov    -0x18(%rbp),%edx
    b0ec:	e8 4f 27 00 00       	call   d840 <slipS_push>
    b0f1:	31 c0                	xor    %eax,%eax
    b0f3:	48 83 c4 20          	add    $0x20,%rsp
    b0f7:	5d                   	pop    %rbp
    b0f8:	c3                   	ret
    b0f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b100 <slipC_popFuncStack>:
    b100:	55                   	push   %rbp
    b101:	48 89 e5             	mov    %rsp,%rbp
    b104:	48 83 ec 20          	sub    $0x20,%rsp
    b108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b10c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b110:	48 83 c7 28          	add    $0x28,%rdi
    b114:	e8 d7 28 00 00       	call   d9f0 <slipS_pop>
    b119:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b11d:	89 55 f0             	mov    %edx,-0x10(%rbp)
    b120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b124:	48 83 c4 20          	add    $0x20,%rsp
    b128:	5d                   	pop    %rbp
    b129:	c3                   	ret
    b12a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000b130 <slipI_return>:
    b130:	55                   	push   %rbp
    b131:	48 89 e5             	mov    %rsp,%rbp
    b134:	89 7d f4             	mov    %edi,-0xc(%rbp)
    b137:	8a 45 f8             	mov    -0x8(%rbp),%al
    b13a:	24 c0                	and    $0xc0,%al
    b13c:	0c 23                	or     $0x23,%al
    b13e:	88 45 f8             	mov    %al,-0x8(%rbp)
    b141:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    b144:	8b 45 f8             	mov    -0x8(%rbp),%eax
    b147:	81 e1 ff ff ff 03    	and    $0x3ffffff,%ecx
    b14d:	c1 e1 06             	shl    $0x6,%ecx
    b150:	83 e0 3f             	and    $0x3f,%eax
    b153:	09 c8                	or     %ecx,%eax
    b155:	89 45 f8             	mov    %eax,-0x8(%rbp)
    b158:	8b 45 f8             	mov    -0x8(%rbp),%eax
    b15b:	5d                   	pop    %rbp
    b15c:	c3                   	ret
    b15d:	0f 1f 00             	nopl   (%rax)

000000000000b160 <slipC_loadFile>:
    b160:	55                   	push   %rbp
    b161:	48 89 e5             	mov    %rsp,%rbp
    b164:	48 83 ec 20          	sub    $0x20,%rsp
    b168:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b16c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b170:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b174:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b178:	e8 e3 0b 00 00       	call   bd60 <slipL_parseFile>
    b17d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b181:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b185:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    b189:	e8 02 fe ff ff       	call   af90 <slipC_loadProgram>
    b18e:	48 83 c4 20          	add    $0x20,%rsp
    b192:	5d                   	pop    %rbp
    b193:	c3                   	ret
    b194:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b19b:	00 00 00 
    b19e:	66 90                	xchg   %ax,%ax

000000000000b1a0 <slipC_loadStr>:
    b1a0:	55                   	push   %rbp
    b1a1:	48 89 e5             	mov    %rsp,%rbp
    b1a4:	48 83 ec 20          	sub    $0x20,%rsp
    b1a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b1ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b1b0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b1b4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b1b8:	e8 d3 86 00 00       	call   13890 <slipL_parseString>
    b1bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b1c1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b1c5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    b1c9:	e8 c2 fd ff ff       	call   af90 <slipC_loadProgram>
    b1ce:	48 83 c4 20          	add    $0x20,%rsp
    b1d2:	5d                   	pop    %rbp
    b1d3:	c3                   	ret
    b1d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b1db:	00 00 00 
    b1de:	66 90                	xchg   %ax,%ax

000000000000b1e0 <slipC_findID>:
    b1e0:	55                   	push   %rbp
    b1e1:	48 89 e5             	mov    %rsp,%rbp
    b1e4:	48 83 ec 70          	sub    $0x70,%rsp
    b1e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b1ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b1f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b1f4:	8b 40 24             	mov    0x24(%rax),%eax
    b1f7:	89 45 dc             	mov    %eax,-0x24(%rbp)
    b1fa:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    b1fe:	31 f6                	xor    %esi,%esi
    b200:	ba 10 00 00 00       	mov    $0x10,%edx
    b205:	e8 f6 7e ff ff       	call   3100 <memset@plt>
    b20a:	b0 00                	mov    $0x0,%al
    b20c:	e8 af 19 00 00       	call   cbc0 <slipD_getStringMeta>
    b211:	48 8b 40 10          	mov    0x10(%rax),%rax
    b215:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b219:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    b21d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b221:	ff d0                	call   *%rax
    b223:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b227:	89 55 c8             	mov    %edx,-0x38(%rbp)
    b22a:	8b 45 dc             	mov    -0x24(%rbp),%eax
    b22d:	83 e8 01             	sub    $0x1,%eax
    b230:	89 45 bc             	mov    %eax,-0x44(%rbp)
    b233:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
    b237:	0f 8c 72 00 00 00    	jl     b2af <slipC_findID+0xcf>
    b23d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b241:	48 83 c7 18          	add    $0x18,%rdi
    b245:	8b 75 bc             	mov    -0x44(%rbp),%esi
    b248:	e8 03 2a 00 00       	call   dc50 <slipS_get>
    b24d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b251:	89 55 b0             	mov    %edx,-0x50(%rbp)
    b254:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b258:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b25c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b260:	e8 3b f7 ff ff       	call   a9a0 <slipM_getMeta>
    b265:	48 8b 40 28          	mov    0x28(%rax),%rax
    b269:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b26d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    b271:	8b 55 c8             	mov    -0x38(%rbp),%edx
    b274:	ff d0                	call   *%rax
    b276:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    b27a:	89 55 a0             	mov    %edx,-0x60(%rbp)
    b27d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b281:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b285:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b289:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b28d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
    b291:	0f 84 05 00 00 00    	je     b29c <slipC_findID+0xbc>
    b297:	e9 18 00 00 00       	jmp    b2b4 <slipC_findID+0xd4>
    b29c:	e9 00 00 00 00       	jmp    b2a1 <slipC_findID+0xc1>
    b2a1:	8b 45 bc             	mov    -0x44(%rbp),%eax
    b2a4:	83 c0 ff             	add    $0xffffffff,%eax
    b2a7:	89 45 bc             	mov    %eax,-0x44(%rbp)
    b2aa:	e9 84 ff ff ff       	jmp    b233 <slipC_findID+0x53>
    b2af:	e9 00 00 00 00       	jmp    b2b4 <slipC_findID+0xd4>
    b2b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b2b8:	8b 55 f8             	mov    -0x8(%rbp),%edx
    b2bb:	48 83 c4 70          	add    $0x70,%rsp
    b2bf:	5d                   	pop    %rbp
    b2c0:	c3                   	ret
    b2c1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b2c8:	00 00 00 
    b2cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b2d0 <slipC_findRef>:
    b2d0:	55                   	push   %rbp
    b2d1:	48 89 e5             	mov    %rsp,%rbp
    b2d4:	48 83 ec 70          	sub    $0x70,%rsp
    b2d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b2dc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b2e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2e4:	8b 40 24             	mov    0x24(%rax),%eax
    b2e7:	89 45 dc             	mov    %eax,-0x24(%rbp)
    b2ea:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    b2ee:	31 f6                	xor    %esi,%esi
    b2f0:	ba 10 00 00 00       	mov    $0x10,%edx
    b2f5:	e8 06 7e ff ff       	call   3100 <memset@plt>
    b2fa:	b0 00                	mov    $0x0,%al
    b2fc:	e8 bf 18 00 00       	call   cbc0 <slipD_getStringMeta>
    b301:	48 8b 40 10          	mov    0x10(%rax),%rax
    b305:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b309:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    b30d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b311:	ff d0                	call   *%rax
    b313:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b317:	89 55 c8             	mov    %edx,-0x38(%rbp)
    b31a:	8b 45 dc             	mov    -0x24(%rbp),%eax
    b31d:	83 e8 01             	sub    $0x1,%eax
    b320:	89 45 bc             	mov    %eax,-0x44(%rbp)
    b323:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
    b327:	0f 8c 72 00 00 00    	jl     b39f <slipC_findRef+0xcf>
    b32d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b331:	48 83 c7 18          	add    $0x18,%rdi
    b335:	8b 75 bc             	mov    -0x44(%rbp),%esi
    b338:	e8 13 29 00 00       	call   dc50 <slipS_get>
    b33d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b341:	89 55 b0             	mov    %edx,-0x50(%rbp)
    b344:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b348:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b34c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b350:	e8 4b f6 ff ff       	call   a9a0 <slipM_getMeta>
    b355:	48 8b 40 30          	mov    0x30(%rax),%rax
    b359:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    b35d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    b361:	8b 55 c8             	mov    -0x38(%rbp),%edx
    b364:	ff d0                	call   *%rax
    b366:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    b36a:	89 55 a0             	mov    %edx,-0x60(%rbp)
    b36d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b371:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b375:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b379:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b37d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
    b381:	0f 84 05 00 00 00    	je     b38c <slipC_findRef+0xbc>
    b387:	e9 18 00 00 00       	jmp    b3a4 <slipC_findRef+0xd4>
    b38c:	e9 00 00 00 00       	jmp    b391 <slipC_findRef+0xc1>
    b391:	8b 45 bc             	mov    -0x44(%rbp),%eax
    b394:	83 c0 ff             	add    $0xffffffff,%eax
    b397:	89 45 bc             	mov    %eax,-0x44(%rbp)
    b39a:	e9 84 ff ff ff       	jmp    b323 <slipC_findRef+0x53>
    b39f:	e9 00 00 00 00       	jmp    b3a4 <slipC_findRef+0xd4>
    b3a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b3a8:	8b 55 f8             	mov    -0x8(%rbp),%edx
    b3ab:	48 83 c4 70          	add    $0x70,%rsp
    b3af:	5d                   	pop    %rbp
    b3b0:	c3                   	ret
    b3b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b3b8:	00 00 00 
    b3bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000b3c0 <slipC_setID>:
    b3c0:	55                   	push   %rbp
    b3c1:	48 89 e5             	mov    %rsp,%rbp
    b3c4:	48 83 ec 50          	sub    $0x50,%rsp
    b3c8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    b3cc:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    b3cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b3d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b3d7:	b0 00                	mov    $0x0,%al
    b3d9:	e8 e2 17 00 00       	call   cbc0 <slipD_getStringMeta>
    b3de:	48 8b 40 10          	mov    0x10(%rax),%rax
    b3e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b3e6:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    b3ea:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b3ee:	ff d0                	call   *%rax
    b3f0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b3f4:	89 55 d8             	mov    %edx,-0x28(%rbp)
    b3f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b3fb:	8b 40 24             	mov    0x24(%rax),%eax
    b3fe:	89 45 cc             	mov    %eax,-0x34(%rbp)
    b401:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b405:	48 83 c7 18          	add    $0x18,%rdi
    b409:	8b 75 cc             	mov    -0x34(%rbp),%esi
    b40c:	83 ee 01             	sub    $0x1,%esi
    b40f:	e8 3c 28 00 00       	call   dc50 <slipS_get>
    b414:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b418:	89 55 c0             	mov    %edx,-0x40(%rbp)
    b41b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b41f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    b423:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    b427:	e8 74 f5 ff ff       	call   a9a0 <slipM_getMeta>
    b42c:	48 8b 40 20          	mov    0x20(%rax),%rax
    b430:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    b434:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    b438:	8b 55 d8             	mov    -0x28(%rbp),%edx
    b43b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b43f:	44 8b 45 f8          	mov    -0x8(%rbp),%r8d
    b443:	ff d0                	call   *%rax
    b445:	31 c0                	xor    %eax,%eax
    b447:	48 83 c4 50          	add    $0x50,%rsp
    b44b:	5d                   	pop    %rbp
    b44c:	c3                   	ret
    b44d:	0f 1f 00             	nopl   (%rax)

000000000000b450 <slipC_pushEnvStack>:
    b450:	55                   	push   %rbp
    b451:	48 89 e5             	mov    %rsp,%rbp
    b454:	48 83 ec 20          	sub    $0x20,%rsp
    b458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b45c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b460:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b464:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    b468:	e8 a3 2c 00 00       	call   e110 <slipV_setValueTable>
    b46d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b471:	48 83 c7 18          	add    $0x18,%rdi
    b475:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b479:	8b 55 e8             	mov    -0x18(%rbp),%edx
    b47c:	e8 bf 23 00 00       	call   d840 <slipS_push>
    b481:	31 c0                	xor    %eax,%eax
    b483:	48 83 c4 20          	add    $0x20,%rsp
    b487:	5d                   	pop    %rbp
    b488:	c3                   	ret
    b489:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b490 <slipC_popEnvStack>:
    b490:	55                   	push   %rbp
    b491:	48 89 e5             	mov    %rsp,%rbp
    b494:	48 83 ec 20          	sub    $0x20,%rsp
    b498:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b49c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b4a0:	48 83 c7 18          	add    $0x18,%rdi
    b4a4:	e8 47 25 00 00       	call   d9f0 <slipS_pop>
    b4a9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b4ad:	89 55 f0             	mov    %edx,-0x10(%rbp)
    b4b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b4b4:	48 83 c4 20          	add    $0x20,%rsp
    b4b8:	5d                   	pop    %rbp
    b4b9:	c3                   	ret
    b4ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000b4c0 <slipC_getEnv>:
    b4c0:	55                   	push   %rbp
    b4c1:	48 89 e5             	mov    %rsp,%rbp
    b4c4:	48 83 ec 20          	sub    $0x20,%rsp
    b4c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b4cc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    b4cf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b4d3:	48 83 c7 18          	add    $0x18,%rdi
    b4d7:	8b 75 f4             	mov    -0xc(%rbp),%esi
    b4da:	e8 71 27 00 00       	call   dc50 <slipS_get>
    b4df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b4e3:	89 55 e8             	mov    %edx,-0x18(%rbp)
    b4e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b4ea:	48 83 c4 20          	add    $0x20,%rsp
    b4ee:	5d                   	pop    %rbp
    b4ef:	c3                   	ret

000000000000b4f0 <slipC_getFunc>:
    b4f0:	55                   	push   %rbp
    b4f1:	48 89 e5             	mov    %rsp,%rbp
    b4f4:	48 83 ec 20          	sub    $0x20,%rsp
    b4f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b4fc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    b4ff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b503:	48 83 c7 28          	add    $0x28,%rdi
    b507:	8b 75 f4             	mov    -0xc(%rbp),%esi
    b50a:	e8 41 27 00 00       	call   dc50 <slipS_get>
    b50f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b513:	89 55 e8             	mov    %edx,-0x18(%rbp)
    b516:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b51a:	48 83 c4 20          	add    $0x20,%rsp
    b51e:	5d                   	pop    %rbp
    b51f:	c3                   	ret

000000000000b520 <slipC_pushLoopStack>:
    b520:	55                   	push   %rbp
    b521:	48 89 e5             	mov    %rsp,%rbp
    b524:	48 83 ec 20          	sub    $0x20,%rsp
    b528:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b52c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b530:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b534:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    b538:	e8 d3 2b 00 00       	call   e110 <slipV_setValueTable>
    b53d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b541:	48 83 c7 38          	add    $0x38,%rdi
    b545:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    b549:	8b 55 e8             	mov    -0x18(%rbp),%edx
    b54c:	e8 ef 22 00 00       	call   d840 <slipS_push>
    b551:	31 c0                	xor    %eax,%eax
    b553:	48 83 c4 20          	add    $0x20,%rsp
    b557:	5d                   	pop    %rbp
    b558:	c3                   	ret
    b559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b560 <slipC_popLoopStack>:
    b560:	55                   	push   %rbp
    b561:	48 89 e5             	mov    %rsp,%rbp
    b564:	48 83 ec 20          	sub    $0x20,%rsp
    b568:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b56c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b570:	48 83 c7 38          	add    $0x38,%rdi
    b574:	e8 77 24 00 00       	call   d9f0 <slipS_pop>
    b579:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b57d:	89 55 f0             	mov    %edx,-0x10(%rbp)
    b580:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b584:	48 83 c4 20          	add    $0x20,%rsp
    b588:	5d                   	pop    %rbp
    b589:	c3                   	ret
    b58a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000b590 <slipC_getLoop>:
    b590:	55                   	push   %rbp
    b591:	48 89 e5             	mov    %rsp,%rbp
    b594:	48 83 ec 20          	sub    $0x20,%rsp
    b598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b59c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    b59f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b5a3:	48 83 c7 38          	add    $0x38,%rdi
    b5a7:	8b 75 f4             	mov    -0xc(%rbp),%esi
    b5aa:	e8 a1 26 00 00       	call   dc50 <slipS_get>
    b5af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b5b3:	89 55 e8             	mov    %edx,-0x18(%rbp)
    b5b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b5ba:	48 83 c4 20          	add    $0x20,%rsp
    b5be:	5d                   	pop    %rbp
    b5bf:	c3                   	ret

000000000000b5c0 <slipC_printStack>:
    b5c0:	55                   	push   %rbp
    b5c1:	48 89 e5             	mov    %rsp,%rbp
    b5c4:	48 83 ec 10          	sub    $0x10,%rsp
    b5c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b5cc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b5d0:	48 83 c7 08          	add    $0x8,%rdi
    b5d4:	e8 b7 28 00 00       	call   de90 <slipS_printStack>
    b5d9:	48 8d 3d 9e d3 00 00 	lea    0xd39e(%rip),%rdi        # 1897e <getFreeElement.b+0x17e>
    b5e0:	b0 00                	mov    $0x0,%al
    b5e2:	e8 e9 7a ff ff       	call   30d0 <printf@plt>
    b5e7:	31 c0                	xor    %eax,%eax
    b5e9:	48 83 c4 10          	add    $0x10,%rsp
    b5ed:	5d                   	pop    %rbp
    b5ee:	c3                   	ret
    b5ef:	90                   	nop

000000000000b5f0 <slipC_registerPool>:
    b5f0:	55                   	push   %rbp
    b5f1:	48 89 e5             	mov    %rsp,%rbp
    b5f4:	48 83 ec 20          	sub    $0x20,%rsp
    b5f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b5fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b600:	89 55 ec             	mov    %edx,-0x14(%rbp)
    b603:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b607:	48 8b 40 48          	mov    0x48(%rax),%rax
    b60b:	8b 40 20             	mov    0x20(%rax),%eax
    b60e:	3b 45 ec             	cmp    -0x14(%rbp),%eax
    b611:	0f 87 7f 00 00 00    	ja     b696 <slipC_registerPool+0xa6>
    b617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b61b:	48 8b 40 48          	mov    0x48(%rax),%rax
    b61f:	48 8b 78 18          	mov    0x18(%rax),%rdi
    b623:	8b 45 ec             	mov    -0x14(%rbp),%eax
    b626:	83 c0 01             	add    $0x1,%eax
    b629:	89 c0                	mov    %eax,%eax
    b62b:	89 c6                	mov    %eax,%esi
    b62d:	48 c1 e6 03          	shl    $0x3,%rsi
    b631:	e8 4a eb ff ff       	call   a180 <slipM_realloc>
    b636:	48 89 c1             	mov    %rax,%rcx
    b639:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b63d:	48 8b 40 48          	mov    0x48(%rax),%rax
    b641:	48 89 48 18          	mov    %rcx,0x18(%rax)
    b645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b649:	48 8b 40 48          	mov    0x48(%rax),%rax
    b64d:	8b 40 20             	mov    0x20(%rax),%eax
    b650:	89 45 e8             	mov    %eax,-0x18(%rbp)
    b653:	8b 45 e8             	mov    -0x18(%rbp),%eax
    b656:	3b 45 ec             	cmp    -0x14(%rbp),%eax
    b659:	0f 87 26 00 00 00    	ja     b685 <slipC_registerPool+0x95>
    b65f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b663:	48 8b 40 48          	mov    0x48(%rax),%rax
    b667:	48 8b 40 18          	mov    0x18(%rax),%rax
    b66b:	48 63 4d e8          	movslq -0x18(%rbp),%rcx
    b66f:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
    b676:	00 
    b677:	8b 45 e8             	mov    -0x18(%rbp),%eax
    b67a:	83 c0 01             	add    $0x1,%eax
    b67d:	89 45 e8             	mov    %eax,-0x18(%rbp)
    b680:	e9 ce ff ff ff       	jmp    b653 <slipC_registerPool+0x63>
    b685:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    b688:	83 c1 01             	add    $0x1,%ecx
    b68b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b68f:	48 8b 40 48          	mov    0x48(%rax),%rax
    b693:	89 48 20             	mov    %ecx,0x20(%rax)
    b696:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b69a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b69e:	48 8b 40 48          	mov    0x48(%rax),%rax
    b6a2:	48 8b 40 18          	mov    0x18(%rax),%rax
    b6a6:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    b6a9:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
    b6ad:	48 83 c4 20          	add    $0x20,%rsp
    b6b1:	5d                   	pop    %rbp
    b6b2:	c3                   	ret
    b6b3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b6ba:	00 00 00 
    b6bd:	0f 1f 00             	nopl   (%rax)

000000000000b6c0 <slipG_registerPoolID>:
    b6c0:	55                   	push   %rbp
    b6c1:	48 89 e5             	mov    %rsp,%rbp
    b6c4:	8b 05 4e 4d 01 00    	mov    0x14d4e(%rip),%eax        # 20418 <_poolID>
    b6ca:	89 c1                	mov    %eax,%ecx
    b6cc:	83 c1 01             	add    $0x1,%ecx
    b6cf:	89 0d 43 4d 01 00    	mov    %ecx,0x14d43(%rip)        # 20418 <_poolID>
    b6d5:	5d                   	pop    %rbp
    b6d6:	c3                   	ret
    b6d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b6de:	00 00 

000000000000b6e0 <slipL_create_IntNode>:
    b6e0:	55                   	push   %rbp
    b6e1:	48 89 e5             	mov    %rsp,%rbp
    b6e4:	48 83 ec 20          	sub    $0x20,%rsp
    b6e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b6ec:	89 75 f4             	mov    %esi,-0xc(%rbp)
    b6ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6f3:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b6f7:	e8 34 00 00 00       	call   b730 <createNode>
    b6fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b704:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b70b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b70f:	48 83 c7 08          	add    $0x8,%rdi
    b713:	48 63 75 f4          	movslq -0xc(%rbp),%rsi
    b717:	e8 d4 2b 00 00       	call   e2f0 <slipV_setValueInt>
    b71c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b720:	48 83 c4 20          	add    $0x20,%rsp
    b724:	5d                   	pop    %rbp
    b725:	c3                   	ret
    b726:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b72d:	00 00 00 

000000000000b730 <createNode>:
    b730:	55                   	push   %rbp
    b731:	48 89 e5             	mov    %rsp,%rbp
    b734:	48 83 ec 10          	sub    $0x10,%rsp
    b738:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b73c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b740:	48 8b 40 18          	mov    0x18(%rax),%rax
    b744:	48 63 0d d5 4c 01 00 	movslq 0x14cd5(%rip),%rcx        # 20420 <LIST_POOL>
    b74b:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    b74f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b753:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b757:	e8 84 eb ff ff       	call   a2e0 <slipM_pool_alloc>
    b75c:	48 83 c4 10          	add    $0x10,%rsp
    b760:	5d                   	pop    %rbp
    b761:	c3                   	ret
    b762:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b769:	00 00 00 
    b76c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b770 <slipL_create_FloatNode>:
    b770:	55                   	push   %rbp
    b771:	48 89 e5             	mov    %rsp,%rbp
    b774:	48 83 ec 20          	sub    $0x20,%rsp
    b778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b77c:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
    b781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b785:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b789:	e8 a2 ff ff ff       	call   b730 <createNode>
    b78e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b796:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b79d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b7a1:	48 83 c7 08          	add    $0x8,%rdi
    b7a5:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    b7aa:	e8 a1 2b 00 00       	call   e350 <slipV_setValueDouble>
    b7af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b7b3:	48 83 c4 20          	add    $0x20,%rsp
    b7b7:	5d                   	pop    %rbp
    b7b8:	c3                   	ret
    b7b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000b7c0 <slipL_create_StringNode>:
    b7c0:	55                   	push   %rbp
    b7c1:	48 89 e5             	mov    %rsp,%rbp
    b7c4:	48 83 ec 20          	sub    $0x20,%rsp
    b7c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b7d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7d4:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b7d8:	e8 53 ff ff ff       	call   b730 <createNode>
    b7dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b7e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b7e5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b7ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b7f0:	48 83 c0 08          	add    $0x8,%rax
    b7f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b7f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7fc:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b800:	e8 1b 16 00 00       	call   ce20 <slipD_str>
    b805:	48 8b 40 08          	mov    0x8(%rax),%rax
    b809:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    b80d:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    b811:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b815:	ff d0                	call   *%rax
    b817:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    b81b:	48 89 c6             	mov    %rax,%rsi
    b81e:	e8 bd 28 00 00       	call   e0e0 <slipV_setValueString>
    b823:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b827:	48 83 c4 20          	add    $0x20,%rsp
    b82b:	5d                   	pop    %rbp
    b82c:	c3                   	ret
    b82d:	0f 1f 00             	nopl   (%rax)

000000000000b830 <slipL_create_IDNode>:
    b830:	55                   	push   %rbp
    b831:	48 89 e5             	mov    %rsp,%rbp
    b834:	48 83 ec 20          	sub    $0x20,%rsp
    b838:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b83c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b844:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b848:	e8 e3 fe ff ff       	call   b730 <createNode>
    b84d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b851:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b855:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b85c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b860:	48 83 c7 08          	add    $0x8,%rdi
    b864:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b868:	e8 d3 28 00 00       	call   e140 <slipV_setValueID>
    b86d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b871:	48 83 c4 20          	add    $0x20,%rsp
    b875:	5d                   	pop    %rbp
    b876:	c3                   	ret
    b877:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b87e:	00 00 

000000000000b880 <slipL_create_ListNode>:
    b880:	55                   	push   %rbp
    b881:	48 89 e5             	mov    %rsp,%rbp
    b884:	48 83 ec 20          	sub    $0x20,%rsp
    b888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b88c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b894:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b898:	e8 93 fe ff ff       	call   b730 <createNode>
    b89d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b8a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b8a5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b8ac:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    b8b0:	48 83 c7 08          	add    $0x8,%rdi
    b8b4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    b8b8:	e8 e3 28 00 00       	call   e1a0 <slipV_setValueList>
    b8bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b8c1:	48 83 c4 20          	add    $0x20,%rsp
    b8c5:	5d                   	pop    %rbp
    b8c6:	c3                   	ret
    b8c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    b8ce:	00 00 

000000000000b8d0 <slipL_create_NilNode>:
    b8d0:	55                   	push   %rbp
    b8d1:	48 89 e5             	mov    %rsp,%rbp
    b8d4:	48 83 ec 10          	sub    $0x10,%rsp
    b8d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b8dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8e0:	48 8b 78 48          	mov    0x48(%rax),%rdi
    b8e4:	e8 47 fe ff ff       	call   b730 <createNode>
    b8e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b8ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b8f1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b8f8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b8fc:	48 83 c7 08          	add    $0x8,%rdi
    b900:	e8 bb 27 00 00       	call   e0c0 <slipV_setValueNil>
    b905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b909:	48 83 c4 10          	add    $0x10,%rsp
    b90d:	5d                   	pop    %rbp
    b90e:	c3                   	ret
    b90f:	90                   	nop

000000000000b910 <slipL_create_IntNodeFromStr>:
    b910:	55                   	push   %rbp
    b911:	48 89 e5             	mov    %rsp,%rbp
    b914:	48 83 ec 20          	sub    $0x20,%rsp
    b918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b91c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b920:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b924:	31 c0                	xor    %eax,%eax
    b926:	89 c6                	mov    %eax,%esi
    b928:	31 d2                	xor    %edx,%edx
    b92a:	e8 21 78 ff ff       	call   3150 <strtol@plt>
    b92f:	89 45 ec             	mov    %eax,-0x14(%rbp)
    b932:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b936:	8b 75 ec             	mov    -0x14(%rbp),%esi
    b939:	e8 a2 fd ff ff       	call   b6e0 <slipL_create_IntNode>
    b93e:	48 83 c4 20          	add    $0x20,%rsp
    b942:	5d                   	pop    %rbp
    b943:	c3                   	ret
    b944:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b94b:	00 00 00 
    b94e:	66 90                	xchg   %ax,%ax

000000000000b950 <slipL_create_FloatNodeFromStr>:
    b950:	55                   	push   %rbp
    b951:	48 89 e5             	mov    %rsp,%rbp
    b954:	48 83 ec 20          	sub    $0x20,%rsp
    b958:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b95c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b960:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    b964:	e8 37 77 ff ff       	call   30a0 <atof@plt>
    b969:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    b96e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    b972:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
    b977:	e8 f4 fd ff ff       	call   b770 <slipL_create_FloatNode>
    b97c:	48 83 c4 20          	add    $0x20,%rsp
    b980:	5d                   	pop    %rbp
    b981:	c3                   	ret
    b982:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    b989:	00 00 00 
    b98c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000b990 <slipL_makeList>:
    b990:	55                   	push   %rbp
    b991:	48 89 e5             	mov    %rsp,%rbp
    b994:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
    b99b:	84 c0                	test   %al,%al
    b99d:	0f 84 2f 00 00 00    	je     b9d2 <slipL_makeList+0x42>
    b9a3:	0f 29 85 30 ff ff ff 	movaps %xmm0,-0xd0(%rbp)
    b9aa:	0f 29 8d 40 ff ff ff 	movaps %xmm1,-0xc0(%rbp)
    b9b1:	0f 29 95 50 ff ff ff 	movaps %xmm2,-0xb0(%rbp)
    b9b8:	0f 29 9d 60 ff ff ff 	movaps %xmm3,-0xa0(%rbp)
    b9bf:	0f 29 a5 70 ff ff ff 	movaps %xmm4,-0x90(%rbp)
    b9c6:	0f 29 6d 80          	movaps %xmm5,-0x80(%rbp)
    b9ca:	0f 29 75 90          	movaps %xmm6,-0x70(%rbp)
    b9ce:	0f 29 7d a0          	movaps %xmm7,-0x60(%rbp)
    b9d2:	4c 89 8d 28 ff ff ff 	mov    %r9,-0xd8(%rbp)
    b9d9:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
    b9e0:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
    b9e7:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
    b9ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9f2:	89 75 f4             	mov    %esi,-0xc(%rbp)
    b9f5:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    b9fc:	00 
    b9fd:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    ba04:	00 
    ba05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ba09:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    ba10:	48 89 48 10          	mov    %rcx,0x10(%rax)
    ba14:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
    ba18:	48 89 48 08          	mov    %rcx,0x8(%rax)
    ba1c:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
    ba23:	c7 00 10 00 00 00    	movl   $0x10,(%rax)
    ba29:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
    ba30:	8b 45 bc             	mov    -0x44(%rbp),%eax
    ba33:	3b 45 f4             	cmp    -0xc(%rbp),%eax
    ba36:	0f 8d c4 00 00 00    	jge    bb00 <slipL_makeList+0x170>
    ba3c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ba40:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    ba47:	8b 45 d0             	mov    -0x30(%rbp),%eax
    ba4a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
    ba50:	83 f8 28             	cmp    $0x28,%eax
    ba53:	0f 87 25 00 00 00    	ja     ba7e <slipL_makeList+0xee>
    ba59:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    ba60:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
    ba66:	48 63 c2             	movslq %edx,%rax
    ba69:	48 03 41 10          	add    0x10(%rcx),%rax
    ba6d:	83 c2 08             	add    $0x8,%edx
    ba70:	89 11                	mov    %edx,(%rcx)
    ba72:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    ba79:	e9 1d 00 00 00       	jmp    ba9b <slipL_makeList+0x10b>
    ba7e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
    ba85:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    ba89:	48 89 d0             	mov    %rdx,%rax
    ba8c:	48 83 c2 08          	add    $0x8,%rdx
    ba90:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    ba94:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    ba9b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    baa2:	48 8b 00             	mov    (%rax),%rax
    baa5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    baa9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    baad:	48 83 38 00          	cmpq   $0x0,(%rax)
    bab1:	0f 84 11 00 00 00    	je     bac8 <slipL_makeList+0x138>
    bab7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    babb:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    babf:	e8 bc fd ff ff       	call   b880 <slipL_create_ListNode>
    bac4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    bac8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    bacd:	0f 85 0d 00 00 00    	jne    bae0 <slipL_makeList+0x150>
    bad3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    bad7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    badb:	e9 0d 00 00 00       	jmp    baed <slipL_makeList+0x15d>
    bae0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    bae4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    bae8:	e8 23 00 00 00       	call   bb10 <slipL_concat>
    baed:	e9 00 00 00 00       	jmp    baf2 <slipL_makeList+0x162>
    baf2:	8b 45 bc             	mov    -0x44(%rbp),%eax
    baf5:	83 c0 01             	add    $0x1,%eax
    baf8:	89 45 bc             	mov    %eax,-0x44(%rbp)
    bafb:	e9 30 ff ff ff       	jmp    ba30 <slipL_makeList+0xa0>
    bb00:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    bb04:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
    bb0b:	5d                   	pop    %rbp
    bb0c:	c3                   	ret
    bb0d:	0f 1f 00             	nopl   (%rax)

000000000000bb10 <slipL_concat>:
    bb10:	55                   	push   %rbp
    bb11:	48 89 e5             	mov    %rsp,%rbp
    bb14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bb1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb20:	48 83 38 00          	cmpq   $0x0,(%rax)
    bb24:	0f 84 10 00 00 00    	je     bb3a <slipL_concat+0x2a>
    bb2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb2e:	48 8b 00             	mov    (%rax),%rax
    bb31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bb35:	e9 e2 ff ff ff       	jmp    bb1c <slipL_concat+0xc>
    bb3a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bb3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb42:	48 89 08             	mov    %rcx,(%rax)
    bb45:	5d                   	pop    %rbp
    bb46:	c3                   	ret
    bb47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    bb4e:	00 00 

000000000000bb50 <slipL_forward>:
    bb50:	55                   	push   %rbp
    bb51:	48 89 e5             	mov    %rsp,%rbp
    bb54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb5c:	48 8b 00             	mov    (%rax),%rax
    bb5f:	5d                   	pop    %rbp
    bb60:	c3                   	ret
    bb61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    bb68:	00 00 00 
    bb6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000bb70 <slipL_getLength>:
    bb70:	55                   	push   %rbp
    bb71:	48 89 e5             	mov    %rsp,%rbp
    bb74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    bb7f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    bb84:	0f 84 19 00 00 00    	je     bba3 <slipL_getLength+0x33>
    bb8a:	8b 45 f4             	mov    -0xc(%rbp),%eax
    bb8d:	83 c0 01             	add    $0x1,%eax
    bb90:	89 45 f4             	mov    %eax,-0xc(%rbp)
    bb93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb97:	48 8b 00             	mov    (%rax),%rax
    bb9a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bb9e:	e9 dc ff ff ff       	jmp    bb7f <slipL_getLength+0xf>
    bba3:	8b 45 f4             	mov    -0xc(%rbp),%eax
    bba6:	5d                   	pop    %rbp
    bba7:	c3                   	ret
    bba8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    bbaf:	00 

000000000000bbb0 <slipL_print>:
    bbb0:	55                   	push   %rbp
    bbb1:	48 89 e5             	mov    %rsp,%rbp
    bbb4:	48 83 ec 10          	sub    $0x10,%rsp
    bbb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbbc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    bbc1:	0f 85 13 00 00 00    	jne    bbda <slipL_print+0x2a>
    bbc7:	48 8d 3d c6 cd 00 00 	lea    0xcdc6(%rip),%rdi        # 18994 <getFreeElement.b+0x194>
    bbce:	b0 00                	mov    $0x0,%al
    bbd0:	e8 fb 74 ff ff       	call   30d0 <printf@plt>
    bbd5:	e9 2b 00 00 00       	jmp    bc05 <slipL_print+0x55>
    bbda:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    bbde:	31 f6                	xor    %esi,%esi
    bbe0:	ba 04 00 00 00       	mov    $0x4,%edx
    bbe5:	e8 16 75 ff ff       	call   3100 <memset@plt>
    bbea:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    bbee:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    bbf2:	e8 19 00 00 00       	call   bc10 <prettyPrint>
    bbf7:	48 8d 3d 2d c5 00 00 	lea    0xc52d(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    bbfe:	b0 00                	mov    $0x0,%al
    bc00:	e8 cb 74 ff ff       	call   30d0 <printf@plt>
    bc05:	48 83 c4 10          	add    $0x10,%rsp
    bc09:	5d                   	pop    %rbp
    bc0a:	c3                   	ret
    bc0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000bc10 <prettyPrint>:
    bc10:	55                   	push   %rbp
    bc11:	48 89 e5             	mov    %rsp,%rbp
    bc14:	48 83 ec 20          	sub    $0x20,%rsp
    bc18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bc20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    bc25:	0f 85 05 00 00 00    	jne    bc30 <prettyPrint+0x20>
    bc2b:	e9 1a 01 00 00       	jmp    bd4a <prettyPrint+0x13a>
    bc30:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    bc34:	e8 27 04 00 00       	call   c060 <startNewLine>
    bc39:	48 8d 3d d7 cd 00 00 	lea    0xcdd7(%rip),%rdi        # 18a17 <getFreeElement.b+0x217>
    bc40:	b0 00                	mov    $0x0,%al
    bc42:	e8 89 74 ff ff       	call   30d0 <printf@plt>
    bc47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bc4b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    bc4f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bc54:	0f 84 e2 00 00 00    	je     bd3c <prettyPrint+0x12c>
    bc5a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bc5f:	0f 84 99 00 00 00    	je     bcfe <prettyPrint+0xee>
    bc65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc69:	81 78 10 00 01 00 00 	cmpl   $0x100,0x10(%rax)
    bc70:	0f 85 88 00 00 00    	jne    bcfe <prettyPrint+0xee>
    bc76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc7a:	48 8b 78 08          	mov    0x8(%rax),%rdi
    bc7e:	e8 2d 04 00 00       	call   c0b0 <isCompact>
    bc83:	83 f8 00             	cmp    $0x0,%eax
    bc86:	0f 84 12 00 00 00    	je     bc9e <prettyPrint+0x8e>
    bc8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc90:	48 8b 78 08          	mov    0x8(%rax),%rdi
    bc94:	e8 a7 04 00 00       	call   c140 <compactPrint>
    bc99:	e9 5b 00 00 00       	jmp    bcf9 <prettyPrint+0xe9>
    bc9e:	48 8d 3d 86 c4 00 00 	lea    0xc486(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    bca5:	b0 00                	mov    $0x0,%al
    bca7:	e8 24 74 ff ff       	call   30d0 <printf@plt>
    bcac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcb0:	8b 08                	mov    (%rax),%ecx
    bcb2:	83 c1 01             	add    $0x1,%ecx
    bcb5:	89 08                	mov    %ecx,(%rax)
    bcb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bcbb:	81 78 10 00 01 00 00 	cmpl   $0x100,0x10(%rax)
    bcc2:	0f 85 16 00 00 00    	jne    bcde <prettyPrint+0xce>
    bcc8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    bccc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bcd0:	48 8b 70 08          	mov    0x8(%rax),%rsi
    bcd4:	e8 37 ff ff ff       	call   bc10 <prettyPrint>
    bcd9:	e9 10 00 00 00       	jmp    bcee <prettyPrint+0xde>
    bcde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bce2:	48 8b 78 08          	mov    0x8(%rax),%rdi
    bce6:	8b 70 10             	mov    0x10(%rax),%esi
    bce9:	e8 42 2c 00 00       	call   e930 <slipV_printValue>
    bcee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcf2:	8b 08                	mov    (%rax),%ecx
    bcf4:	83 c1 ff             	add    $0xffffffff,%ecx
    bcf7:	89 08                	mov    %ecx,(%rax)
    bcf9:	e9 20 00 00 00       	jmp    bd1e <prettyPrint+0x10e>
    bcfe:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bd03:	0f 84 10 00 00 00    	je     bd19 <prettyPrint+0x109>
    bd09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd0d:	48 8b 78 08          	mov    0x8(%rax),%rdi
    bd11:	8b 70 10             	mov    0x10(%rax),%esi
    bd14:	e8 17 2c 00 00       	call   e930 <slipV_printValue>
    bd19:	e9 00 00 00 00       	jmp    bd1e <prettyPrint+0x10e>
    bd1e:	48 8d 3d 61 d1 00 00 	lea    0xd161(%rip),%rdi        # 18e86 <getFreeElement.b+0x686>
    bd25:	b0 00                	mov    $0x0,%al
    bd27:	e8 a4 73 ff ff       	call   30d0 <printf@plt>
    bd2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd30:	48 8b 00             	mov    (%rax),%rax
    bd33:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    bd37:	e9 13 ff ff ff       	jmp    bc4f <prettyPrint+0x3f>
    bd3c:	48 8d 3d 82 e4 00 00 	lea    0xe482(%rip),%rdi        # 1a1c5 <yy_rule_can_match_eol+0x265>
    bd43:	b0 00                	mov    $0x0,%al
    bd45:	e8 86 73 ff ff       	call   30d0 <printf@plt>
    bd4a:	48 83 c4 20          	add    $0x20,%rsp
    bd4e:	5d                   	pop    %rbp
    bd4f:	c3                   	ret

000000000000bd50 <slipL_sprint>:
    bd50:	55                   	push   %rbp
    bd51:	48 89 e5             	mov    %rsp,%rbp
    bd54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bd5c:	31 c0                	xor    %eax,%eax
    bd5e:	5d                   	pop    %rbp
    bd5f:	c3                   	ret

000000000000bd60 <slipL_parseFile>:
    bd60:	55                   	push   %rbp
    bd61:	48 89 e5             	mov    %rsp,%rbp
    bd64:	48 83 ec 40          	sub    $0x40,%rsp
    bd68:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    bd6c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    bd70:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    bd74:	48 8d 35 40 ca 00 00 	lea    0xca40(%rip),%rsi        # 187bb <_IO_stdin_used+0x7bb>
    bd7b:	e8 40 74 ff ff       	call   31c0 <fopen@plt>
    bd80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    bd84:	48 83 f8 00          	cmp    $0x0,%rax
    bd88:	0f 85 1f 00 00 00    	jne    bdad <slipL_parseFile+0x4d>
    bd8e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    bd92:	48 8d 3d 0c cc 00 00 	lea    0xcc0c(%rip),%rdi        # 189a5 <getFreeElement.b+0x1a5>
    bd99:	b0 00                	mov    $0x0,%al
    bd9b:	e8 30 73 ff ff       	call   30d0 <printf@plt>
    bda0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    bda7:	00 
    bda8:	e9 8c 00 00 00       	jmp    be39 <slipL_parseFile+0xd9>
    bdad:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    bdb1:	31 c0                	xor    %eax,%eax
    bdb3:	89 c6                	mov    %eax,%esi
    bdb5:	ba 02 00 00 00       	mov    $0x2,%edx
    bdba:	e8 e1 73 ff ff       	call   31a0 <fseek@plt>
    bdbf:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    bdc3:	e8 78 73 ff ff       	call   3140 <ftell@plt>
    bdc8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    bdcc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    bdd0:	31 c0                	xor    %eax,%eax
    bdd2:	89 c6                	mov    %eax,%esi
    bdd4:	31 d2                	xor    %edx,%edx
    bdd6:	e8 c5 73 ff ff       	call   31a0 <fseek@plt>
    bddb:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    bddf:	48 83 c7 01          	add    $0x1,%rdi
    bde3:	e8 48 e3 ff ff       	call   a130 <slipM_malloc>
    bde8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    bdec:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    bdf0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    bdf4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    bdf8:	ba 01 00 00 00       	mov    $0x1,%edx
    bdfd:	e8 8e 72 ff ff       	call   3090 <fread@plt>
    be02:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    be06:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    be0a:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
    be0e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    be12:	e8 99 72 ff ff       	call   30b0 <fclose@plt>
    be17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    be1b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    be1f:	e8 6c 7a 00 00       	call   13890 <slipL_parseString>
    be24:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    be28:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    be2c:	e8 ff 71 ff ff       	call   3030 <free@plt>
    be31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    be35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    be39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be3d:	48 83 c4 40          	add    $0x40,%rsp
    be41:	5d                   	pop    %rbp
    be42:	c3                   	ret
    be43:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    be4a:	00 00 00 
    be4d:	0f 1f 00             	nopl   (%rax)

000000000000be50 <slipL_pullListArgument>:
    be50:	55                   	push   %rbp
    be51:	48 89 e5             	mov    %rsp,%rbp
    be54:	48 83 ec 30          	sub    $0x30,%rsp
    be58:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    be5c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    be60:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    be64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    be68:	48 83 38 00          	cmpq   $0x0,(%rax)
    be6c:	0f 85 24 00 00 00    	jne    be96 <slipL_pullListArgument+0x46>
    be72:	48 8b 05 77 41 01 00 	mov    0x14177(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    be79:	48 8b 38             	mov    (%rax),%rdi
    be7c:	48 8d 35 3c c5 00 00 	lea    0xc53c(%rip),%rsi        # 183bf <_IO_stdin_used+0x3bf>
    be83:	b0 00                	mov    $0x0,%al
    be85:	e8 a6 72 ff ff       	call   3130 <fprintf@plt>
    be8a:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    be91:	e9 b9 00 00 00       	jmp    bf4f <slipL_pullListArgument+0xff>
    be96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    be9a:	48 8b 00             	mov    (%rax),%rax
    be9d:	8b 40 10             	mov    0x10(%rax),%eax
    bea0:	48 23 45 e8          	and    -0x18(%rbp),%rax
    bea4:	48 83 f8 00          	cmp    $0x0,%rax
    bea8:	0f 84 3c 00 00 00    	je     beea <slipL_pullListArgument+0x9a>
    beae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    beb2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    beb6:	48 8b 09             	mov    (%rcx),%rcx
    beb9:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    bebd:	48 89 10             	mov    %rdx,(%rax)
    bec0:	48 8b 49 10          	mov    0x10(%rcx),%rcx
    bec4:	48 89 48 08          	mov    %rcx,0x8(%rax)
    bec8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    becc:	48 8b 38             	mov    (%rax),%rdi
    becf:	e8 7c fc ff ff       	call   bb50 <slipL_forward>
    bed4:	48 89 c1             	mov    %rax,%rcx
    bed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bedb:	48 89 08             	mov    %rcx,(%rax)
    bede:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    bee5:	e9 65 00 00 00       	jmp    bf4f <slipL_pullListArgument+0xff>
    beea:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    beee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bef2:	89 c6                	mov    %eax,%esi
    bef4:	e8 b7 26 00 00       	call   e5b0 <slipV_sprintType>
    bef9:	48 8b 05 f0 40 01 00 	mov    0x140f0(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    bf00:	48 8b 38             	mov    (%rax),%rdi
    bf03:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    bf07:	48 8d 35 b5 ca 00 00 	lea    0xcab5(%rip),%rsi        # 189c3 <getFreeElement.b+0x1c3>
    bf0e:	b0 00                	mov    $0x0,%al
    bf10:	e8 1b 72 ff ff       	call   3130 <fprintf@plt>
    bf15:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    bf19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bf1d:	48 8b 00             	mov    (%rax),%rax
    bf20:	48 8b 70 08          	mov    0x8(%rax),%rsi
    bf24:	8b 50 10             	mov    0x10(%rax),%edx
    bf27:	e8 f4 2b 00 00       	call   eb20 <slipV_sprintValueType>
    bf2c:	48 8b 05 bd 40 01 00 	mov    0x140bd(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
    bf33:	48 8b 38             	mov    (%rax),%rdi
    bf36:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    bf3a:	48 8d 35 bc ca 00 00 	lea    0xcabc(%rip),%rsi        # 189fd <getFreeElement.b+0x1fd>
    bf41:	b0 00                	mov    $0x0,%al
    bf43:	e8 e8 71 ff ff       	call   3130 <fprintf@plt>
    bf48:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    bf4f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    bf52:	48 83 c4 30          	add    $0x30,%rsp
    bf56:	5d                   	pop    %rbp
    bf57:	c3                   	ret
    bf58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    bf5f:	00 

000000000000bf60 <slipD_list>:
    bf60:	55                   	push   %rbp
    bf61:	48 89 e5             	mov    %rsp,%rbp
    bf64:	48 83 ec 10          	sub    $0x10,%rsp
    bf68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf70:	48 8b 40 18          	mov    0x18(%rax),%rax
    bf74:	48 63 0d a5 44 01 00 	movslq 0x144a5(%rip),%rcx        # 20420 <LIST_POOL>
    bf7b:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    bf7f:	e8 3c e3 ff ff       	call   a2c0 <slipM_pool_get_meta>
    bf84:	48 83 c4 10          	add    $0x10,%rsp
    bf88:	5d                   	pop    %rbp
    bf89:	c3                   	ret
    bf8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000bf90 <slipD_getListMeta>:
    bf90:	55                   	push   %rbp
    bf91:	48 89 e5             	mov    %rsp,%rbp
    bf94:	48 8d 05 95 41 01 00 	lea    0x14195(%rip),%rax        # 20130 <slipD_getListMeta.meta>
    bf9b:	5d                   	pop    %rbp
    bf9c:	c3                   	ret
    bf9d:	0f 1f 00             	nopl   (%rax)

000000000000bfa0 <createPool>:
    bfa0:	55                   	push   %rbp
    bfa1:	48 89 e5             	mov    %rsp,%rbp
    bfa4:	48 83 ec 10          	sub    $0x10,%rsp
    bfa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfb0:	48 8b 70 48          	mov    0x48(%rax),%rsi
    bfb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfb8:	48 8b 40 48          	mov    0x48(%rax),%rax
    bfbc:	48 8b 00             	mov    (%rax),%rax
    bfbf:	48 8b 50 30          	mov    0x30(%rax),%rdx
    bfc3:	bf 18 00 00 00       	mov    $0x18,%edi
    bfc8:	e8 23 e2 ff ff       	call   a1f0 <slipM_pool_create>
    bfcd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    bfd1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    bfd5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    bfd9:	8b 15 41 44 01 00    	mov    0x14441(%rip),%edx        # 20420 <LIST_POOL>
    bfdf:	e8 0c f6 ff ff       	call   b5f0 <slipC_registerPool>
    bfe4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bfe8:	48 83 c4 10          	add    $0x10,%rsp
    bfec:	5d                   	pop    %rbp
    bfed:	c3                   	ret
    bfee:	66 90                	xchg   %ax,%ax

000000000000bff0 <create>:
    bff0:	55                   	push   %rbp
    bff1:	48 89 e5             	mov    %rsp,%rbp
    bff4:	48 83 ec 10          	sub    $0x10,%rsp
    bff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c000:	48 8b 40 18          	mov    0x18(%rax),%rax
    c004:	48 63 0d 15 44 01 00 	movslq 0x14415(%rip),%rcx        # 20420 <LIST_POOL>
    c00b:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    c00f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c013:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c017:	e8 c4 e2 ff ff       	call   a2e0 <slipM_pool_alloc>
    c01c:	48 83 c4 10          	add    $0x10,%rsp
    c020:	5d                   	pop    %rbp
    c021:	c3                   	ret
    c022:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c029:	00 00 00 
    c02c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000c030 <releaseNode>:
    c030:	55                   	push   %rbp
    c031:	48 89 e5             	mov    %rsp,%rbp
    c034:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c038:	5d                   	pop    %rbp
    c039:	c3                   	ret
    c03a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000c040 <list_register>:
    c040:	55                   	push   %rbp
    c041:	48 89 e5             	mov    %rsp,%rbp
    c044:	b0 00                	mov    $0x0,%al
    c046:	e8 75 f6 ff ff       	call   b6c0 <slipG_registerPoolID>
    c04b:	89 05 cf 43 01 00    	mov    %eax,0x143cf(%rip)        # 20420 <LIST_POOL>
    c051:	5d                   	pop    %rbp
    c052:	c3                   	ret
    c053:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c05a:	00 00 00 
    c05d:	0f 1f 00             	nopl   (%rax)

000000000000c060 <startNewLine>:
    c060:	55                   	push   %rbp
    c061:	48 89 e5             	mov    %rsp,%rbp
    c064:	48 83 ec 10          	sub    $0x10,%rsp
    c068:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c06c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    c073:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c076:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c07a:	3b 01                	cmp    (%rcx),%eax
    c07c:	0f 8d 1c 00 00 00    	jge    c09e <startNewLine+0x3e>
    c082:	48 8d 3d fc cd 00 00 	lea    0xcdfc(%rip),%rdi        # 18e85 <getFreeElement.b+0x685>
    c089:	b0 00                	mov    $0x0,%al
    c08b:	e8 40 70 ff ff       	call   30d0 <printf@plt>
    c090:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c093:	83 c0 01             	add    $0x1,%eax
    c096:	89 45 f4             	mov    %eax,-0xc(%rbp)
    c099:	e9 d5 ff ff ff       	jmp    c073 <startNewLine+0x13>
    c09e:	48 83 c4 10          	add    $0x10,%rsp
    c0a2:	5d                   	pop    %rbp
    c0a3:	c3                   	ret
    c0a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c0ab:	00 00 00 
    c0ae:	66 90                	xchg   %ax,%ax

000000000000c0b0 <isCompact>:
    c0b0:	55                   	push   %rbp
    c0b1:	48 89 e5             	mov    %rsp,%rbp
    c0b4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c0b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    c0bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    c0c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c0ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c0ce:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    c0d3:	0f 84 38 00 00 00    	je     c111 <isCompact+0x61>
    c0d9:	8b 45 ec             	mov    -0x14(%rbp),%eax
    c0dc:	83 c0 01             	add    $0x1,%eax
    c0df:	89 45 ec             	mov    %eax,-0x14(%rbp)
    c0e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c0e6:	81 78 10 00 01 00 00 	cmpl   $0x100,0x10(%rax)
    c0ed:	0f 85 09 00 00 00    	jne    c0fc <isCompact+0x4c>
    c0f3:	8b 45 e8             	mov    -0x18(%rbp),%eax
    c0f6:	83 c0 01             	add    $0x1,%eax
    c0f9:	89 45 e8             	mov    %eax,-0x18(%rbp)
    c0fc:	e9 00 00 00 00       	jmp    c101 <isCompact+0x51>
    c101:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c105:	48 8b 00             	mov    (%rax),%rax
    c108:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c10c:	e9 bd ff ff ff       	jmp    c0ce <isCompact+0x1e>
    c111:	83 7d ec 06          	cmpl   $0x6,-0x14(%rbp)
    c115:	0f 8f 16 00 00 00    	jg     c131 <isCompact+0x81>
    c11b:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
    c11f:	0f 85 0c 00 00 00    	jne    c131 <isCompact+0x81>
    c125:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    c12c:	e9 07 00 00 00       	jmp    c138 <isCompact+0x88>
    c131:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    c138:	8b 45 fc             	mov    -0x4(%rbp),%eax
    c13b:	5d                   	pop    %rbp
    c13c:	c3                   	ret
    c13d:	0f 1f 00             	nopl   (%rax)

000000000000c140 <compactPrint>:
    c140:	55                   	push   %rbp
    c141:	48 89 e5             	mov    %rsp,%rbp
    c144:	48 83 ec 10          	sub    $0x10,%rsp
    c148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c14c:	48 8d 3d c4 c8 00 00 	lea    0xc8c4(%rip),%rdi        # 18a17 <getFreeElement.b+0x217>
    c153:	b0 00                	mov    $0x0,%al
    c155:	e8 76 6f ff ff       	call   30d0 <printf@plt>
    c15a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c15e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c162:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c167:	0f 84 2e 00 00 00    	je     c19b <compactPrint+0x5b>
    c16d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c171:	48 8b 78 08          	mov    0x8(%rax),%rdi
    c175:	8b 70 10             	mov    0x10(%rax),%esi
    c178:	e8 b3 27 00 00       	call   e930 <slipV_printValue>
    c17d:	48 8d 3d 02 cd 00 00 	lea    0xcd02(%rip),%rdi        # 18e86 <getFreeElement.b+0x686>
    c184:	b0 00                	mov    $0x0,%al
    c186:	e8 45 6f ff ff       	call   30d0 <printf@plt>
    c18b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c18f:	48 8b 00             	mov    (%rax),%rax
    c192:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c196:	e9 c7 ff ff ff       	jmp    c162 <compactPrint+0x22>
    c19b:	48 8d 3d 23 e0 00 00 	lea    0xe023(%rip),%rdi        # 1a1c5 <yy_rule_can_match_eol+0x265>
    c1a2:	b0 00                	mov    $0x0,%al
    c1a4:	e8 27 6f ff ff       	call   30d0 <printf@plt>
    c1a9:	48 83 c4 10          	add    $0x10,%rsp
    c1ad:	5d                   	pop    %rbp
    c1ae:	c3                   	ret
    c1af:	90                   	nop

000000000000c1b0 <slipP_createProto>:
    c1b0:	55                   	push   %rbp
    c1b1:	48 89 e5             	mov    %rsp,%rbp
    c1b4:	48 83 ec 10          	sub    $0x10,%rsp
    c1b8:	bf 01 00 00 00       	mov    $0x1,%edi
    c1bd:	be 58 00 00 00       	mov    $0x58,%esi
    c1c2:	e8 49 6f ff ff       	call   3110 <calloc@plt>
    c1c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c1cb:	bf 08 00 00 00       	mov    $0x8,%edi
    c1d0:	be 04 00 00 00       	mov    $0x4,%esi
    c1d5:	e8 36 6f ff ff       	call   3110 <calloc@plt>
    c1da:	48 89 c1             	mov    %rax,%rcx
    c1dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1e1:	48 89 48 38          	mov    %rcx,0x38(%rax)
    c1e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1e9:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
    c1f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1f4:	c7 40 1c 08 00 00 00 	movl   $0x8,0x1c(%rax)
    c1fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1ff:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    c206:	00 
    c207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c20b:	48 83 c4 10          	add    $0x10,%rsp
    c20f:	5d                   	pop    %rbp
    c210:	c3                   	ret
    c211:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c218:	00 00 00 
    c21b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000c220 <slipP_addInstruction>:
    c220:	55                   	push   %rbp
    c221:	48 89 e5             	mov    %rsp,%rbp
    c224:	48 83 ec 10          	sub    $0x10,%rsp
    c228:	89 75 f8             	mov    %esi,-0x8(%rbp)
    c22b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c22f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c233:	8b 40 18             	mov    0x18(%rax),%eax
    c236:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c23a:	3b 41 1c             	cmp    0x1c(%rcx),%eax
    c23d:	0f 82 32 00 00 00    	jb     c275 <slipP_addInstruction+0x55>
    c243:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c247:	8b 48 1c             	mov    0x1c(%rax),%ecx
    c24a:	c1 e1 01             	shl    $0x1,%ecx
    c24d:	89 48 1c             	mov    %ecx,0x1c(%rax)
    c250:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c254:	48 8b 78 38          	mov    0x38(%rax),%rdi
    c258:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c25c:	8b 40 1c             	mov    0x1c(%rax),%eax
    c25f:	89 c6                	mov    %eax,%esi
    c261:	48 c1 e6 02          	shl    $0x2,%rsi
    c265:	e8 46 6f ff ff       	call   31b0 <realloc@plt>
    c26a:	48 89 c1             	mov    %rax,%rcx
    c26d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c271:	48 89 48 38          	mov    %rcx,0x38(%rax)
    c275:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c279:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
    c27d:	e8 4e 00 00 00       	call   c2d0 <optimize>
    c282:	83 f8 00             	cmp    $0x0,%eax
    c285:	0f 85 1f 00 00 00    	jne    c2aa <slipP_addInstruction+0x8a>
    c28b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c28f:	48 8b 40 38          	mov    0x38(%rax),%rax
    c293:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c297:	8b 4a 18             	mov    0x18(%rdx),%ecx
    c29a:	89 ce                	mov    %ecx,%esi
    c29c:	83 c6 01             	add    $0x1,%esi
    c29f:	89 72 18             	mov    %esi,0x18(%rdx)
    c2a2:	89 c9                	mov    %ecx,%ecx
    c2a4:	8b 55 f8             	mov    -0x8(%rbp),%edx
    c2a7:	89 14 88             	mov    %edx,(%rax,%rcx,4)
    c2aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c2ae:	8b 75 f8             	mov    -0x8(%rbp),%esi
    c2b1:	e8 7a 00 00 00       	call   c330 <updateStackSize>
    c2b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c2ba:	8b 40 18             	mov    0x18(%rax),%eax
    c2bd:	83 e8 01             	sub    $0x1,%eax
    c2c0:	48 83 c4 10          	add    $0x10,%rsp
    c2c4:	5d                   	pop    %rbp
    c2c5:	c3                   	ret
    c2c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c2cd:	00 00 00 

000000000000c2d0 <optimize>:
    c2d0:	55                   	push   %rbp
    c2d1:	48 89 e5             	mov    %rsp,%rbp
    c2d4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c2d8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    c2dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c2e0:	8a 00                	mov    (%rax),%al
    c2e2:	24 3f                	and    $0x3f,%al
    c2e4:	2c 01                	sub    $0x1,%al
    c2e6:	0f 85 34 00 00 00    	jne    c320 <optimize+0x50>
    c2ec:	e9 00 00 00 00       	jmp    c2f1 <optimize+0x21>
    c2f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c2f5:	0f b7 40 02          	movzwl 0x2(%rax),%eax
    c2f9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    c2fd:	66 8b 09             	mov    (%rcx),%cx
    c300:	66 c1 e9 06          	shr    $0x6,%cx
    c304:	0f b7 c9             	movzwl %cx,%ecx
    c307:	39 c8                	cmp    %ecx,%eax
    c309:	0f 85 0c 00 00 00    	jne    c31b <optimize+0x4b>
    c30f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    c316:	e9 0c 00 00 00       	jmp    c327 <optimize+0x57>
    c31b:	e9 00 00 00 00       	jmp    c320 <optimize+0x50>
    c320:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    c327:	8b 45 fc             	mov    -0x4(%rbp),%eax
    c32a:	5d                   	pop    %rbp
    c32b:	c3                   	ret
    c32c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000c330 <updateStackSize>:
    c330:	55                   	push   %rbp
    c331:	48 89 e5             	mov    %rsp,%rbp
    c334:	48 83 ec 20          	sub    $0x20,%rsp
    c338:	89 75 f8             	mov    %esi,-0x8(%rbp)
    c33b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    c33f:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
    c343:	83 e0 3f             	and    $0x3f,%eax
    c346:	89 45 ec             	mov    %eax,-0x14(%rbp)
    c349:	83 c0 ff             	add    $0xffffffff,%eax
    c34c:	83 e8 03             	sub    $0x3,%eax
    c34f:	0f 82 3c 00 00 00    	jb     c391 <updateStackSize+0x61>
    c355:	e9 00 00 00 00       	jmp    c35a <updateStackSize+0x2a>
    c35a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    c35d:	83 e8 04             	sub    $0x4,%eax
    c360:	0f 85 48 00 00 00    	jne    c3ae <updateStackSize+0x7e>
    c366:	e9 00 00 00 00       	jmp    c36b <updateStackSize+0x3b>
    c36b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c36f:	48 83 c7 08          	add    $0x8,%rdi
    c373:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    c377:	66 c1 e8 06          	shr    $0x6,%ax
    c37b:	0f b7 f0             	movzwl %ax,%esi
    c37e:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
    c382:	01 c6                	add    %eax,%esi
    c384:	83 ee 01             	sub    $0x1,%esi
    c387:	e8 04 08 00 00       	call   cb90 <updateToMax>
    c38c:	e9 22 00 00 00       	jmp    c3b3 <updateStackSize+0x83>
    c391:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c395:	48 83 c7 08          	add    $0x8,%rdi
    c399:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
    c39d:	66 c1 e8 06          	shr    $0x6,%ax
    c3a1:	0f b7 f0             	movzwl %ax,%esi
    c3a4:	e8 e7 07 00 00       	call   cb90 <updateToMax>
    c3a9:	e9 05 00 00 00       	jmp    c3b3 <updateStackSize+0x83>
    c3ae:	e9 00 00 00 00       	jmp    c3b3 <updateStackSize+0x83>
    c3b3:	48 83 c4 20          	add    $0x20,%rsp
    c3b7:	5d                   	pop    %rbp
    c3b8:	c3                   	ret
    c3b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000c3c0 <slipP_addConstant>:
    c3c0:	55                   	push   %rbp
    c3c1:	48 89 e5             	mov    %rsp,%rbp
    c3c4:	48 83 ec 20          	sub    $0x20,%rsp
    c3c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c3cc:	89 55 f8             	mov    %edx,-0x8(%rbp)
    c3cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c3d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3d7:	48 83 78 40 00       	cmpq   $0x0,0x40(%rax)
    c3dc:	0f 85 35 00 00 00    	jne    c417 <slipP_addConstant+0x57>
    c3e2:	bf 08 00 00 00       	mov    $0x8,%edi
    c3e7:	be 10 00 00 00       	mov    $0x10,%esi
    c3ec:	e8 1f 6d ff ff       	call   3110 <calloc@plt>
    c3f1:	48 89 c1             	mov    %rax,%rcx
    c3f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3f8:	48 89 48 40          	mov    %rcx,0x40(%rax)
    c3fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c400:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
    c407:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c40b:	c7 40 2c 08 00 00 00 	movl   $0x8,0x2c(%rax)
    c412:	e9 52 00 00 00       	jmp    c469 <slipP_addConstant+0xa9>
    c417:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c41b:	8b 40 28             	mov    0x28(%rax),%eax
    c41e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    c422:	3b 41 2c             	cmp    0x2c(%rcx),%eax
    c425:	0f 82 39 00 00 00    	jb     c464 <slipP_addConstant+0xa4>
    c42b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c42f:	8b 48 2c             	mov    0x2c(%rax),%ecx
    c432:	c1 e9 01             	shr    $0x1,%ecx
    c435:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c439:	03 48 2c             	add    0x2c(%rax),%ecx
    c43c:	89 48 2c             	mov    %ecx,0x2c(%rax)
    c43f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c443:	48 8b 78 40          	mov    0x40(%rax),%rdi
    c447:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c44b:	8b 40 2c             	mov    0x2c(%rax),%eax
    c44e:	89 c6                	mov    %eax,%esi
    c450:	48 c1 e6 04          	shl    $0x4,%rsi
    c454:	e8 57 6d ff ff       	call   31b0 <realloc@plt>
    c459:	48 89 c1             	mov    %rax,%rcx
    c45c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c460:	48 89 48 40          	mov    %rcx,0x40(%rax)
    c464:	e9 00 00 00 00       	jmp    c469 <slipP_addConstant+0xa9>
    c469:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c46d:	48 8b 40 40          	mov    0x40(%rax),%rax
    c471:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c475:	8b 4a 28             	mov    0x28(%rdx),%ecx
    c478:	89 ce                	mov    %ecx,%esi
    c47a:	83 c6 01             	add    $0x1,%esi
    c47d:	89 72 28             	mov    %esi,0x28(%rdx)
    c480:	89 c9                	mov    %ecx,%ecx
    c482:	48 c1 e1 04          	shl    $0x4,%rcx
    c486:	48 01 c8             	add    %rcx,%rax
    c489:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c48d:	48 89 08             	mov    %rcx,(%rax)
    c490:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c494:	48 89 48 08          	mov    %rcx,0x8(%rax)
    c498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c49c:	8b 40 28             	mov    0x28(%rax),%eax
    c49f:	48 83 c4 20          	add    $0x20,%rsp
    c4a3:	5d                   	pop    %rbp
    c4a4:	c3                   	ret
    c4a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c4ac:	00 00 00 
    c4af:	90                   	nop

000000000000c4b0 <slipP_setArgs>:
    c4b0:	55                   	push   %rbp
    c4b1:	48 89 e5             	mov    %rsp,%rbp
    c4b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4b8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    c4bb:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    c4be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4c2:	89 48 0c             	mov    %ecx,0xc(%rax)
    c4c5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    c4c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4cc:	03 48 10             	add    0x10(%rax),%ecx
    c4cf:	89 48 10             	mov    %ecx,0x10(%rax)
    c4d2:	5d                   	pop    %rbp
    c4d3:	c3                   	ret
    c4d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c4db:	00 00 00 
    c4de:	66 90                	xchg   %ax,%ax

000000000000c4e0 <slipP_addLocalFunc>:
    c4e0:	55                   	push   %rbp
    c4e1:	48 89 e5             	mov    %rsp,%rbp
    c4e4:	48 83 ec 10          	sub    $0x10,%rsp
    c4e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c4f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4f4:	48 83 78 48 00       	cmpq   $0x0,0x48(%rax)
    c4f9:	0f 85 35 00 00 00    	jne    c534 <slipP_addLocalFunc+0x54>
    c4ff:	bf 04 00 00 00       	mov    $0x4,%edi
    c504:	be 08 00 00 00       	mov    $0x8,%esi
    c509:	e8 02 6c ff ff       	call   3110 <calloc@plt>
    c50e:	48 89 c1             	mov    %rax,%rcx
    c511:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c515:	48 89 48 48          	mov    %rcx,0x48(%rax)
    c519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c51d:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
    c524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c528:	c7 40 24 04 00 00 00 	movl   $0x4,0x24(%rax)
    c52f:	e9 4b 00 00 00       	jmp    c57f <slipP_addLocalFunc+0x9f>
    c534:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c538:	8b 40 20             	mov    0x20(%rax),%eax
    c53b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c53f:	3b 41 24             	cmp    0x24(%rcx),%eax
    c542:	0f 82 32 00 00 00    	jb     c57a <slipP_addLocalFunc+0x9a>
    c548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c54c:	8b 48 24             	mov    0x24(%rax),%ecx
    c54f:	83 c1 04             	add    $0x4,%ecx
    c552:	89 48 24             	mov    %ecx,0x24(%rax)
    c555:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c559:	48 8b 78 48          	mov    0x48(%rax),%rdi
    c55d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c561:	8b 40 24             	mov    0x24(%rax),%eax
    c564:	89 c6                	mov    %eax,%esi
    c566:	48 c1 e6 03          	shl    $0x3,%rsi
    c56a:	e8 41 6c ff ff       	call   31b0 <realloc@plt>
    c56f:	48 89 c1             	mov    %rax,%rcx
    c572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c576:	48 89 48 48          	mov    %rcx,0x48(%rax)
    c57a:	e9 00 00 00 00       	jmp    c57f <slipP_addLocalFunc+0x9f>
    c57f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c587:	48 8b 40 48          	mov    0x48(%rax),%rax
    c58b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    c58f:	8b 4e 20             	mov    0x20(%rsi),%ecx
    c592:	89 cf                	mov    %ecx,%edi
    c594:	83 c7 01             	add    $0x1,%edi
    c597:	89 7e 20             	mov    %edi,0x20(%rsi)
    c59a:	89 c9                	mov    %ecx,%ecx
    c59c:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
    c5a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5a4:	8b 40 20             	mov    0x20(%rax),%eax
    c5a7:	48 83 c4 10          	add    $0x10,%rsp
    c5ab:	5d                   	pop    %rbp
    c5ac:	c3                   	ret
    c5ad:	0f 1f 00             	nopl   (%rax)

000000000000c5b0 <slipP_addLocalVar>:
    c5b0:	55                   	push   %rbp
    c5b1:	48 89 e5             	mov    %rsp,%rbp
    c5b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5b8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    c5bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5bf:	8b 40 10             	mov    0x10(%rax),%eax
    c5c2:	89 45 f0             	mov    %eax,-0x10(%rbp)
    c5c5:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    c5c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5cc:	03 48 10             	add    0x10(%rax),%ecx
    c5cf:	89 48 10             	mov    %ecx,0x10(%rax)
    c5d2:	8b 45 f0             	mov    -0x10(%rbp),%eax
    c5d5:	5d                   	pop    %rbp
    c5d6:	c3                   	ret
    c5d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    c5de:	00 00 

000000000000c5e0 <slipP_popLocalVar>:
    c5e0:	55                   	push   %rbp
    c5e1:	48 89 e5             	mov    %rsp,%rbp
    c5e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5e8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    c5eb:	8b 55 f4             	mov    -0xc(%rbp),%edx
    c5ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5f2:	8b 48 10             	mov    0x10(%rax),%ecx
    c5f5:	29 d1                	sub    %edx,%ecx
    c5f7:	89 48 10             	mov    %ecx,0x10(%rax)
    c5fa:	5d                   	pop    %rbp
    c5fb:	c3                   	ret
    c5fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000c600 <slipP_dump>:
    c600:	55                   	push   %rbp
    c601:	48 89 e5             	mov    %rsp,%rbp
    c604:	48 83 ec 60          	sub    $0x60,%rsp
    c608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c60c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c610:	48 83 78 30 00       	cmpq   $0x0,0x30(%rax)
    c615:	0f 84 31 00 00 00    	je     c64c <slipP_dump+0x4c>
    c61b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c61f:	48 8b 78 30          	mov    0x30(%rax),%rdi
    c623:	e8 78 e3 ff ff       	call   a9a0 <slipM_getMeta>
    c628:	48 8b 40 68          	mov    0x68(%rax),%rax
    c62c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c630:	48 8b 79 30          	mov    0x30(%rcx),%rdi
    c634:	ff d0                	call   *%rax
    c636:	48 89 c6             	mov    %rax,%rsi
    c639:	48 8d 3d da c3 00 00 	lea    0xc3da(%rip),%rdi        # 18a1a <getFreeElement.b+0x21a>
    c640:	b0 00                	mov    $0x0,%al
    c642:	e8 89 6a ff ff       	call   30d0 <printf@plt>
    c647:	e9 0e 00 00 00       	jmp    c65a <slipP_dump+0x5a>
    c64c:	48 8d 3d d5 c3 00 00 	lea    0xc3d5(%rip),%rdi        # 18a28 <getFreeElement.b+0x228>
    c653:	b0 00                	mov    $0x0,%al
    c655:	e8 76 6a ff ff       	call   30d0 <printf@plt>
    c65a:	48 8d 3d d8 c3 00 00 	lea    0xc3d8(%rip),%rdi        # 18a39 <getFreeElement.b+0x239>
    c661:	b0 00                	mov    $0x0,%al
    c663:	e8 68 6a ff ff       	call   30d0 <printf@plt>
    c668:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    c66f:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c672:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c676:	3b 41 18             	cmp    0x18(%rcx),%eax
    c679:	0f 83 49 00 00 00    	jae    c6c8 <slipP_dump+0xc8>
    c67f:	8b 75 f4             	mov    -0xc(%rbp),%esi
    c682:	48 8d 3d b7 c3 00 00 	lea    0xc3b7(%rip),%rdi        # 18a40 <getFreeElement.b+0x240>
    c689:	b0 00                	mov    $0x0,%al
    c68b:	e8 40 6a ff ff       	call   30d0 <printf@plt>
    c690:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
    c694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c698:	48 8b 40 38          	mov    0x38(%rax),%rax
    c69c:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
    c6a0:	8b 34 88             	mov    (%rax,%rcx,4),%esi
    c6a3:	e8 58 b5 00 00       	call   17c00 <slipI_sprint>
    c6a8:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    c6ac:	48 8d 3d 8c be 00 00 	lea    0xbe8c(%rip),%rdi        # 1853f <_IO_stdin_used+0x53f>
    c6b3:	b0 00                	mov    $0x0,%al
    c6b5:	e8 16 6a ff ff       	call   30d0 <printf@plt>
    c6ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c6bd:	83 c0 01             	add    $0x1,%eax
    c6c0:	89 45 f4             	mov    %eax,-0xc(%rbp)
    c6c3:	e9 a7 ff ff ff       	jmp    c66f <slipP_dump+0x6f>
    c6c8:	48 8d 3d 78 c3 00 00 	lea    0xc378(%rip),%rdi        # 18a47 <getFreeElement.b+0x247>
    c6cf:	b0 00                	mov    $0x0,%al
    c6d1:	e8 fa 69 ff ff       	call   30d0 <printf@plt>
    c6d6:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    c6dd:	8b 45 ac             	mov    -0x54(%rbp),%eax
    c6e0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c6e4:	3b 41 28             	cmp    0x28(%rcx),%eax
    c6e7:	0f 83 3a 00 00 00    	jae    c727 <slipP_dump+0x127>
    c6ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6f1:	48 8b 40 40          	mov    0x40(%rax),%rax
    c6f5:	48 63 4d ac          	movslq -0x54(%rbp),%rcx
    c6f9:	48 c1 e1 04          	shl    $0x4,%rcx
    c6fd:	48 01 c8             	add    %rcx,%rax
    c700:	48 8b 38             	mov    (%rax),%rdi
    c703:	8b 70 08             	mov    0x8(%rax),%esi
    c706:	e8 25 22 00 00       	call   e930 <slipV_printValue>
    c70b:	48 8d 3d 19 ba 00 00 	lea    0xba19(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    c712:	b0 00                	mov    $0x0,%al
    c714:	e8 b7 69 ff ff       	call   30d0 <printf@plt>
    c719:	8b 45 ac             	mov    -0x54(%rbp),%eax
    c71c:	83 c0 01             	add    $0x1,%eax
    c71f:	89 45 ac             	mov    %eax,-0x54(%rbp)
    c722:	e9 b6 ff ff ff       	jmp    c6dd <slipP_dump+0xdd>
    c727:	48 8d 3d 25 bb 00 00 	lea    0xbb25(%rip),%rdi        # 18253 <_IO_stdin_used+0x253>
    c72e:	b0 00                	mov    $0x0,%al
    c730:	e8 9b 69 ff ff       	call   30d0 <printf@plt>
    c735:	48 83 c4 60          	add    $0x60,%rsp
    c739:	5d                   	pop    %rbp
    c73a:	c3                   	ret
    c73b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000c740 <slipP_dumpAll>:
    c740:	55                   	push   %rbp
    c741:	48 89 e5             	mov    %rsp,%rbp
    c744:	48 83 ec 60          	sub    $0x60,%rsp
    c748:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c74c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c750:	48 83 78 30 00       	cmpq   $0x0,0x30(%rax)
    c755:	0f 84 31 00 00 00    	je     c78c <slipP_dumpAll+0x4c>
    c75b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c75f:	48 8b 78 30          	mov    0x30(%rax),%rdi
    c763:	e8 38 e2 ff ff       	call   a9a0 <slipM_getMeta>
    c768:	48 8b 40 68          	mov    0x68(%rax),%rax
    c76c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c770:	48 8b 79 30          	mov    0x30(%rcx),%rdi
    c774:	ff d0                	call   *%rax
    c776:	48 89 c6             	mov    %rax,%rsi
    c779:	48 8d 3d 9a c2 00 00 	lea    0xc29a(%rip),%rdi        # 18a1a <getFreeElement.b+0x21a>
    c780:	b0 00                	mov    $0x0,%al
    c782:	e8 49 69 ff ff       	call   30d0 <printf@plt>
    c787:	e9 0e 00 00 00       	jmp    c79a <slipP_dumpAll+0x5a>
    c78c:	48 8d 3d 95 c2 00 00 	lea    0xc295(%rip),%rdi        # 18a28 <getFreeElement.b+0x228>
    c793:	b0 00                	mov    $0x0,%al
    c795:	e8 36 69 ff ff       	call   30d0 <printf@plt>
    c79a:	48 8d 3d 98 c2 00 00 	lea    0xc298(%rip),%rdi        # 18a39 <getFreeElement.b+0x239>
    c7a1:	b0 00                	mov    $0x0,%al
    c7a3:	e8 28 69 ff ff       	call   30d0 <printf@plt>
    c7a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    c7af:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c7b2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c7b6:	3b 41 18             	cmp    0x18(%rcx),%eax
    c7b9:	0f 83 49 00 00 00    	jae    c808 <slipP_dumpAll+0xc8>
    c7bf:	8b 75 f4             	mov    -0xc(%rbp),%esi
    c7c2:	48 8d 3d 77 c2 00 00 	lea    0xc277(%rip),%rdi        # 18a40 <getFreeElement.b+0x240>
    c7c9:	b0 00                	mov    $0x0,%al
    c7cb:	e8 00 69 ff ff       	call   30d0 <printf@plt>
    c7d0:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
    c7d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7d8:	48 8b 40 38          	mov    0x38(%rax),%rax
    c7dc:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
    c7e0:	8b 34 88             	mov    (%rax,%rcx,4),%esi
    c7e3:	e8 18 b4 00 00       	call   17c00 <slipI_sprint>
    c7e8:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    c7ec:	48 8d 3d 4c bd 00 00 	lea    0xbd4c(%rip),%rdi        # 1853f <_IO_stdin_used+0x53f>
    c7f3:	b0 00                	mov    $0x0,%al
    c7f5:	e8 d6 68 ff ff       	call   30d0 <printf@plt>
    c7fa:	8b 45 f4             	mov    -0xc(%rbp),%eax
    c7fd:	83 c0 01             	add    $0x1,%eax
    c800:	89 45 f4             	mov    %eax,-0xc(%rbp)
    c803:	e9 a7 ff ff ff       	jmp    c7af <slipP_dumpAll+0x6f>
    c808:	48 8d 3d 38 c2 00 00 	lea    0xc238(%rip),%rdi        # 18a47 <getFreeElement.b+0x247>
    c80f:	b0 00                	mov    $0x0,%al
    c811:	e8 ba 68 ff ff       	call   30d0 <printf@plt>
    c816:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    c81d:	8b 45 ac             	mov    -0x54(%rbp),%eax
    c820:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c824:	3b 41 28             	cmp    0x28(%rcx),%eax
    c827:	0f 83 3a 00 00 00    	jae    c867 <slipP_dumpAll+0x127>
    c82d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c831:	48 8b 40 40          	mov    0x40(%rax),%rax
    c835:	48 63 4d ac          	movslq -0x54(%rbp),%rcx
    c839:	48 c1 e1 04          	shl    $0x4,%rcx
    c83d:	48 01 c8             	add    %rcx,%rax
    c840:	48 8b 38             	mov    (%rax),%rdi
    c843:	8b 70 08             	mov    0x8(%rax),%esi
    c846:	e8 e5 20 00 00       	call   e930 <slipV_printValue>
    c84b:	48 8d 3d d9 b8 00 00 	lea    0xb8d9(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    c852:	b0 00                	mov    $0x0,%al
    c854:	e8 77 68 ff ff       	call   30d0 <printf@plt>
    c859:	8b 45 ac             	mov    -0x54(%rbp),%eax
    c85c:	83 c0 01             	add    $0x1,%eax
    c85f:	89 45 ac             	mov    %eax,-0x54(%rbp)
    c862:	e9 b6 ff ff ff       	jmp    c81d <slipP_dumpAll+0xdd>
    c867:	48 8d 3d e5 b9 00 00 	lea    0xb9e5(%rip),%rdi        # 18253 <_IO_stdin_used+0x253>
    c86e:	b0 00                	mov    $0x0,%al
    c870:	e8 5b 68 ff ff       	call   30d0 <printf@plt>
    c875:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
    c87c:	8b 45 a8             	mov    -0x58(%rbp),%eax
    c87f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c883:	3b 41 20             	cmp    0x20(%rcx),%eax
    c886:	0f 83 31 00 00 00    	jae    c8bd <slipP_dumpAll+0x17d>
    c88c:	48 8d 3d 97 b8 00 00 	lea    0xb897(%rip),%rdi        # 1812a <_IO_stdin_used+0x12a>
    c893:	b0 00                	mov    $0x0,%al
    c895:	e8 36 68 ff ff       	call   30d0 <printf@plt>
    c89a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c89e:	48 8b 40 48          	mov    0x48(%rax),%rax
    c8a2:	48 63 4d a8          	movslq -0x58(%rbp),%rcx
    c8a6:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    c8aa:	e8 91 fe ff ff       	call   c740 <slipP_dumpAll>
    c8af:	8b 45 a8             	mov    -0x58(%rbp),%eax
    c8b2:	83 c0 01             	add    $0x1,%eax
    c8b5:	89 45 a8             	mov    %eax,-0x58(%rbp)
    c8b8:	e9 bf ff ff ff       	jmp    c87c <slipP_dumpAll+0x13c>
    c8bd:	48 83 c4 60          	add    $0x60,%rsp
    c8c1:	5d                   	pop    %rbp
    c8c2:	c3                   	ret
    c8c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    c8ca:	00 00 00 
    c8cd:	0f 1f 00             	nopl   (%rax)

000000000000c8d0 <slipP_toJson>:
    c8d0:	55                   	push   %rbp
    c8d1:	48 89 e5             	mov    %rsp,%rbp
    c8d4:	48 83 ec 20          	sub    $0x20,%rsp
    c8d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c8dc:	48 83 3d 44 3b 01 00 	cmpq   $0x0,0x13b44(%rip)        # 20428 <JSONBuffer>
    c8e3:	00 
    c8e4:	0f 85 16 00 00 00    	jne    c900 <slipP_toJson+0x30>
    c8ea:	bf 00 10 00 00       	mov    $0x1000,%edi
    c8ef:	be 01 00 00 00       	mov    $0x1,%esi
    c8f4:	e8 17 68 ff ff       	call   3110 <calloc@plt>
    c8f9:	48 89 05 28 3b 01 00 	mov    %rax,0x13b28(%rip)        # 20428 <JSONBuffer>
    c900:	48 8b 05 21 3b 01 00 	mov    0x13b21(%rip),%rax        # 20428 <JSONBuffer>
    c907:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c90b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c90f:	48 8d 35 3d c1 00 00 	lea    0xc13d(%rip),%rsi        # 18a53 <getFreeElement.b+0x253>
    c916:	b0 00                	mov    $0x0,%al
    c918:	e8 c3 68 ff ff       	call   31e0 <sprintf@plt>
    c91d:	89 c1                	mov    %eax,%ecx
    c91f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c923:	48 63 c9             	movslq %ecx,%rcx
    c926:	48 01 c8             	add    %rcx,%rax
    c929:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c92d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c931:	48 8d 35 1e c1 00 00 	lea    0xc11e(%rip),%rsi        # 18a56 <getFreeElement.b+0x256>
    c938:	b0 00                	mov    $0x0,%al
    c93a:	e8 a1 68 ff ff       	call   31e0 <sprintf@plt>
    c93f:	89 c1                	mov    %eax,%ecx
    c941:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c945:	48 63 c9             	movslq %ecx,%rcx
    c948:	48 01 c8             	add    %rcx,%rax
    c94b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c94f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    c956:	8b 45 ec             	mov    -0x14(%rbp),%eax
    c959:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    c95d:	3b 41 18             	cmp    0x18(%rcx),%eax
    c960:	0f 83 7a 00 00 00    	jae    c9e0 <slipP_toJson+0x110>
    c966:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c96a:	48 8d 35 f2 c0 00 00 	lea    0xc0f2(%rip),%rsi        # 18a63 <getFreeElement.b+0x263>
    c971:	b0 00                	mov    $0x0,%al
    c973:	e8 68 68 ff ff       	call   31e0 <sprintf@plt>
    c978:	89 c1                	mov    %eax,%ecx
    c97a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c97e:	48 63 c9             	movslq %ecx,%rcx
    c981:	48 01 c8             	add    %rcx,%rax
    c984:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c988:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c98c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c990:	48 8b 40 38          	mov    0x38(%rax),%rax
    c994:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
    c998:	8b 34 88             	mov    (%rax,%rcx,4),%esi
    c99b:	e8 60 b2 00 00       	call   17c00 <slipI_sprint>
    c9a0:	89 c1                	mov    %eax,%ecx
    c9a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c9a6:	48 63 c9             	movslq %ecx,%rcx
    c9a9:	48 01 c8             	add    %rcx,%rax
    c9ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c9b0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c9b4:	48 8d 35 ae c0 00 00 	lea    0xc0ae(%rip),%rsi        # 18a69 <getFreeElement.b+0x269>
    c9bb:	b0 00                	mov    $0x0,%al
    c9bd:	e8 1e 68 ff ff       	call   31e0 <sprintf@plt>
    c9c2:	89 c1                	mov    %eax,%ecx
    c9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c9c8:	48 63 c9             	movslq %ecx,%rcx
    c9cb:	48 01 c8             	add    %rcx,%rax
    c9ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c9d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
    c9d5:	83 c0 01             	add    $0x1,%eax
    c9d8:	89 45 ec             	mov    %eax,-0x14(%rbp)
    c9db:	e9 76 ff ff ff       	jmp    c956 <slipP_toJson+0x86>
    c9e0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    c9e4:	48 8d 35 82 c0 00 00 	lea    0xc082(%rip),%rsi        # 18a6d <getFreeElement.b+0x26d>
    c9eb:	b0 00                	mov    $0x0,%al
    c9ed:	e8 ee 67 ff ff       	call   31e0 <sprintf@plt>
    c9f2:	89 c1                	mov    %eax,%ecx
    c9f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c9f8:	48 63 c9             	movslq %ecx,%rcx
    c9fb:	48 01 c8             	add    %rcx,%rax
    c9fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ca02:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ca06:	48 8d 35 66 c0 00 00 	lea    0xc066(%rip),%rsi        # 18a73 <getFreeElement.b+0x273>
    ca0d:	b0 00                	mov    $0x0,%al
    ca0f:	e8 cc 67 ff ff       	call   31e0 <sprintf@plt>
    ca14:	89 c1                	mov    %eax,%ecx
    ca16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ca1a:	48 63 c9             	movslq %ecx,%rcx
    ca1d:	48 01 c8             	add    %rcx,%rax
    ca20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ca24:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    ca2b:	8b 45 e8             	mov    -0x18(%rbp),%eax
    ca2e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    ca32:	3b 41 28             	cmp    0x28(%rcx),%eax
    ca35:	0f 83 84 00 00 00    	jae    cabf <slipP_toJson+0x1ef>
    ca3b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ca3f:	48 8d 35 1d c0 00 00 	lea    0xc01d(%rip),%rsi        # 18a63 <getFreeElement.b+0x263>
    ca46:	b0 00                	mov    $0x0,%al
    ca48:	e8 93 67 ff ff       	call   31e0 <sprintf@plt>
    ca4d:	89 c1                	mov    %eax,%ecx
    ca4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ca53:	48 63 c9             	movslq %ecx,%rcx
    ca56:	48 01 c8             	add    %rcx,%rax
    ca59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ca5d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ca61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca65:	48 8b 40 40          	mov    0x40(%rax),%rax
    ca69:	48 63 4d e8          	movslq -0x18(%rbp),%rcx
    ca6d:	48 c1 e1 04          	shl    $0x4,%rcx
    ca71:	48 01 c8             	add    %rcx,%rax
    ca74:	48 8b 30             	mov    (%rax),%rsi
    ca77:	8b 50 08             	mov    0x8(%rax),%edx
    ca7a:	e8 31 19 00 00       	call   e3b0 <slipV_sprintValue>
    ca7f:	89 c1                	mov    %eax,%ecx
    ca81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ca85:	48 63 c9             	movslq %ecx,%rcx
    ca88:	48 01 c8             	add    %rcx,%rax
    ca8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ca8f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ca93:	48 8d 35 cf bf 00 00 	lea    0xbfcf(%rip),%rsi        # 18a69 <getFreeElement.b+0x269>
    ca9a:	b0 00                	mov    $0x0,%al
    ca9c:	e8 3f 67 ff ff       	call   31e0 <sprintf@plt>
    caa1:	89 c1                	mov    %eax,%ecx
    caa3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    caa7:	48 63 c9             	movslq %ecx,%rcx
    caaa:	48 01 c8             	add    %rcx,%rax
    caad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cab1:	8b 45 e8             	mov    -0x18(%rbp),%eax
    cab4:	83 c0 01             	add    $0x1,%eax
    cab7:	89 45 e8             	mov    %eax,-0x18(%rbp)
    caba:	e9 6c ff ff ff       	jmp    ca2b <slipP_toJson+0x15b>
    cabf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cac3:	48 8d 35 a3 bf 00 00 	lea    0xbfa3(%rip),%rsi        # 18a6d <getFreeElement.b+0x26d>
    caca:	b0 00                	mov    $0x0,%al
    cacc:	e8 0f 67 ff ff       	call   31e0 <sprintf@plt>
    cad1:	89 c1                	mov    %eax,%ecx
    cad3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cad7:	48 63 c9             	movslq %ecx,%rcx
    cada:	48 01 c8             	add    %rcx,%rax
    cadd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cae1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cae9:	8b 50 0c             	mov    0xc(%rax),%edx
    caec:	48 8d 35 92 bf 00 00 	lea    0xbf92(%rip),%rsi        # 18a85 <getFreeElement.b+0x285>
    caf3:	b0 00                	mov    $0x0,%al
    caf5:	e8 e6 66 ff ff       	call   31e0 <sprintf@plt>
    cafa:	89 c1                	mov    %eax,%ecx
    cafc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cb00:	48 63 c9             	movslq %ecx,%rcx
    cb03:	48 01 c8             	add    %rcx,%rax
    cb06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cb0a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cb0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb12:	8b 50 10             	mov    0x10(%rax),%edx
    cb15:	48 8d 35 7c bf 00 00 	lea    0xbf7c(%rip),%rsi        # 18a98 <getFreeElement.b+0x298>
    cb1c:	b0 00                	mov    $0x0,%al
    cb1e:	e8 bd 66 ff ff       	call   31e0 <sprintf@plt>
    cb23:	89 c1                	mov    %eax,%ecx
    cb25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cb29:	48 63 c9             	movslq %ecx,%rcx
    cb2c:	48 01 c8             	add    %rcx,%rax
    cb2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cb33:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cb37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb3b:	8b 50 08             	mov    0x8(%rax),%edx
    cb3e:	48 8d 35 68 bf 00 00 	lea    0xbf68(%rip),%rsi        # 18aad <getFreeElement.b+0x2ad>
    cb45:	b0 00                	mov    $0x0,%al
    cb47:	e8 94 66 ff ff       	call   31e0 <sprintf@plt>
    cb4c:	89 c1                	mov    %eax,%ecx
    cb4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cb52:	48 63 c9             	movslq %ecx,%rcx
    cb55:	48 01 c8             	add    %rcx,%rax
    cb58:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cb5c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cb60:	48 8d 35 5b bf 00 00 	lea    0xbf5b(%rip),%rsi        # 18ac2 <getFreeElement.b+0x2c2>
    cb67:	b0 00                	mov    $0x0,%al
    cb69:	e8 72 66 ff ff       	call   31e0 <sprintf@plt>
    cb6e:	89 c1                	mov    %eax,%ecx
    cb70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cb74:	48 63 c9             	movslq %ecx,%rcx
    cb77:	48 01 c8             	add    %rcx,%rax
    cb7a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cb7e:	48 8b 05 a3 38 01 00 	mov    0x138a3(%rip),%rax        # 20428 <JSONBuffer>
    cb85:	48 83 c4 20          	add    $0x20,%rsp
    cb89:	5d                   	pop    %rbp
    cb8a:	c3                   	ret
    cb8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000cb90 <updateToMax>:
    cb90:	55                   	push   %rbp
    cb91:	48 89 e5             	mov    %rsp,%rbp
    cb94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cb98:	89 75 f4             	mov    %esi,-0xc(%rbp)
    cb9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb9f:	8b 00                	mov    (%rax),%eax
    cba1:	3b 45 f4             	cmp    -0xc(%rbp),%eax
    cba4:	0f 87 0c 00 00 00    	ja     cbb6 <updateToMax+0x26>
    cbaa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    cbad:	83 c1 01             	add    $0x1,%ecx
    cbb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbb4:	89 08                	mov    %ecx,(%rax)
    cbb6:	5d                   	pop    %rbp
    cbb7:	c3                   	ret
    cbb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    cbbf:	00 

000000000000cbc0 <slipD_getStringMeta>:
    cbc0:	55                   	push   %rbp
    cbc1:	48 89 e5             	mov    %rsp,%rbp
    cbc4:	48 8d 05 cd 35 01 00 	lea    0x135cd(%rip),%rax        # 20198 <slipD_getStringMeta.meta>
    cbcb:	5d                   	pop    %rbp
    cbcc:	c3                   	ret
    cbcd:	0f 1f 00             	nopl   (%rax)

000000000000cbd0 <createPool>:
    cbd0:	55                   	push   %rbp
    cbd1:	48 89 e5             	mov    %rsp,%rbp
    cbd4:	48 83 ec 20          	sub    $0x20,%rsp
    cbd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cbdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbe0:	48 8b 40 48          	mov    0x48(%rax),%rax
    cbe4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    cbe8:	e8 d3 ff ff ff       	call   cbc0 <slipD_getStringMeta>
    cbed:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    cbf1:	48 89 c2             	mov    %rax,%rdx
    cbf4:	bf 18 00 00 00       	mov    $0x18,%edi
    cbf9:	e8 f2 d5 ff ff       	call   a1f0 <slipM_pool_create>
    cbfe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cc02:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    cc06:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    cc0a:	8b 15 20 38 01 00    	mov    0x13820(%rip),%edx        # 20430 <STRING_POOL>
    cc10:	e8 db e9 ff ff       	call   b5f0 <slipC_registerPool>
    cc15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cc19:	48 83 c4 20          	add    $0x20,%rsp
    cc1d:	5d                   	pop    %rbp
    cc1e:	c3                   	ret
    cc1f:	90                   	nop

000000000000cc20 <create>:
    cc20:	55                   	push   %rbp
    cc21:	48 89 e5             	mov    %rsp,%rbp
    cc24:	48 83 ec 30          	sub    $0x30,%rsp
    cc28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    cc30:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cc34:	e8 87 64 ff ff       	call   30c0 <strlen@plt>
    cc39:	89 45 ec             	mov    %eax,-0x14(%rbp)
    cc3c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    cc3f:	83 c0 01             	add    $0x1,%eax
    cc42:	48 63 f8             	movslq %eax,%rdi
    cc45:	e8 e6 d4 ff ff       	call   a130 <slipM_malloc>
    cc4a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    cc4e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cc53:	0f 84 05 00 00 00    	je     cc5e <create+0x3e>
    cc59:	e9 1f 00 00 00       	jmp    cc7d <create+0x5d>
    cc5e:	48 8d 3d 5f be 00 00 	lea    0xbe5f(%rip),%rdi        # 18ac4 <getFreeElement.b+0x2c4>
    cc65:	48 8d 35 65 be 00 00 	lea    0xbe65(%rip),%rsi        # 18ad1 <getFreeElement.b+0x2d1>
    cc6c:	ba 90 00 00 00       	mov    $0x90,%edx
    cc71:	48 8d 0d 78 be 00 00 	lea    0xbe78(%rip),%rcx        # 18af0 <getFreeElement.b+0x2f0>
    cc78:	e8 73 64 ff ff       	call   30f0 <__assert_fail@plt>
    cc7d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    cc81:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    cc85:	e8 d6 63 ff ff       	call   3060 <strcpy@plt>
    cc8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc8e:	48 8b 40 18          	mov    0x18(%rax),%rax
    cc92:	48 63 0d 97 37 01 00 	movslq 0x13797(%rip),%rcx        # 20430 <STRING_POOL>
    cc99:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    cc9d:	e8 3e d6 ff ff       	call   a2e0 <slipM_pool_alloc>
    cca2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    cca6:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    cca9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ccad:	89 48 0c             	mov    %ecx,0xc(%rax)
    ccb0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ccb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ccb8:	48 89 48 10          	mov    %rcx,0x10(%rax)
    ccbc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    ccc0:	e8 ab 01 00 00       	call   ce70 <hashCStr>
    ccc5:	89 c1                	mov    %eax,%ecx
    ccc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cccb:	89 48 08             	mov    %ecx,0x8(%rax)
    ccce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ccd2:	48 83 c4 30          	add    $0x30,%rsp
    ccd6:	5d                   	pop    %rbp
    ccd7:	c3                   	ret
    ccd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    ccdf:	00 

000000000000cce0 <create_v>:
    cce0:	55                   	push   %rbp
    cce1:	48 89 e5             	mov    %rsp,%rbp
    cce4:	48 83 ec 30          	sub    $0x30,%rsp
    cce8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ccec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ccf0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ccf4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    ccf8:	e8 23 ff ff ff       	call   cc20 <create>
    ccfd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    cd01:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    cd05:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    cd09:	e8 d2 13 00 00       	call   e0e0 <slipV_setValueString>
    cd0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cd12:	8b 55 f8             	mov    -0x8(%rbp),%edx
    cd15:	48 83 c4 30          	add    $0x30,%rsp
    cd19:	5d                   	pop    %rbp
    cd1a:	c3                   	ret
    cd1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000cd20 <release>:
    cd20:	55                   	push   %rbp
    cd21:	48 89 e5             	mov    %rsp,%rbp
    cd24:	48 83 ec 10          	sub    $0x10,%rsp
    cd28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cd2c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    cd30:	e8 7b d4 ff ff       	call   a1b0 <slipM_free>
    cd35:	48 83 c4 10          	add    $0x10,%rsp
    cd39:	5d                   	pop    %rbp
    cd3a:	c3                   	ret
    cd3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000cd40 <size>:
    cd40:	55                   	push   %rbp
    cd41:	48 89 e5             	mov    %rsp,%rbp
    cd44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cd48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cd50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cd54:	8b 40 0c             	mov    0xc(%rax),%eax
    cd57:	5d                   	pop    %rbp
    cd58:	c3                   	ret
    cd59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000cd60 <hash>:
    cd60:	55                   	push   %rbp
    cd61:	48 89 e5             	mov    %rsp,%rbp
    cd64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cd68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd6c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cd70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cd74:	8b 40 08             	mov    0x8(%rax),%eax
    cd77:	5d                   	pop    %rbp
    cd78:	c3                   	ret
    cd79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000cd80 <cmp>:
    cd80:	55                   	push   %rbp
    cd81:	48 89 e5             	mov    %rsp,%rbp
    cd84:	48 83 ec 20          	sub    $0x20,%rsp
    cd88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cd8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    cd90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    cd98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cd9c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    cda0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cda4:	48 8b 78 10          	mov    0x10(%rax),%rdi
    cda8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cdac:	48 8b 70 10          	mov    0x10(%rax),%rsi
    cdb0:	e8 6b 63 ff ff       	call   3120 <strcmp@plt>
    cdb5:	48 83 c4 20          	add    $0x20,%rsp
    cdb9:	5d                   	pop    %rbp
    cdba:	c3                   	ret
    cdbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000cdc0 <copy>:
    cdc0:	55                   	push   %rbp
    cdc1:	48 89 e5             	mov    %rsp,%rbp
    cdc4:	48 83 ec 20          	sub    $0x20,%rsp
    cdc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cdcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdd0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cdd4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    cdd8:	e8 e3 db ff ff       	call   a9c0 <slipM_getGlobal>
    cddd:	48 89 c7             	mov    %rax,%rdi
    cde0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cde4:	48 8b 70 10          	mov    0x10(%rax),%rsi
    cde8:	e8 33 fe ff ff       	call   cc20 <create>
    cded:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    cdf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cdf5:	48 83 c4 20          	add    $0x20,%rsp
    cdf9:	5d                   	pop    %rbp
    cdfa:	c3                   	ret
    cdfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000ce00 <raw>:
    ce00:	55                   	push   %rbp
    ce01:	48 89 e5             	mov    %rsp,%rbp
    ce04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ce08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce0c:	48 8b 40 10          	mov    0x10(%rax),%rax
    ce10:	5d                   	pop    %rbp
    ce11:	c3                   	ret
    ce12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ce19:	00 00 00 
    ce1c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000ce20 <slipD_str>:
    ce20:	55                   	push   %rbp
    ce21:	48 89 e5             	mov    %rsp,%rbp
    ce24:	48 83 ec 10          	sub    $0x10,%rsp
    ce28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce30:	48 8b 40 18          	mov    0x18(%rax),%rax
    ce34:	48 63 0d f5 35 01 00 	movslq 0x135f5(%rip),%rcx        # 20430 <STRING_POOL>
    ce3b:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    ce3f:	e8 7c d4 ff ff       	call   a2c0 <slipM_pool_get_meta>
    ce44:	48 83 c4 10          	add    $0x10,%rsp
    ce48:	5d                   	pop    %rbp
    ce49:	c3                   	ret
    ce4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000ce50 <string_register>:
    ce50:	55                   	push   %rbp
    ce51:	48 89 e5             	mov    %rsp,%rbp
    ce54:	b0 00                	mov    $0x0,%al
    ce56:	e8 65 e8 ff ff       	call   b6c0 <slipG_registerPoolID>
    ce5b:	89 05 cf 35 01 00    	mov    %eax,0x135cf(%rip)        # 20430 <STRING_POOL>
    ce61:	5d                   	pop    %rbp
    ce62:	c3                   	ret
    ce63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    ce6a:	00 00 00 
    ce6d:	0f 1f 00             	nopl   (%rax)

000000000000ce70 <hashCStr>:
    ce70:	55                   	push   %rbp
    ce71:	48 89 e5             	mov    %rsp,%rbp
    ce74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ce78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    ce7f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
    ce86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce8a:	80 38 00             	cmpb   $0x0,(%rax)
    ce8d:	0f 84 56 00 00 00    	je     cee9 <hashCStr+0x79>
    ce93:	8b 45 f4             	mov    -0xc(%rbp),%eax
    ce96:	c1 e0 04             	shl    $0x4,%eax
    ce99:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    ce9d:	48 89 ca             	mov    %rcx,%rdx
    cea0:	48 83 c2 01          	add    $0x1,%rdx
    cea4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    cea8:	0f be 09             	movsbl (%rcx),%ecx
    ceab:	01 c8                	add    %ecx,%eax
    cead:	89 45 f4             	mov    %eax,-0xc(%rbp)
    ceb0:	8b 45 f4             	mov    -0xc(%rbp),%eax
    ceb3:	48 b9 00 00 00 f0 00 	movabs $0xf0000000,%rcx
    ceba:	00 00 00 
    cebd:	48 21 c8             	and    %rcx,%rax
    cec0:	89 45 f0             	mov    %eax,-0x10(%rbp)
    cec3:	83 f8 00             	cmp    $0x0,%eax
    cec6:	0f 84 18 00 00 00    	je     cee4 <hashCStr+0x74>
    cecc:	8b 45 f0             	mov    -0x10(%rbp),%eax
    cecf:	c1 e8 18             	shr    $0x18,%eax
    ced2:	33 45 f4             	xor    -0xc(%rbp),%eax
    ced5:	89 45 f4             	mov    %eax,-0xc(%rbp)
    ced8:	8b 45 f0             	mov    -0x10(%rbp),%eax
    cedb:	83 f0 ff             	xor    $0xffffffff,%eax
    cede:	23 45 f4             	and    -0xc(%rbp),%eax
    cee1:	89 45 f4             	mov    %eax,-0xc(%rbp)
    cee4:	e9 9d ff ff ff       	jmp    ce86 <hashCStr+0x16>
    cee9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    ceec:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
    cef1:	5d                   	pop    %rbp
    cef2:	c3                   	ret
    cef3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    cefa:	00 00 00 
    cefd:	0f 1f 00             	nopl   (%rax)

000000000000cf00 <slipD_table>:
    cf00:	55                   	push   %rbp
    cf01:	48 89 e5             	mov    %rsp,%rbp
    cf04:	48 83 ec 10          	sub    $0x10,%rsp
    cf08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf10:	48 8b 40 18          	mov    0x18(%rax),%rax
    cf14:	48 63 0d 19 35 01 00 	movslq 0x13519(%rip),%rcx        # 20434 <TABLE_POOL>
    cf1b:	48 8b 3c c8          	mov    (%rax,%rcx,8),%rdi
    cf1f:	e8 9c d3 ff ff       	call   a2c0 <slipM_pool_get_meta>
    cf24:	48 83 c4 10          	add    $0x10,%rsp
    cf28:	5d                   	pop    %rbp
    cf29:	c3                   	ret
    cf2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000cf30 <slipD_getDefaultTableMeta>:
    cf30:	55                   	push   %rbp
    cf31:	48 89 e5             	mov    %rsp,%rbp
    cf34:	48 8d 05 cd 32 01 00 	lea    0x132cd(%rip),%rax        # 20208 <slipD_getDefaultTableMeta.meta>
    cf3b:	5d                   	pop    %rbp
    cf3c:	c3                   	ret
    cf3d:	0f 1f 00             	nopl   (%rax)

000000000000cf40 <createPool>:
    cf40:	55                   	push   %rbp
    cf41:	48 89 e5             	mov    %rsp,%rbp
    cf44:	48 83 ec 10          	sub    $0x10,%rsp
    cf48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cf4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf50:	48 8b 70 48          	mov    0x48(%rax),%rsi
    cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf58:	48 8b 40 48          	mov    0x48(%rax),%rax
    cf5c:	48 8b 00             	mov    (%rax),%rax
    cf5f:	48 8b 50 30          	mov    0x30(%rax),%rdx
    cf63:	bf 28 00 00 00       	mov    $0x28,%edi
    cf68:	e8 83 d2 ff ff       	call   a1f0 <slipM_pool_create>
    cf6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cf71:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    cf75:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    cf79:	8b 15 b5 34 01 00    	mov    0x134b5(%rip),%edx        # 20434 <TABLE_POOL>
    cf7f:	e8 6c e6 ff ff       	call   b5f0 <slipC_registerPool>
    cf84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cf88:	48 83 c4 10          	add    $0x10,%rsp
    cf8c:	5d                   	pop    %rbp
    cf8d:	c3                   	ret
    cf8e:	66 90                	xchg   %ax,%ax

000000000000cf90 <createTable>:
    cf90:	55                   	push   %rbp
    cf91:	48 89 e5             	mov    %rsp,%rbp
    cf94:	48 83 ec 10          	sub    $0x10,%rsp
    cf98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cf9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cfa0:	48 8b 40 18          	mov    0x18(%rax),%rax
    cfa4:	48 63 0d 89 34 01 00 	movslq 0x13489(%rip),%rcx        # 20434 <TABLE_POOL>
    cfab:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
    cfaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cfb3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    cfb7:	e8 24 d3 ff ff       	call   a2e0 <slipM_pool_alloc>
    cfbc:	48 83 c4 10          	add    $0x10,%rsp
    cfc0:	5d                   	pop    %rbp
    cfc1:	c3                   	ret
    cfc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    cfc9:	00 00 00 
    cfcc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000cfd0 <releaseTable>:
    cfd0:	55                   	push   %rbp
    cfd1:	48 89 e5             	mov    %rsp,%rbp
    cfd4:	48 83 ec 10          	sub    $0x10,%rsp
    cfd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cfdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cfe0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cfe4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    cfe8:	e8 43 60 ff ff       	call   3030 <free@plt>
    cfed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cff1:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
    cff6:	0f 84 0d 00 00 00    	je     d009 <releaseTable+0x39>
    cffc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d000:	48 8b 78 18          	mov    0x18(%rax),%rdi
    d004:	e8 27 60 ff ff       	call   3030 <free@plt>
    d009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d00d:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
    d012:	0f 84 0d 00 00 00    	je     d025 <releaseTable+0x55>
    d018:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d01c:	48 8b 78 08          	mov    0x8(%rax),%rdi
    d020:	e8 0b 60 ff ff       	call   3030 <free@plt>
    d025:	48 83 c4 10          	add    $0x10,%rsp
    d029:	5d                   	pop    %rbp
    d02a:	c3                   	ret
    d02b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d030 <insertHash>:
    d030:	55                   	push   %rbp
    d031:	48 89 e5             	mov    %rsp,%rbp
    d034:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    d03b:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    d03f:	89 55 f0             	mov    %edx,-0x10(%rbp)
    d042:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    d046:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
    d04a:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    d04e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d052:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    d056:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%rbp)
    d05d:	0f 85 0d 00 00 00    	jne    d070 <insertHash+0x40>
    d063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d067:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    d06b:	e9 0c 00 00 00       	jmp    d07c <insertHash+0x4c>
    d070:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    d077:	e9 86 01 00 00       	jmp    d202 <insertHash+0x1d2>
    d07c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d080:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    d084:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d088:	83 78 24 00          	cmpl   $0x0,0x24(%rax)
    d08c:	0f 85 0e 00 00 00    	jne    d0a0 <insertHash+0x70>
    d092:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    d096:	be 08 00 00 00       	mov    $0x8,%esi
    d09b:	e8 40 03 00 00       	call   d3e0 <initHash>
    d0a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d0a4:	8b 40 20             	mov    0x20(%rax),%eax
    d0a7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    d0ab:	6b 49 24 03          	imul   $0x3,0x24(%rcx),%ecx
    d0af:	c1 e9 02             	shr    $0x2,%ecx
    d0b2:	39 c8                	cmp    %ecx,%eax
    d0b4:	0f 86 13 00 00 00    	jbe    d0cd <insertHash+0x9d>
    d0ba:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    d0be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d0c2:	8b 70 24             	mov    0x24(%rax),%esi
    d0c5:	c1 e6 01             	shl    $0x1,%esi
    d0c8:	e8 83 03 00 00       	call   d450 <reHash>
    d0cd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    d0d1:	e8 ca d8 ff ff       	call   a9a0 <slipM_getMeta>
    d0d6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    d0da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d0de:	8b 40 24             	mov    0x24(%rax),%eax
    d0e1:	89 45 8c             	mov    %eax,-0x74(%rbp)
    d0e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d0e8:	48 8b 40 40          	mov    0x40(%rax),%rax
    d0ec:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    d0f0:	ff d0                	call   *%rax
    d0f2:	8b 7d 8c             	mov    -0x74(%rbp),%edi
    d0f5:	89 c6                	mov    %eax,%esi
    d0f7:	e8 34 04 00 00       	call   d530 <getHashCode>
    d0fc:	89 45 ac             	mov    %eax,-0x54(%rbp)
    d0ff:	8b 45 ac             	mov    -0x54(%rbp),%eax
    d102:	89 45 a8             	mov    %eax,-0x58(%rbp)
    d105:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)
    d10c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d110:	48 8b 40 18          	mov    0x18(%rax),%rax
    d114:	48 63 4d a8          	movslq -0x58(%rbp),%rcx
    d118:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d11c:	48 01 c8             	add    %rcx,%rax
    d11f:	48 83 38 00          	cmpq   $0x0,(%rax)
    d123:	0f 84 88 00 00 00    	je     d1b1 <insertHash+0x181>
    d129:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d12d:	8b 40 24             	mov    0x24(%rax),%eax
    d130:	89 45 88             	mov    %eax,-0x78(%rbp)
    d133:	8b 45 ac             	mov    -0x54(%rbp),%eax
    d136:	89 45 84             	mov    %eax,-0x7c(%rbp)
    d139:	8b 7d a4             	mov    -0x5c(%rbp),%edi
    d13c:	83 c7 01             	add    $0x1,%edi
    d13f:	89 7d a4             	mov    %edi,-0x5c(%rbp)
    d142:	e8 29 04 00 00       	call   d570 <getTCsequence>
    d147:	8b 75 84             	mov    -0x7c(%rbp),%esi
    d14a:	8b 7d 88             	mov    -0x78(%rbp),%edi
    d14d:	01 c6                	add    %eax,%esi
    d14f:	e8 dc 03 00 00       	call   d530 <getHashCode>
    d154:	89 45 a8             	mov    %eax,-0x58(%rbp)
    d157:	8b 45 a4             	mov    -0x5c(%rbp),%eax
    d15a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    d15e:	8b 49 24             	mov    0x24(%rcx),%ecx
    d161:	c1 e9 01             	shr    $0x1,%ecx
    d164:	39 c8                	cmp    %ecx,%eax
    d166:	0f 86 40 00 00 00    	jbe    d1ac <insertHash+0x17c>
    d16c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    d170:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d174:	8b 70 24             	mov    0x24(%rax),%esi
    d177:	c1 e6 01             	shl    $0x1,%esi
    d17a:	e8 d1 02 00 00       	call   d450 <reHash>
    d17f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    d183:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
    d187:	e8 54 0f 00 00       	call   e0e0 <slipV_setValueString>
    d18c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    d190:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    d194:	8b 55 98             	mov    -0x68(%rbp),%edx
    d197:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d19b:	44 8b 45 e0          	mov    -0x20(%rbp),%r8d
    d19f:	e8 8c fe ff ff       	call   d030 <insertHash>
    d1a4:	89 45 fc             	mov    %eax,-0x4(%rbp)
    d1a7:	e9 56 00 00 00       	jmp    d202 <insertHash+0x1d2>
    d1ac:	e9 5b ff ff ff       	jmp    d10c <insertHash+0xdc>
    d1b1:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    d1b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d1b9:	48 8b 40 18          	mov    0x18(%rax),%rax
    d1bd:	48 63 55 a8          	movslq -0x58(%rbp),%rdx
    d1c1:	48 6b d2 18          	imul   $0x18,%rdx,%rdx
    d1c5:	48 01 d0             	add    %rdx,%rax
    d1c8:	48 89 08             	mov    %rcx,(%rax)
    d1cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d1cf:	48 8b 40 18          	mov    0x18(%rax),%rax
    d1d3:	48 63 4d a8          	movslq -0x58(%rbp),%rcx
    d1d7:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d1db:	48 01 c8             	add    %rcx,%rax
    d1de:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d1e2:	48 89 48 08          	mov    %rcx,0x8(%rax)
    d1e6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    d1ea:	48 89 48 10          	mov    %rcx,0x10(%rax)
    d1ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d1f2:	8b 48 20             	mov    0x20(%rax),%ecx
    d1f5:	83 c1 01             	add    $0x1,%ecx
    d1f8:	89 48 20             	mov    %ecx,0x20(%rax)
    d1fb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    d202:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d205:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    d20c:	5d                   	pop    %rbp
    d20d:	c3                   	ret
    d20e:	66 90                	xchg   %ax,%ax

000000000000d210 <getHash>:
    d210:	55                   	push   %rbp
    d211:	48 89 e5             	mov    %rsp,%rbp
    d214:	48 83 ec 30          	sub    $0x30,%rsp
    d218:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    d21c:	89 55 e8             	mov    %edx,-0x18(%rbp)
    d21f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    d223:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    d227:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    d22b:	8b 55 e8             	mov    -0x18(%rbp),%edx
    d22e:	31 c9                	xor    %ecx,%ecx
    d230:	e8 8b 03 00 00       	call   d5c0 <getHashImpl>
    d235:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d239:	89 55 f8             	mov    %edx,-0x8(%rbp)
    d23c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d240:	8b 55 f8             	mov    -0x8(%rbp),%edx
    d243:	48 83 c4 30          	add    $0x30,%rsp
    d247:	5d                   	pop    %rbp
    d248:	c3                   	ret
    d249:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000d250 <getHashRef>:
    d250:	55                   	push   %rbp
    d251:	48 89 e5             	mov    %rsp,%rbp
    d254:	48 83 ec 30          	sub    $0x30,%rsp
    d258:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    d25c:	89 55 e8             	mov    %edx,-0x18(%rbp)
    d25f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    d263:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    d267:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    d26b:	8b 55 e8             	mov    -0x18(%rbp),%edx
    d26e:	b9 01 00 00 00       	mov    $0x1,%ecx
    d273:	e8 48 03 00 00       	call   d5c0 <getHashImpl>
    d278:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d27c:	89 55 f8             	mov    %edx,-0x8(%rbp)
    d27f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d283:	8b 55 f8             	mov    -0x8(%rbp),%edx
    d286:	48 83 c4 30          	add    $0x30,%rsp
    d28a:	5d                   	pop    %rbp
    d28b:	c3                   	ret
    d28c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000d290 <removeHash>:
    d290:	55                   	push   %rbp
    d291:	48 89 e5             	mov    %rsp,%rbp
    d294:	48 83 ec 50          	sub    $0x50,%rsp
    d298:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    d29c:	89 55 f0             	mov    %edx,-0x10(%rbp)
    d29f:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    d2a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d2a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d2ab:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%rbp)
    d2b2:	0f 85 0d 00 00 00    	jne    d2c5 <removeHash+0x35>
    d2b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d2c0:	e9 0c 00 00 00       	jmp    d2d1 <removeHash+0x41>
    d2c5:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    d2cc:	e9 46 00 00 00       	jmp    d317 <removeHash+0x87>
    d2d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d2d5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    d2d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d2dd:	8b 40 24             	mov    0x24(%rax),%eax
    d2e0:	89 45 b8             	mov    %eax,-0x48(%rbp)
    d2e3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    d2e7:	e8 b4 d6 ff ff       	call   a9a0 <slipM_getMeta>
    d2ec:	48 8b 40 40          	mov    0x40(%rax),%rax
    d2f0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    d2f4:	ff d0                	call   *%rax
    d2f6:	8b 7d b8             	mov    -0x48(%rbp),%edi
    d2f9:	89 c6                	mov    %eax,%esi
    d2fb:	e8 30 02 00 00       	call   d530 <getHashCode>
    d300:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    d303:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    d306:	89 45 c0             	mov    %eax,-0x40(%rbp)
    d309:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
    d310:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    d317:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d31a:	48 83 c4 50          	add    $0x50,%rsp
    d31e:	5d                   	pop    %rbp
    d31f:	c3                   	ret

000000000000d320 <getSize>:
    d320:	55                   	push   %rbp
    d321:	48 89 e5             	mov    %rsp,%rbp
    d324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d32c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d334:	8b 40 10             	mov    0x10(%rax),%eax
    d337:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    d33b:	03 41 20             	add    0x20(%rcx),%eax
    d33e:	5d                   	pop    %rbp
    d33f:	c3                   	ret

000000000000d340 <sprint>:
    d340:	55                   	push   %rbp
    d341:	48 89 e5             	mov    %rsp,%rbp
    d344:	48 83 ec 20          	sub    $0x20,%rsp
    d348:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d34c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d350:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d354:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d358:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
    d35f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    d363:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
    d367:	48 01 c7             	add    %rax,%rdi
    d36a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d36e:	8b 50 10             	mov    0x10(%rax),%edx
    d371:	48 8d 35 a6 b7 00 00 	lea    0xb7a6(%rip),%rsi        # 18b1e <getFreeElement.b+0x31e>
    d378:	b0 00                	mov    $0x0,%al
    d37a:	e8 61 5e ff ff       	call   31e0 <sprintf@plt>
    d37f:	03 45 e4             	add    -0x1c(%rbp),%eax
    d382:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    d385:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    d389:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
    d38d:	48 01 c7             	add    %rax,%rdi
    d390:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d394:	8b 50 20             	mov    0x20(%rax),%edx
    d397:	48 8d 35 90 b7 00 00 	lea    0xb790(%rip),%rsi        # 18b2e <getFreeElement.b+0x32e>
    d39e:	b0 00                	mov    $0x0,%al
    d3a0:	e8 3b 5e ff ff       	call   31e0 <sprintf@plt>
    d3a5:	03 45 e4             	add    -0x1c(%rbp),%eax
    d3a8:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    d3ab:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    d3ae:	48 83 c4 20          	add    $0x20,%rsp
    d3b2:	5d                   	pop    %rbp
    d3b3:	c3                   	ret
    d3b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d3bb:	00 00 00 
    d3be:	66 90                	xchg   %ax,%ax

000000000000d3c0 <table_register>:
    d3c0:	55                   	push   %rbp
    d3c1:	48 89 e5             	mov    %rsp,%rbp
    d3c4:	b0 00                	mov    $0x0,%al
    d3c6:	e8 f5 e2 ff ff       	call   b6c0 <slipG_registerPoolID>
    d3cb:	89 05 63 30 01 00    	mov    %eax,0x13063(%rip)        # 20434 <TABLE_POOL>
    d3d1:	5d                   	pop    %rbp
    d3d2:	c3                   	ret
    d3d3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d3da:	00 00 00 
    d3dd:	0f 1f 00             	nopl   (%rax)

000000000000d3e0 <initHash>:
    d3e0:	55                   	push   %rbp
    d3e1:	48 89 e5             	mov    %rsp,%rbp
    d3e4:	48 83 ec 20          	sub    $0x20,%rsp
    d3e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d3ec:	89 75 f4             	mov    %esi,-0xc(%rbp)
    d3ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d3f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d3f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d3fb:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
    d400:	0f 84 0d 00 00 00    	je     d413 <initHash+0x33>
    d406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d40a:	48 8b 78 18          	mov    0x18(%rax),%rdi
    d40e:	e8 1d 5c ff ff       	call   3030 <free@plt>
    d413:	48 63 7d f4          	movslq -0xc(%rbp),%rdi
    d417:	be 18 00 00 00       	mov    $0x18,%esi
    d41c:	e8 ef 5c ff ff       	call   3110 <calloc@plt>
    d421:	48 89 c1             	mov    %rax,%rcx
    d424:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d428:	48 89 48 18          	mov    %rcx,0x18(%rax)
    d42c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d430:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
    d437:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    d43a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d43e:	89 48 24             	mov    %ecx,0x24(%rax)
    d441:	31 c0                	xor    %eax,%eax
    d443:	48 83 c4 20          	add    $0x20,%rsp
    d447:	5d                   	pop    %rbp
    d448:	c3                   	ret
    d449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000d450 <reHash>:
    d450:	55                   	push   %rbp
    d451:	48 89 e5             	mov    %rsp,%rbp
    d454:	48 83 ec 50          	sub    $0x50,%rsp
    d458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d45c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    d45f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d463:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d467:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d46b:	8b 40 24             	mov    0x24(%rax),%eax
    d46e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    d471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d475:	48 8b 40 18          	mov    0x18(%rax),%rax
    d479:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d47d:	48 63 7d f4          	movslq -0xc(%rbp),%rdi
    d481:	be 18 00 00 00       	mov    $0x18,%esi
    d486:	e8 85 5c ff ff       	call   3110 <calloc@plt>
    d48b:	48 89 c1             	mov    %rax,%rcx
    d48e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d492:	48 89 48 18          	mov    %rcx,0x18(%rax)
    d496:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    d499:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d49d:	89 48 24             	mov    %ecx,0x24(%rax)
    d4a0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    d4a7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    d4aa:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    d4ad:	0f 8d 68 00 00 00    	jge    d51b <reHash+0xcb>
    d4b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d4b7:	48 63 4d d4          	movslq -0x2c(%rbp),%rcx
    d4bb:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d4bf:	48 01 c8             	add    %rcx,%rax
    d4c2:	48 8b 00             	mov    (%rax),%rax
    d4c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    d4c9:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    d4ce:	0f 84 34 00 00 00    	je     d508 <reHash+0xb8>
    d4d4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    d4d8:	48 8d 7d b8          	lea    -0x48(%rbp),%rdi
    d4dc:	e8 ff 0b 00 00       	call   e0e0 <slipV_setValueString>
    d4e1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d4e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d4e9:	48 63 4d d4          	movslq -0x2c(%rbp),%rcx
    d4ed:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d4f1:	48 01 c8             	add    %rcx,%rax
    d4f4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    d4f8:	8b 55 c0             	mov    -0x40(%rbp),%edx
    d4fb:	48 8b 48 08          	mov    0x8(%rax),%rcx
    d4ff:	44 8b 40 10          	mov    0x10(%rax),%r8d
    d503:	e8 28 fb ff ff       	call   d030 <insertHash>
    d508:	e9 00 00 00 00       	jmp    d50d <reHash+0xbd>
    d50d:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    d510:	83 c0 01             	add    $0x1,%eax
    d513:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    d516:	e9 8c ff ff ff       	jmp    d4a7 <reHash+0x57>
    d51b:	31 c0                	xor    %eax,%eax
    d51d:	48 83 c4 50          	add    $0x50,%rsp
    d521:	5d                   	pop    %rbp
    d522:	c3                   	ret
    d523:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d52a:	00 00 00 
    d52d:	0f 1f 00             	nopl   (%rax)

000000000000d530 <getHashCode>:
    d530:	55                   	push   %rbp
    d531:	48 89 e5             	mov    %rsp,%rbp
    d534:	89 7d f8             	mov    %edi,-0x8(%rbp)
    d537:	89 75 f4             	mov    %esi,-0xc(%rbp)
    d53a:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    d53e:	0f 8d 12 00 00 00    	jge    d556 <getHashCode+0x26>
    d544:	8b 45 f4             	mov    -0xc(%rbp),%eax
    d547:	99                   	cltd
    d548:	f7 7d f8             	idivl  -0x8(%rbp)
    d54b:	03 55 f8             	add    -0x8(%rbp),%edx
    d54e:	89 55 fc             	mov    %edx,-0x4(%rbp)
    d551:	e9 0a 00 00 00       	jmp    d560 <getHashCode+0x30>
    d556:	8b 45 f4             	mov    -0xc(%rbp),%eax
    d559:	99                   	cltd
    d55a:	f7 7d f8             	idivl  -0x8(%rbp)
    d55d:	89 55 fc             	mov    %edx,-0x4(%rbp)
    d560:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d563:	5d                   	pop    %rbp
    d564:	c3                   	ret
    d565:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d56c:	00 00 00 
    d56f:	90                   	nop

000000000000d570 <getTCsequence>:
    d570:	55                   	push   %rbp
    d571:	48 89 e5             	mov    %rsp,%rbp
    d574:	89 7d f8             	mov    %edi,-0x8(%rbp)
    d577:	8b 45 f8             	mov    -0x8(%rbp),%eax
    d57a:	c1 f8 01             	sar    $0x1,%eax
    d57d:	89 45 f4             	mov    %eax,-0xc(%rbp)
    d580:	8b 45 f8             	mov    -0x8(%rbp),%eax
    d583:	83 e0 01             	and    $0x1,%eax
    d586:	83 f8 00             	cmp    $0x0,%eax
    d589:	0f 84 13 00 00 00    	je     d5a2 <getTCsequence+0x32>
    d58f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
    d592:	0f af 4d f4          	imul   -0xc(%rbp),%ecx
    d596:	31 c0                	xor    %eax,%eax
    d598:	29 c8                	sub    %ecx,%eax
    d59a:	89 45 fc             	mov    %eax,-0x4(%rbp)
    d59d:	e9 0a 00 00 00       	jmp    d5ac <getTCsequence+0x3c>
    d5a2:	8b 45 f4             	mov    -0xc(%rbp),%eax
    d5a5:	0f af 45 f4          	imul   -0xc(%rbp),%eax
    d5a9:	89 45 fc             	mov    %eax,-0x4(%rbp)
    d5ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d5af:	5d                   	pop    %rbp
    d5b0:	c3                   	ret
    d5b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d5b8:	00 00 00 
    d5bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d5c0 <getHashImpl>:
    d5c0:	55                   	push   %rbp
    d5c1:	48 89 e5             	mov    %rsp,%rbp
    d5c4:	48 83 ec 50          	sub    $0x50,%rsp
    d5c8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    d5cc:	89 55 e8             	mov    %edx,-0x18(%rbp)
    d5cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    d5d3:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
    d5d6:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
    d5da:	31 f6                	xor    %esi,%esi
    d5dc:	ba 10 00 00 00       	mov    $0x10,%edx
    d5e1:	e8 1a 5b ff ff       	call   3100 <memset@plt>
    d5e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d5ea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    d5ee:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
    d5f5:	0f 85 2f 00 00 00    	jne    d62a <getHashImpl+0x6a>
    d5fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d5ff:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    d603:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    d607:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    d60b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    d60e:	e8 2d 00 00 00       	call   d640 <slip_getHash>
    d613:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    d617:	89 55 b8             	mov    %edx,-0x48(%rbp)
    d61a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d61e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d622:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d626:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d62a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d62e:	8b 55 f8             	mov    -0x8(%rbp),%edx
    d631:	48 83 c4 50          	add    $0x50,%rsp
    d635:	5d                   	pop    %rbp
    d636:	c3                   	ret
    d637:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    d63e:	00 00 

000000000000d640 <slip_getHash>:
    d640:	55                   	push   %rbp
    d641:	48 89 e5             	mov    %rsp,%rbp
    d644:	48 83 ec 50          	sub    $0x50,%rsp
    d648:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d64c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    d650:	89 55 dc             	mov    %edx,-0x24(%rbp)
    d653:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    d657:	31 f6                	xor    %esi,%esi
    d659:	ba 10 00 00 00       	mov    $0x10,%edx
    d65e:	e8 9d 5a ff ff       	call   3100 <memset@plt>
    d663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d667:	83 78 24 00          	cmpl   $0x0,0x24(%rax)
    d66b:	0f 85 15 00 00 00    	jne    d686 <slip_getHash+0x46>
    d671:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d675:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d679:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d67d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d681:	e9 30 01 00 00       	jmp    d7b6 <slip_getHash+0x176>
    d686:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d68a:	8b 40 24             	mov    0x24(%rax),%eax
    d68d:	89 45 b8             	mov    %eax,-0x48(%rbp)
    d690:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d694:	e8 07 d3 ff ff       	call   a9a0 <slipM_getMeta>
    d699:	48 8b 40 40          	mov    0x40(%rax),%rax
    d69d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d6a1:	ff d0                	call   *%rax
    d6a3:	8b 7d b8             	mov    -0x48(%rbp),%edi
    d6a6:	89 c6                	mov    %eax,%esi
    d6a8:	e8 83 fe ff ff       	call   d530 <getHashCode>
    d6ad:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    d6b0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    d6b3:	89 45 c0             	mov    %eax,-0x40(%rbp)
    d6b6:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
    d6bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d6c1:	48 8b 40 18          	mov    0x18(%rax),%rax
    d6c5:	48 63 4d c0          	movslq -0x40(%rbp),%rcx
    d6c9:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d6cd:	48 01 c8             	add    %rcx,%rax
    d6d0:	48 83 38 00          	cmpq   $0x0,(%rax)
    d6d4:	0f 84 cc 00 00 00    	je     d7a6 <slip_getHash+0x166>
    d6da:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d6de:	e8 bd d2 ff ff       	call   a9a0 <slipM_getMeta>
    d6e3:	48 8b 40 48          	mov    0x48(%rax),%rax
    d6e7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    d6eb:	48 8b 49 18          	mov    0x18(%rcx),%rcx
    d6ef:	48 63 55 c0          	movslq -0x40(%rbp),%rdx
    d6f3:	48 6b d2 18          	imul   $0x18,%rdx,%rdx
    d6f7:	48 01 d1             	add    %rdx,%rcx
    d6fa:	48 8b 39             	mov    (%rcx),%rdi
    d6fd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    d701:	ff d0                	call   *%rax
    d703:	83 f8 00             	cmp    $0x0,%eax
    d706:	0f 85 67 00 00 00    	jne    d773 <slip_getHash+0x133>
    d70c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    d710:	0f 85 28 00 00 00    	jne    d73e <slip_getHash+0xfe>
    d716:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d71a:	48 8b 40 18          	mov    0x18(%rax),%rax
    d71e:	48 63 4d c0          	movslq -0x40(%rbp),%rcx
    d722:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
    d726:	48 01 c8             	add    %rcx,%rax
    d729:	48 8b 48 08          	mov    0x8(%rax),%rcx
    d72d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    d731:	48 8b 40 10          	mov    0x10(%rax),%rax
    d735:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d739:	e9 78 00 00 00       	jmp    d7b6 <slip_getHash+0x176>
    d73e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d742:	48 8b 70 18          	mov    0x18(%rax),%rsi
    d746:	48 63 45 c0          	movslq -0x40(%rbp),%rax
    d74a:	48 6b c0 18          	imul   $0x18,%rax,%rax
    d74e:	48 01 c6             	add    %rax,%rsi
    d751:	48 83 c6 08          	add    $0x8,%rsi
    d755:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
    d759:	e8 22 0c 00 00       	call   e380 <slipV_setValueRef>
    d75e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d762:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d766:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d76a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d76e:	e9 43 00 00 00       	jmp    d7b6 <slip_getHash+0x176>
    d773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d777:	8b 40 24             	mov    0x24(%rax),%eax
    d77a:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    d77d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    d780:	89 45 b0             	mov    %eax,-0x50(%rbp)
    d783:	8b 7d bc             	mov    -0x44(%rbp),%edi
    d786:	83 c7 01             	add    $0x1,%edi
    d789:	89 7d bc             	mov    %edi,-0x44(%rbp)
    d78c:	e8 df fd ff ff       	call   d570 <getTCsequence>
    d791:	8b 75 b0             	mov    -0x50(%rbp),%esi
    d794:	8b 7d b4             	mov    -0x4c(%rbp),%edi
    d797:	01 c6                	add    %eax,%esi
    d799:	e8 92 fd ff ff       	call   d530 <getHashCode>
    d79e:	89 45 c0             	mov    %eax,-0x40(%rbp)
    d7a1:	e9 17 ff ff ff       	jmp    d6bd <slip_getHash+0x7d>
    d7a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d7aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d7ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d7b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d7b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d7ba:	8b 55 f8             	mov    -0x8(%rbp),%edx
    d7bd:	48 83 c4 50          	add    $0x50,%rsp
    d7c1:	5d                   	pop    %rbp
    d7c2:	c3                   	ret
    d7c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d7ca:	00 00 00 
    d7cd:	0f 1f 00             	nopl   (%rax)

000000000000d7d0 <slipS_pushValue>:
    d7d0:	55                   	push   %rbp
    d7d1:	48 89 e5             	mov    %rsp,%rbp
    d7d4:	48 83 ec 20          	sub    $0x20,%rsp
    d7d8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    d7dc:	89 55 f0             	mov    %edx,-0x10(%rbp)
    d7df:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    d7e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d7e7:	8b 40 08             	mov    0x8(%rax),%eax
    d7ea:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    d7ee:	3b 41 0c             	cmp    0xc(%rcx),%eax
    d7f1:	0f 86 18 00 00 00    	jbe    d80f <slipS_pushValue+0x3f>
    d7f7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d7fb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    d7ff:	8b 55 f0             	mov    -0x10(%rbp),%edx
    d802:	e8 39 00 00 00       	call   d840 <slipS_push>
    d807:	89 45 fc             	mov    %eax,-0x4(%rbp)
    d80a:	e9 1c 00 00 00       	jmp    d82b <slipS_pushValue+0x5b>
    d80f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d813:	e8 a8 00 00 00       	call   d8c0 <slipS_extend>
    d818:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    d81c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    d820:	8b 55 f0             	mov    -0x10(%rbp),%edx
    d823:	e8 18 00 00 00       	call   d840 <slipS_push>
    d828:	89 45 fc             	mov    %eax,-0x4(%rbp)
    d82b:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d82e:	48 83 c4 20          	add    $0x20,%rsp
    d832:	5d                   	pop    %rbp
    d833:	c3                   	ret
    d834:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d83b:	00 00 00 
    d83e:	66 90                	xchg   %ax,%ax

000000000000d840 <slipS_push>:
    d840:	55                   	push   %rbp
    d841:	48 89 e5             	mov    %rsp,%rbp
    d844:	48 83 ec 20          	sub    $0x20,%rsp
    d848:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d84c:	89 55 f8             	mov    %edx,-0x8(%rbp)
    d84f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d853:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d857:	8b 40 0c             	mov    0xc(%rax),%eax
    d85a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    d85e:	3b 41 08             	cmp    0x8(%rcx),%eax
    d861:	0f 83 05 00 00 00    	jae    d86c <slipS_push+0x2c>
    d867:	e9 1f 00 00 00       	jmp    d88b <slipS_push+0x4b>
    d86c:	48 8d 3d 14 b3 00 00 	lea    0xb314(%rip),%rdi        # 18b87 <getFreeElement.b+0x387>
    d873:	48 8d 35 d0 b2 00 00 	lea    0xb2d0(%rip),%rsi        # 18b4a <getFreeElement.b+0x34a>
    d87a:	ba 9b 00 00 00       	mov    $0x9b,%edx
    d87f:	48 8d 0d 1f b3 00 00 	lea    0xb31f(%rip),%rcx        # 18ba5 <getFreeElement.b+0x3a5>
    d886:	e8 65 58 ff ff       	call   30f0 <__assert_fail@plt>
    d88b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d88f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d893:	8b 70 0c             	mov    0xc(%rax),%esi
    d896:	89 f1                	mov    %esi,%ecx
    d898:	83 c1 01             	add    $0x1,%ecx
    d89b:	89 48 0c             	mov    %ecx,0xc(%rax)
    d89e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d8a2:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    d8a5:	e8 a6 05 00 00       	call   de50 <stack_push_z>
    d8aa:	31 c0                	xor    %eax,%eax
    d8ac:	48 83 c4 20          	add    $0x20,%rsp
    d8b0:	5d                   	pop    %rbp
    d8b1:	c3                   	ret
    d8b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    d8b9:	00 00 00 
    d8bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000d8c0 <slipS_extend>:
    d8c0:	55                   	push   %rbp
    d8c1:	48 89 e5             	mov    %rsp,%rbp
    d8c4:	48 83 ec 10          	sub    $0x10,%rsp
    d8c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d8cc:	e8 3f 06 00 00       	call   df10 <slipS_createBlock>
    d8d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d8d5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    d8da:	0f 84 05 00 00 00    	je     d8e5 <slipS_extend+0x25>
    d8e0:	e9 1f 00 00 00       	jmp    d904 <slipS_extend+0x44>
    d8e5:	48 8d 3d 50 b2 00 00 	lea    0xb250(%rip),%rdi        # 18b3c <getFreeElement.b+0x33c>
    d8ec:	48 8d 35 57 b2 00 00 	lea    0xb257(%rip),%rsi        # 18b4a <getFreeElement.b+0x34a>
    d8f3:	ba 52 00 00 00       	mov    $0x52,%edx
    d8f8:	48 8d 0d 68 b2 00 00 	lea    0xb268(%rip),%rcx        # 18b67 <getFreeElement.b+0x367>
    d8ff:	e8 ec 57 ff ff       	call   30f0 <__assert_fail@plt>
    d904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d908:	48 83 38 00          	cmpq   $0x0,(%rax)
    d90c:	0f 85 20 00 00 00    	jne    d932 <slipS_extend+0x72>
    d912:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    d916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d91a:	48 89 08             	mov    %rcx,(%rax)
    d91d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d921:	8b 48 08             	mov    0x8(%rax),%ecx
    d924:	81 c1 ff 00 00 00    	add    $0xff,%ecx
    d92a:	89 48 08             	mov    %ecx,0x8(%rax)
    d92d:	e9 20 00 00 00       	jmp    d952 <slipS_extend+0x92>
    d932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d936:	48 8b 38             	mov    (%rax),%rdi
    d939:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    d93d:	e8 7e 02 00 00       	call   dbc0 <list_add>
    d942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d946:	8b 48 08             	mov    0x8(%rax),%ecx
    d949:	81 c1 ff 00 00 00    	add    $0xff,%ecx
    d94f:	89 48 08             	mov    %ecx,0x8(%rax)
    d952:	48 83 c4 10          	add    $0x10,%rsp
    d956:	5d                   	pop    %rbp
    d957:	c3                   	ret
    d958:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    d95f:	00 

000000000000d960 <slipS_popValue>:
    d960:	55                   	push   %rbp
    d961:	48 89 e5             	mov    %rsp,%rbp
    d964:	48 83 ec 20          	sub    $0x20,%rsp
    d968:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d96c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d970:	8b 40 08             	mov    0x8(%rax),%eax
    d973:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    d977:	2b 41 0c             	sub    0xc(%rcx),%eax
    d97a:	3d fe 01 00 00       	cmp    $0x1fe,%eax
    d97f:	0f 86 09 00 00 00    	jbe    d98e <slipS_popValue+0x2e>
    d985:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d989:	e8 22 00 00 00       	call   d9b0 <slipS_collapse>
    d98e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    d992:	e8 59 00 00 00       	call   d9f0 <slipS_pop>
    d997:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d99b:	89 55 f8             	mov    %edx,-0x8(%rbp)
    d99e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9a2:	8b 55 f8             	mov    -0x8(%rbp),%edx
    d9a5:	48 83 c4 20          	add    $0x20,%rsp
    d9a9:	5d                   	pop    %rbp
    d9aa:	c3                   	ret
    d9ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d9b0 <slipS_collapse>:
    d9b0:	55                   	push   %rbp
    d9b1:	48 89 e5             	mov    %rsp,%rbp
    d9b4:	48 83 ec 10          	sub    $0x10,%rsp
    d9b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d9bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d9c0:	48 8b 38             	mov    (%rax),%rdi
    d9c3:	e8 28 02 00 00       	call   dbf0 <list_remove_last>
    d9c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d9cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    d9d0:	e8 5b 56 ff ff       	call   3030 <free@plt>
    d9d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d9d9:	8b 48 08             	mov    0x8(%rax),%ecx
    d9dc:	81 e9 ff 00 00 00    	sub    $0xff,%ecx
    d9e2:	89 48 08             	mov    %ecx,0x8(%rax)
    d9e5:	48 83 c4 10          	add    $0x10,%rsp
    d9e9:	5d                   	pop    %rbp
    d9ea:	c3                   	ret
    d9eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000d9f0 <slipS_pop>:
    d9f0:	55                   	push   %rbp
    d9f1:	48 89 e5             	mov    %rsp,%rbp
    d9f4:	48 83 ec 30          	sub    $0x30,%rsp
    d9f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d9fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    da00:	83 78 0c 00          	cmpl   $0x0,0xc(%rax)
    da04:	0f 86 2a 00 00 00    	jbe    da34 <slipS_pop+0x44>
    da0a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    da0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    da12:	8b 70 0c             	mov    0xc(%rax),%esi
    da15:	83 c6 ff             	add    $0xffffffff,%esi
    da18:	89 70 0c             	mov    %esi,0xc(%rax)
    da1b:	e8 f0 02 00 00       	call   dd10 <stack_get_z>
    da20:	48 8b 08             	mov    (%rax),%rcx
    da23:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    da27:	48 8b 40 08          	mov    0x8(%rax),%rax
    da2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    da2f:	e9 20 00 00 00       	jmp    da54 <slipS_pop+0x64>
    da34:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    da38:	31 f6                	xor    %esi,%esi
    da3a:	ba 10 00 00 00       	mov    $0x10,%edx
    da3f:	e8 bc 56 ff ff       	call   3100 <memset@plt>
    da44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    da48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    da4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    da50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    da54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    da58:	8b 55 f8             	mov    -0x8(%rbp),%edx
    da5b:	48 83 c4 30          	add    $0x30,%rsp
    da5f:	5d                   	pop    %rbp
    da60:	c3                   	ret
    da61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    da68:	00 00 00 
    da6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000da70 <slipS_popValueNum>:
    da70:	55                   	push   %rbp
    da71:	48 89 e5             	mov    %rsp,%rbp
    da74:	48 83 ec 10          	sub    $0x10,%rsp
    da78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    da7c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    da7f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    da83:	8b 75 f4             	mov    -0xc(%rbp),%esi
    da86:	e8 35 00 00 00       	call   dac0 <slipS_popNum>
    da8b:	89 45 f0             	mov    %eax,-0x10(%rbp)
    da8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da92:	8b 40 08             	mov    0x8(%rax),%eax
    da95:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    da99:	2b 41 0c             	sub    0xc(%rcx),%eax
    da9c:	3d fe 01 00 00       	cmp    $0x1fe,%eax
    daa1:	0f 86 09 00 00 00    	jbe    dab0 <slipS_popValueNum+0x40>
    daa7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    daab:	e8 00 ff ff ff       	call   d9b0 <slipS_collapse>
    dab0:	8b 45 f0             	mov    -0x10(%rbp),%eax
    dab3:	48 83 c4 10          	add    $0x10,%rsp
    dab7:	5d                   	pop    %rbp
    dab8:	c3                   	ret
    dab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000dac0 <slipS_popNum>:
    dac0:	55                   	push   %rbp
    dac1:	48 89 e5             	mov    %rsp,%rbp
    dac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dac8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    dacb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dacf:	8b 40 0c             	mov    0xc(%rax),%eax
    dad2:	3b 45 f4             	cmp    -0xc(%rbp),%eax
    dad5:	0f 82 0b 00 00 00    	jb     dae6 <slipS_popNum+0x26>
    dadb:	8b 45 f4             	mov    -0xc(%rbp),%eax
    dade:	89 45 f0             	mov    %eax,-0x10(%rbp)
    dae1:	e9 0a 00 00 00       	jmp    daf0 <slipS_popNum+0x30>
    dae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    daea:	8b 40 0c             	mov    0xc(%rax),%eax
    daed:	89 45 f0             	mov    %eax,-0x10(%rbp)
    daf0:	8b 55 f0             	mov    -0x10(%rbp),%edx
    daf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    daf7:	8b 48 0c             	mov    0xc(%rax),%ecx
    dafa:	29 d1                	sub    %edx,%ecx
    dafc:	89 48 0c             	mov    %ecx,0xc(%rax)
    daff:	8b 45 f0             	mov    -0x10(%rbp),%eax
    db02:	5d                   	pop    %rbp
    db03:	c3                   	ret
    db04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    db0b:	00 00 00 
    db0e:	66 90                	xchg   %ax,%ax

000000000000db10 <slipS_init>:
    db10:	55                   	push   %rbp
    db11:	48 89 e5             	mov    %rsp,%rbp
    db14:	48 83 ec 10          	sub    $0x10,%rsp
    db18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db20:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    db27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db2b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    db32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db36:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    db3d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    db41:	e8 7a fd ff ff       	call   d8c0 <slipS_extend>
    db46:	48 83 c4 10          	add    $0x10,%rsp
    db4a:	5d                   	pop    %rbp
    db4b:	c3                   	ret
    db4c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000db50 <slipS_destroy>:
    db50:	55                   	push   %rbp
    db51:	48 89 e5             	mov    %rsp,%rbp
    db54:	48 83 ec 20          	sub    $0x20,%rsp
    db58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db60:	48 8b 00             	mov    (%rax),%rax
    db63:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    db67:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    db6c:	0f 84 21 00 00 00    	je     db93 <slipS_destroy+0x43>
    db72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    db76:	48 8b 00             	mov    (%rax),%rax
    db79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    db7d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    db81:	e8 aa 54 ff ff       	call   3030 <free@plt>
    db86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    db8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    db8e:	e9 d4 ff ff ff       	jmp    db67 <slipS_destroy+0x17>
    db93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db97:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    db9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dba2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    dba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    dbb4:	48 83 c4 20          	add    $0x20,%rsp
    dbb8:	5d                   	pop    %rbp
    dbb9:	c3                   	ret
    dbba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000dbc0 <list_add>:
    dbc0:	55                   	push   %rbp
    dbc1:	48 89 e5             	mov    %rsp,%rbp
    dbc4:	48 83 ec 10          	sub    $0x10,%rsp
    dbc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dbcc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dbd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbd4:	48 8b 78 08          	mov    0x8(%rax),%rdi
    dbd8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    dbdc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dbe0:	e8 6b 03 00 00       	call   df50 <_list_add>
    dbe5:	48 83 c4 10          	add    $0x10,%rsp
    dbe9:	5d                   	pop    %rbp
    dbea:	c3                   	ret
    dbeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000dbf0 <list_remove_last>:
    dbf0:	55                   	push   %rbp
    dbf1:	48 89 e5             	mov    %rsp,%rbp
    dbf4:	48 83 ec 20          	sub    $0x20,%rsp
    dbf8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    dbfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc00:	48 8b 40 08          	mov    0x8(%rax),%rax
    dc04:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    dc08:	0f 85 0d 00 00 00    	jne    dc1b <list_remove_last+0x2b>
    dc0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dc16:	e9 25 00 00 00       	jmp    dc40 <list_remove_last+0x50>
    dc1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc1f:	48 8b 40 08          	mov    0x8(%rax),%rax
    dc23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    dc27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dc2b:	48 8b 78 08          	mov    0x8(%rax),%rdi
    dc2f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    dc33:	e8 78 03 00 00       	call   dfb0 <_list_remove>
    dc38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dc3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dc40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc44:	48 83 c4 20          	add    $0x20,%rsp
    dc48:	5d                   	pop    %rbp
    dc49:	c3                   	ret
    dc4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000dc50 <slipS_get>:
    dc50:	55                   	push   %rbp
    dc51:	48 89 e5             	mov    %rsp,%rbp
    dc54:	48 83 ec 30          	sub    $0x30,%rsp
    dc58:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    dc5c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    dc5f:	31 c0                	xor    %eax,%eax
    dc61:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    dc64:	0f 8f 30 00 00 00    	jg     dc9a <slipS_get+0x4a>
    dc6a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    dc6d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    dc71:	3b 41 0c             	cmp    0xc(%rcx),%eax
    dc74:	0f 83 20 00 00 00    	jae    dc9a <slipS_get+0x4a>
    dc7a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    dc7e:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    dc81:	e8 8a 00 00 00       	call   dd10 <stack_get_z>
    dc86:	48 8b 08             	mov    (%rax),%rcx
    dc89:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    dc8d:	48 8b 40 08          	mov    0x8(%rax),%rax
    dc91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dc95:	e9 63 00 00 00       	jmp    dcfd <slipS_get+0xad>
    dc9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    dc9e:	31 c0                	xor    %eax,%eax
    dca0:	2b 41 0c             	sub    0xc(%rcx),%eax
    dca3:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    dca6:	0f 87 31 00 00 00    	ja     dcdd <slipS_get+0x8d>
    dcac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    dcb0:	0f 8d 27 00 00 00    	jge    dcdd <slipS_get+0x8d>
    dcb6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    dcba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dcbe:	8b 70 0c             	mov    0xc(%rax),%esi
    dcc1:	03 75 e4             	add    -0x1c(%rbp),%esi
    dcc4:	e8 47 00 00 00       	call   dd10 <stack_get_z>
    dcc9:	48 8b 08             	mov    (%rax),%rcx
    dccc:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    dcd0:	48 8b 40 08          	mov    0x8(%rax),%rax
    dcd4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dcd8:	e9 20 00 00 00       	jmp    dcfd <slipS_get+0xad>
    dcdd:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
    dce1:	31 f6                	xor    %esi,%esi
    dce3:	ba 10 00 00 00       	mov    $0x10,%edx
    dce8:	e8 13 54 ff ff       	call   3100 <memset@plt>
    dced:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    dcf1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    dcf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    dcf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dcfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dd01:	8b 55 f8             	mov    -0x8(%rbp),%edx
    dd04:	48 83 c4 30          	add    $0x30,%rsp
    dd08:	5d                   	pop    %rbp
    dd09:	c3                   	ret
    dd0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000dd10 <stack_get_z>:
    dd10:	55                   	push   %rbp
    dd11:	48 89 e5             	mov    %rsp,%rbp
    dd14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dd18:	89 75 f4             	mov    %esi,-0xc(%rbp)
    dd1b:	8b 45 f4             	mov    -0xc(%rbp),%eax
    dd1e:	b9 ff 00 00 00       	mov    $0xff,%ecx
    dd23:	99                   	cltd
    dd24:	f7 f9                	idiv   %ecx
    dd26:	89 45 f0             	mov    %eax,-0x10(%rbp)
    dd29:	8b 45 f4             	mov    -0xc(%rbp),%eax
    dd2c:	b9 ff 00 00 00       	mov    $0xff,%ecx
    dd31:	99                   	cltd
    dd32:	f7 f9                	idiv   %ecx
    dd34:	89 55 ec             	mov    %edx,-0x14(%rbp)
    dd37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd3b:	48 8b 00             	mov    (%rax),%rax
    dd3e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    dd42:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
    dd49:	8b 45 dc             	mov    -0x24(%rbp),%eax
    dd4c:	3b 45 f0             	cmp    -0x10(%rbp),%eax
    dd4f:	0f 8d 19 00 00 00    	jge    dd6e <stack_get_z+0x5e>
    dd55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    dd59:	48 8b 00             	mov    (%rax),%rax
    dd5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    dd60:	8b 45 dc             	mov    -0x24(%rbp),%eax
    dd63:	83 c0 01             	add    $0x1,%eax
    dd66:	89 45 dc             	mov    %eax,-0x24(%rbp)
    dd69:	e9 db ff ff ff       	jmp    dd49 <stack_get_z+0x39>
    dd6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    dd72:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    dd76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    dd7a:	48 83 c0 10          	add    $0x10,%rax
    dd7e:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
    dd82:	48 c1 e1 04          	shl    $0x4,%rcx
    dd86:	48 01 c8             	add    %rcx,%rax
    dd89:	5d                   	pop    %rbp
    dd8a:	c3                   	ret
    dd8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000dd90 <slipS_set>:
    dd90:	55                   	push   %rbp
    dd91:	48 89 e5             	mov    %rsp,%rbp
    dd94:	48 83 ec 30          	sub    $0x30,%rsp
    dd98:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    dd9c:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    dd9f:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    dda3:	89 75 dc             	mov    %esi,-0x24(%rbp)
    dda6:	31 c0                	xor    %eax,%eax
    dda8:	3b 45 dc             	cmp    -0x24(%rbp),%eax
    ddab:	0f 8f 37 00 00 00    	jg     dde8 <slipS_set+0x58>
    ddb1:	8b 45 dc             	mov    -0x24(%rbp),%eax
    ddb4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ddb8:	3b 41 0c             	cmp    0xc(%rcx),%eax
    ddbb:	0f 83 27 00 00 00    	jae    dde8 <slipS_set+0x58>
    ddc1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    ddc5:	8b 75 dc             	mov    -0x24(%rbp),%esi
    ddc8:	e8 43 ff ff ff       	call   dd10 <stack_get_z>
    ddcd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ddd1:	48 89 08             	mov    %rcx,(%rax)
    ddd4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ddd8:	48 89 48 08          	mov    %rcx,0x8(%rax)
    dddc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    dde3:	e9 51 00 00 00       	jmp    de39 <slipS_set+0xa9>
    dde8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ddec:	31 c0                	xor    %eax,%eax
    ddee:	2b 41 0c             	sub    0xc(%rcx),%eax
    ddf1:	3b 45 dc             	cmp    -0x24(%rbp),%eax
    ddf4:	0f 87 38 00 00 00    	ja     de32 <slipS_set+0xa2>
    ddfa:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    ddfe:	0f 8d 2e 00 00 00    	jge    de32 <slipS_set+0xa2>
    de04:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    de08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    de0c:	8b 70 0c             	mov    0xc(%rax),%esi
    de0f:	03 75 dc             	add    -0x24(%rbp),%esi
    de12:	e8 f9 fe ff ff       	call   dd10 <stack_get_z>
    de17:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    de1b:	48 89 08             	mov    %rcx,(%rax)
    de1e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    de22:	48 89 48 08          	mov    %rcx,0x8(%rax)
    de26:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    de2d:	e9 07 00 00 00       	jmp    de39 <slipS_set+0xa9>
    de32:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    de39:	8b 45 fc             	mov    -0x4(%rbp),%eax
    de3c:	48 83 c4 30          	add    $0x30,%rsp
    de40:	5d                   	pop    %rbp
    de41:	c3                   	ret
    de42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    de49:	00 00 00 
    de4c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000de50 <stack_push_z>:
    de50:	55                   	push   %rbp
    de51:	48 89 e5             	mov    %rsp,%rbp
    de54:	48 83 ec 20          	sub    $0x20,%rsp
    de58:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    de5c:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    de5f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    de63:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    de66:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    de6a:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    de6d:	e8 9e fe ff ff       	call   dd10 <stack_get_z>
    de72:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    de76:	48 89 08             	mov    %rcx,(%rax)
    de79:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    de7d:	48 89 48 08          	mov    %rcx,0x8(%rax)
    de81:	48 83 c4 20          	add    $0x20,%rsp
    de85:	5d                   	pop    %rbp
    de86:	c3                   	ret
    de87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    de8e:	00 00 

000000000000de90 <slipS_printStack>:
    de90:	55                   	push   %rbp
    de91:	48 89 e5             	mov    %rsp,%rbp
    de94:	48 83 ec 20          	sub    $0x20,%rsp
    de98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    de9c:	48 8d 3d 2b ad 00 00 	lea    0xad2b(%rip),%rdi        # 18bce <getFreeElement.b+0x3ce>
    dea3:	b0 00                	mov    $0x0,%al
    dea5:	e8 26 52 ff ff       	call   30d0 <printf@plt>
    deaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    deb1:	8b 45 f4             	mov    -0xc(%rbp),%eax
    deb4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    deb8:	3b 41 0c             	cmp    0xc(%rcx),%eax
    debb:	0f 83 37 00 00 00    	jae    def8 <slipS_printStack+0x68>
    dec1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    dec5:	8b 75 f4             	mov    -0xc(%rbp),%esi
    dec8:	e8 83 fd ff ff       	call   dc50 <slipS_get>
    decd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ded1:	89 55 e8             	mov    %edx,-0x18(%rbp)
    ded4:	48 8d 3d aa af 00 00 	lea    0xafaa(%rip),%rdi        # 18e85 <getFreeElement.b+0x685>
    dedb:	b0 00                	mov    $0x0,%al
    dedd:	e8 ee 51 ff ff       	call   30d0 <printf@plt>
    dee2:	8b 7d e8             	mov    -0x18(%rbp),%edi
    dee5:	e8 f6 0b 00 00       	call   eae0 <slipV_printType>
    deea:	8b 45 f4             	mov    -0xc(%rbp),%eax
    deed:	83 c0 01             	add    $0x1,%eax
    def0:	89 45 f4             	mov    %eax,-0xc(%rbp)
    def3:	e9 b9 ff ff ff       	jmp    deb1 <slipS_printStack+0x21>
    def8:	48 8d 3d 2c a2 00 00 	lea    0xa22c(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    deff:	b0 00                	mov    $0x0,%al
    df01:	e8 ca 51 ff ff       	call   30d0 <printf@plt>
    df06:	48 83 c4 20          	add    $0x20,%rsp
    df0a:	5d                   	pop    %rbp
    df0b:	c3                   	ret
    df0c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000df10 <slipS_createBlock>:
    df10:	55                   	push   %rbp
    df11:	48 89 e5             	mov    %rsp,%rbp
    df14:	48 83 ec 10          	sub    $0x10,%rsp
    df18:	bf 00 10 00 00       	mov    $0x1000,%edi
    df1d:	e8 0e c2 ff ff       	call   a130 <slipM_malloc>
    df22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    df26:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    df2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    df2e:	48 89 08             	mov    %rcx,(%rax)
    df31:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    df35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    df39:	48 89 48 08          	mov    %rcx,0x8(%rax)
    df3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    df41:	48 83 c4 10          	add    $0x10,%rsp
    df45:	5d                   	pop    %rbp
    df46:	c3                   	ret
    df47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    df4e:	00 00 

000000000000df50 <_list_add>:
    df50:	55                   	push   %rbp
    df51:	48 89 e5             	mov    %rsp,%rbp
    df54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    df58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    df5c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    df60:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    df65:	0f 84 0c 00 00 00    	je     df77 <_list_add+0x27>
    df6b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    df6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    df73:	48 89 48 08          	mov    %rcx,0x8(%rax)
    df77:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    df7c:	0f 84 0b 00 00 00    	je     df8d <_list_add+0x3d>
    df82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    df86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    df8a:	48 89 08             	mov    %rcx,(%rax)
    df8d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    df91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df95:	48 89 08             	mov    %rcx,(%rax)
    df98:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    df9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dfa0:	48 89 48 08          	mov    %rcx,0x8(%rax)
    dfa4:	5d                   	pop    %rbp
    dfa5:	c3                   	ret
    dfa6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    dfad:	00 00 00 

000000000000dfb0 <_list_remove>:
    dfb0:	55                   	push   %rbp
    dfb1:	48 89 e5             	mov    %rsp,%rbp
    dfb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dfb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dfbc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    dfc1:	0f 84 0c 00 00 00    	je     dfd3 <_list_remove+0x23>
    dfc7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    dfcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dfcf:	48 89 48 08          	mov    %rcx,0x8(%rax)
    dfd3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    dfd8:	0f 84 0b 00 00 00    	je     dfe9 <_list_remove+0x39>
    dfde:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dfe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dfe6:	48 89 08             	mov    %rcx,(%rax)
    dfe9:	5d                   	pop    %rbp
    dfea:	c3                   	ret
    dfeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000dff0 <slipD_getVectorMeta>:
    dff0:	55                   	push   %rbp
    dff1:	48 89 e5             	mov    %rsp,%rbp
    dff4:	48 8d 05 6d 22 01 00 	lea    0x1226d(%rip),%rax        # 20268 <slipD_getVectorMeta.meta>
    dffb:	5d                   	pop    %rbp
    dffc:	c3                   	ret
    dffd:	0f 1f 00             	nopl   (%rax)

000000000000e000 <createPool>:
    e000:	55                   	push   %rbp
    e001:	48 89 e5             	mov    %rsp,%rbp
    e004:	48 83 ec 10          	sub    $0x10,%rsp
    e008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e00c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e010:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e014:	e8 d7 ff ff ff       	call   dff0 <slipD_getVectorMeta>
    e019:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    e01d:	48 89 c2             	mov    %rax,%rdx
    e020:	bf 20 00 00 00       	mov    $0x20,%edi
    e025:	e8 c6 c1 ff ff       	call   a1f0 <slipM_pool_create>
    e02a:	48 83 c4 10          	add    $0x10,%rsp
    e02e:	5d                   	pop    %rbp
    e02f:	c3                   	ret

000000000000e030 <release>:
    e030:	55                   	push   %rbp
    e031:	48 89 e5             	mov    %rsp,%rbp
    e034:	48 83 ec 10          	sub    $0x10,%rsp
    e038:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e03c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e040:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e044:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e048:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
    e04d:	0f 84 0d 00 00 00    	je     e060 <release+0x30>
    e053:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e057:	48 8b 78 10          	mov    0x10(%rax),%rdi
    e05b:	e8 d0 4f ff ff       	call   3030 <free@plt>
    e060:	48 83 c4 10          	add    $0x10,%rsp
    e064:	5d                   	pop    %rbp
    e065:	c3                   	ret
    e066:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e06d:	00 00 00 

000000000000e070 <vector_register>:
    e070:	55                   	push   %rbp
    e071:	48 89 e5             	mov    %rsp,%rbp
    e074:	b0 00                	mov    $0x0,%al
    e076:	e8 45 d6 ff ff       	call   b6c0 <slipG_registerPoolID>
    e07b:	89 05 b7 23 01 00    	mov    %eax,0x123b7(%rip)        # 20438 <VECTOR_POOL>
    e081:	5d                   	pop    %rbp
    e082:	c3                   	ret
    e083:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e08a:	00 00 00 
    e08d:	0f 1f 00             	nopl   (%rax)

000000000000e090 <create>:
    e090:	55                   	push   %rbp
    e091:	48 89 e5             	mov    %rsp,%rbp
    e094:	48 83 ec 10          	sub    $0x10,%rsp
    e098:	bf 01 00 00 00       	mov    $0x1,%edi
    e09d:	be 20 00 00 00       	mov    $0x20,%esi
    e0a2:	e8 69 50 ff ff       	call   3110 <calloc@plt>
    e0a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e0ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e0af:	48 83 c4 10          	add    $0x10,%rsp
    e0b3:	5d                   	pop    %rbp
    e0b4:	c3                   	ret
    e0b5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e0bc:	00 00 00 
    e0bf:	90                   	nop

000000000000e0c0 <slipV_setValueNil>:
    e0c0:	55                   	push   %rbp
    e0c1:	48 89 e5             	mov    %rsp,%rbp
    e0c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e0c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e0cc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    e0d3:	31 c0                	xor    %eax,%eax
    e0d5:	5d                   	pop    %rbp
    e0d6:	c3                   	ret
    e0d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    e0de:	00 00 

000000000000e0e0 <slipV_setValueString>:
    e0e0:	55                   	push   %rbp
    e0e1:	48 89 e5             	mov    %rsp,%rbp
    e0e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e0e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e0ec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e0f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e0f4:	48 89 08             	mov    %rcx,(%rax)
    e0f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e0fb:	c7 40 08 00 04 00 00 	movl   $0x400,0x8(%rax)
    e102:	31 c0                	xor    %eax,%eax
    e104:	5d                   	pop    %rbp
    e105:	c3                   	ret
    e106:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e10d:	00 00 00 

000000000000e110 <slipV_setValueTable>:
    e110:	55                   	push   %rbp
    e111:	48 89 e5             	mov    %rsp,%rbp
    e114:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e118:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e11c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e124:	48 89 08             	mov    %rcx,(%rax)
    e127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e12b:	c7 40 08 00 02 00 00 	movl   $0x200,0x8(%rax)
    e132:	31 c0                	xor    %eax,%eax
    e134:	5d                   	pop    %rbp
    e135:	c3                   	ret
    e136:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e13d:	00 00 00 

000000000000e140 <slipV_setValueID>:
    e140:	55                   	push   %rbp
    e141:	48 89 e5             	mov    %rsp,%rbp
    e144:	48 83 ec 20          	sub    $0x20,%rsp
    e148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e14c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e150:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e154:	e8 67 4f ff ff       	call   30c0 <strlen@plt>
    e159:	89 45 ec             	mov    %eax,-0x14(%rbp)
    e15c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    e15f:	83 c0 01             	add    $0x1,%eax
    e162:	48 63 f8             	movslq %eax,%rdi
    e165:	e8 c6 bf ff ff       	call   a130 <slipM_malloc>
    e16a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    e16e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e172:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    e176:	e8 e5 4e ff ff       	call   3060 <strcpy@plt>
    e17b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    e17f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e183:	48 89 08             	mov    %rcx,(%rax)
    e186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e18a:	c7 40 08 08 00 00 00 	movl   $0x8,0x8(%rax)
    e191:	31 c0                	xor    %eax,%eax
    e193:	48 83 c4 20          	add    $0x20,%rsp
    e197:	5d                   	pop    %rbp
    e198:	c3                   	ret
    e199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000e1a0 <slipV_setValueList>:
    e1a0:	55                   	push   %rbp
    e1a1:	48 89 e5             	mov    %rsp,%rbp
    e1a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e1a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e1ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e1b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e1b4:	48 89 08             	mov    %rcx,(%rax)
    e1b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e1bb:	c7 40 08 00 01 00 00 	movl   $0x100,0x8(%rax)
    e1c2:	31 c0                	xor    %eax,%eax
    e1c4:	5d                   	pop    %rbp
    e1c5:	c3                   	ret
    e1c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e1cd:	00 00 00 

000000000000e1d0 <slipV_setValueFunc>:
    e1d0:	55                   	push   %rbp
    e1d1:	48 89 e5             	mov    %rsp,%rbp
    e1d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e1d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e1dc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e1e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e1e4:	48 89 08             	mov    %rcx,(%rax)
    e1e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e1eb:	c7 40 08 00 10 00 00 	movl   $0x1000,0x8(%rax)
    e1f2:	31 c0                	xor    %eax,%eax
    e1f4:	5d                   	pop    %rbp
    e1f5:	c3                   	ret
    e1f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e1fd:	00 00 00 

000000000000e200 <slipV_setValueMacro>:
    e200:	55                   	push   %rbp
    e201:	48 89 e5             	mov    %rsp,%rbp
    e204:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e208:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e20c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e214:	48 89 08             	mov    %rcx,(%rax)
    e217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e21b:	c7 40 08 00 20 00 00 	movl   $0x2000,0x8(%rax)
    e222:	31 c0                	xor    %eax,%eax
    e224:	5d                   	pop    %rbp
    e225:	c3                   	ret
    e226:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e22d:	00 00 00 

000000000000e230 <slipV_setValueCPtr>:
    e230:	55                   	push   %rbp
    e231:	48 89 e5             	mov    %rsp,%rbp
    e234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e238:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e23c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e240:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e244:	48 89 08             	mov    %rcx,(%rax)
    e247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e24b:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%rax)
    e252:	31 c0                	xor    %eax,%eax
    e254:	5d                   	pop    %rbp
    e255:	c3                   	ret
    e256:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e25d:	00 00 00 

000000000000e260 <slipV_setValueCFunc>:
    e260:	55                   	push   %rbp
    e261:	48 89 e5             	mov    %rsp,%rbp
    e264:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e268:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e26c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e270:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e274:	48 89 08             	mov    %rcx,(%rax)
    e277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e27b:	c7 40 08 20 00 00 00 	movl   $0x20,0x8(%rax)
    e282:	31 c0                	xor    %eax,%eax
    e284:	5d                   	pop    %rbp
    e285:	c3                   	ret
    e286:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e28d:	00 00 00 

000000000000e290 <slipV_setValueCMacro>:
    e290:	55                   	push   %rbp
    e291:	48 89 e5             	mov    %rsp,%rbp
    e294:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e298:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e29c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e2a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2a4:	48 89 08             	mov    %rcx,(%rax)
    e2a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2ab:	c7 40 08 40 00 00 00 	movl   $0x40,0x8(%rax)
    e2b2:	31 c0                	xor    %eax,%eax
    e2b4:	5d                   	pop    %rbp
    e2b5:	c3                   	ret
    e2b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e2bd:	00 00 00 

000000000000e2c0 <slipV_setValueBool>:
    e2c0:	55                   	push   %rbp
    e2c1:	48 89 e5             	mov    %rsp,%rbp
    e2c4:	40 88 f0             	mov    %sil,%al
    e2c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e2cb:	24 01                	and    $0x1,%al
    e2cd:	88 45 f7             	mov    %al,-0x9(%rbp)
    e2d0:	8a 4d f7             	mov    -0x9(%rbp),%cl
    e2d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2d7:	80 e1 01             	and    $0x1,%cl
    e2da:	88 08                	mov    %cl,(%rax)
    e2dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2e0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
    e2e7:	31 c0                	xor    %eax,%eax
    e2e9:	5d                   	pop    %rbp
    e2ea:	c3                   	ret
    e2eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000e2f0 <slipV_setValueInt>:
    e2f0:	55                   	push   %rbp
    e2f1:	48 89 e5             	mov    %rsp,%rbp
    e2f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e2f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e2fc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e304:	48 89 08             	mov    %rcx,(%rax)
    e307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e30b:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
    e312:	31 c0                	xor    %eax,%eax
    e314:	5d                   	pop    %rbp
    e315:	c3                   	ret
    e316:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e31d:	00 00 00 

000000000000e320 <slipV_setValueExpr>:
    e320:	55                   	push   %rbp
    e321:	48 89 e5             	mov    %rsp,%rbp
    e324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e328:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e32c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e334:	48 89 08             	mov    %rcx,(%rax)
    e337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e33b:	c7 40 08 00 00 01 00 	movl   $0x10000,0x8(%rax)
    e342:	31 c0                	xor    %eax,%eax
    e344:	5d                   	pop    %rbp
    e345:	c3                   	ret
    e346:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e34d:	00 00 00 

000000000000e350 <slipV_setValueDouble>:
    e350:	55                   	push   %rbp
    e351:	48 89 e5             	mov    %rsp,%rbp
    e354:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e358:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
    e35d:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    e362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e366:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    e36a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e36e:	c7 40 08 04 00 00 00 	movl   $0x4,0x8(%rax)
    e375:	31 c0                	xor    %eax,%eax
    e377:	5d                   	pop    %rbp
    e378:	c3                   	ret
    e379:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000e380 <slipV_setValueRef>:
    e380:	55                   	push   %rbp
    e381:	48 89 e5             	mov    %rsp,%rbp
    e384:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e388:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e38c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e390:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e394:	48 89 08             	mov    %rcx,(%rax)
    e397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e39b:	c7 40 08 80 00 00 00 	movl   $0x80,0x8(%rax)
    e3a2:	31 c0                	xor    %eax,%eax
    e3a4:	5d                   	pop    %rbp
    e3a5:	c3                   	ret
    e3a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e3ad:	00 00 00 

000000000000e3b0 <slipV_sprintValue>:
    e3b0:	55                   	push   %rbp
    e3b1:	48 89 e5             	mov    %rsp,%rbp
    e3b4:	48 83 ec 50          	sub    $0x50,%rsp
    e3b8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    e3bc:	89 55 f0             	mov    %edx,-0x10(%rbp)
    e3bf:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
    e3c3:	8b 45 f0             	mov    -0x10(%rbp),%eax
    e3c6:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    e3c9:	85 c0                	test   %eax,%eax
    e3cb:	0f 84 82 00 00 00    	je     e453 <slipV_sprintValue+0xa3>
    e3d1:	e9 00 00 00 00       	jmp    e3d6 <slipV_sprintValue+0x26>
    e3d6:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e3d9:	83 e8 01             	sub    $0x1,%eax
    e3dc:	0f 84 8b 00 00 00    	je     e46d <slipV_sprintValue+0xbd>
    e3e2:	e9 00 00 00 00       	jmp    e3e7 <slipV_sprintValue+0x37>
    e3e7:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e3ea:	83 e8 02             	sub    $0x2,%eax
    e3ed:	0f 84 ac 00 00 00    	je     e49f <slipV_sprintValue+0xef>
    e3f3:	e9 00 00 00 00       	jmp    e3f8 <slipV_sprintValue+0x48>
    e3f8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e3fb:	83 e8 04             	sub    $0x4,%eax
    e3fe:	0f 84 b9 00 00 00    	je     e4bd <slipV_sprintValue+0x10d>
    e404:	e9 00 00 00 00       	jmp    e409 <slipV_sprintValue+0x59>
    e409:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e40c:	83 e8 08             	sub    $0x8,%eax
    e40f:	0f 84 c7 00 00 00    	je     e4dc <slipV_sprintValue+0x12c>
    e415:	e9 00 00 00 00       	jmp    e41a <slipV_sprintValue+0x6a>
    e41a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e41d:	2d 00 01 00 00       	sub    $0x100,%eax
    e422:	0f 84 d2 00 00 00    	je     e4fa <slipV_sprintValue+0x14a>
    e428:	e9 00 00 00 00       	jmp    e42d <slipV_sprintValue+0x7d>
    e42d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e430:	2d 00 02 00 00       	sub    $0x200,%eax
    e435:	0f 84 d4 00 00 00    	je     e50f <slipV_sprintValue+0x15f>
    e43b:	e9 00 00 00 00       	jmp    e440 <slipV_sprintValue+0x90>
    e440:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    e443:	2d 00 04 00 00       	sub    $0x400,%eax
    e448:	0f 84 f8 00 00 00    	je     e546 <slipV_sprintValue+0x196>
    e44e:	e9 2d 01 00 00       	jmp    e580 <slipV_sprintValue+0x1d0>
    e453:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e457:	48 8d 35 78 a7 00 00 	lea    0xa778(%rip),%rsi        # 18bd6 <getFreeElement.b+0x3d6>
    e45e:	b0 00                	mov    $0x0,%al
    e460:	e8 7b 4d ff ff       	call   31e0 <sprintf@plt>
    e465:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e468:	e9 2e 01 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e46d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e471:	8a 4d e8             	mov    -0x18(%rbp),%cl
    e474:	48 8d 15 64 a7 00 00 	lea    0xa764(%rip),%rdx        # 18bdf <getFreeElement.b+0x3df>
    e47b:	48 8d 05 58 a7 00 00 	lea    0xa758(%rip),%rax        # 18bda <getFreeElement.b+0x3da>
    e482:	f6 c1 01             	test   $0x1,%cl
    e485:	48 0f 45 d0          	cmovne %rax,%rdx
    e489:	48 8d 35 3a b4 00 00 	lea    0xb43a(%rip),%rsi        # 198ca <yyrline+0x2ea>
    e490:	b0 00                	mov    $0x0,%al
    e492:	e8 49 4d ff ff       	call   31e0 <sprintf@plt>
    e497:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e49a:	e9 fc 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e49f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e4a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e4a7:	48 8d 35 37 a7 00 00 	lea    0xa737(%rip),%rsi        # 18be5 <getFreeElement.b+0x3e5>
    e4ae:	b0 00                	mov    $0x0,%al
    e4b0:	e8 2b 4d ff ff       	call   31e0 <sprintf@plt>
    e4b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e4b8:	e9 de 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e4bd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e4c1:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
    e4c6:	48 8d 35 1d a7 00 00 	lea    0xa71d(%rip),%rsi        # 18bea <getFreeElement.b+0x3ea>
    e4cd:	b0 01                	mov    $0x1,%al
    e4cf:	e8 0c 4d ff ff       	call   31e0 <sprintf@plt>
    e4d4:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e4d7:	e9 bf 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e4dc:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e4e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e4e4:	48 8d 35 df b3 00 00 	lea    0xb3df(%rip),%rsi        # 198ca <yyrline+0x2ea>
    e4eb:	b0 00                	mov    $0x0,%al
    e4ed:	e8 ee 4c ff ff       	call   31e0 <sprintf@plt>
    e4f2:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e4f5:	e9 a1 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e4fa:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e4fe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    e502:	e8 49 d8 ff ff       	call   bd50 <slipL_sprint>
    e507:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e50a:	e9 8c 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e50f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e513:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    e517:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    e51b:	e8 80 c4 ff ff       	call   a9a0 <slipM_getMeta>
    e520:	48 8b 40 58          	mov    0x58(%rax),%rax
    e524:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    e528:	ff d0                	call   *%rax
    e52a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    e52e:	89 55 d0             	mov    %edx,-0x30(%rbp)
    e531:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e535:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    e539:	8b 55 d0             	mov    -0x30(%rbp),%edx
    e53c:	e8 6f fe ff ff       	call   e3b0 <slipV_sprintValue>
    e541:	e9 4e 00 00 00       	jmp    e594 <slipV_sprintValue+0x1e4>
    e546:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e54a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    e54e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    e552:	e8 49 c4 ff ff       	call   a9a0 <slipM_getMeta>
    e557:	48 8b 40 68          	mov    0x68(%rax),%rax
    e55b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    e55f:	ff d0                	call   *%rax
    e561:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    e565:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e569:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    e56d:	48 8d 35 56 b3 00 00 	lea    0xb356(%rip),%rsi        # 198ca <yyrline+0x2ea>
    e574:	b0 00                	mov    $0x0,%al
    e576:	e8 65 4c ff ff       	call   31e0 <sprintf@plt>
    e57b:	e9 14 00 00 00       	jmp    e594 <slipV_sprintValue+0x1e4>
    e580:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    e584:	8b 75 f0             	mov    -0x10(%rbp),%esi
    e587:	e8 24 00 00 00       	call   e5b0 <slipV_sprintType>
    e58c:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e58f:	e9 07 00 00 00       	jmp    e59b <slipV_sprintValue+0x1eb>
    e594:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    e59b:	8b 45 fc             	mov    -0x4(%rbp),%eax
    e59e:	48 83 c4 50          	add    $0x50,%rsp
    e5a2:	5d                   	pop    %rbp
    e5a3:	c3                   	ret
    e5a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    e5ab:	00 00 00 
    e5ae:	66 90                	xchg   %ax,%ax

000000000000e5b0 <slipV_sprintType>:
    e5b0:	55                   	push   %rbp
    e5b1:	48 89 e5             	mov    %rsp,%rbp
    e5b4:	48 83 ec 20          	sub    $0x20,%rsp
    e5b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    e5bc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    e5bf:	8b 45 ec             	mov    -0x14(%rbp),%eax
    e5c2:	89 45 e8             	mov    %eax,-0x18(%rbp)
    e5c5:	85 c0                	test   %eax,%eax
    e5c7:	0f 84 4d 01 00 00    	je     e71a <slipV_sprintType+0x16a>
    e5cd:	e9 00 00 00 00       	jmp    e5d2 <slipV_sprintType+0x22>
    e5d2:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e5d5:	83 e8 01             	sub    $0x1,%eax
    e5d8:	0f 84 56 01 00 00    	je     e734 <slipV_sprintType+0x184>
    e5de:	e9 00 00 00 00       	jmp    e5e3 <slipV_sprintType+0x33>
    e5e3:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e5e6:	83 e8 02             	sub    $0x2,%eax
    e5e9:	0f 84 5f 01 00 00    	je     e74e <slipV_sprintType+0x19e>
    e5ef:	e9 00 00 00 00       	jmp    e5f4 <slipV_sprintType+0x44>
    e5f4:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e5f7:	83 e8 04             	sub    $0x4,%eax
    e5fa:	0f 84 68 01 00 00    	je     e768 <slipV_sprintType+0x1b8>
    e600:	e9 00 00 00 00       	jmp    e605 <slipV_sprintType+0x55>
    e605:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e608:	83 e8 08             	sub    $0x8,%eax
    e60b:	0f 84 71 01 00 00    	je     e782 <slipV_sprintType+0x1d2>
    e611:	e9 00 00 00 00       	jmp    e616 <slipV_sprintType+0x66>
    e616:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e619:	83 e8 10             	sub    $0x10,%eax
    e61c:	0f 84 7a 01 00 00    	je     e79c <slipV_sprintType+0x1ec>
    e622:	e9 00 00 00 00       	jmp    e627 <slipV_sprintType+0x77>
    e627:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e62a:	83 e8 20             	sub    $0x20,%eax
    e62d:	0f 84 83 01 00 00    	je     e7b6 <slipV_sprintType+0x206>
    e633:	e9 00 00 00 00       	jmp    e638 <slipV_sprintType+0x88>
    e638:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e63b:	83 e8 40             	sub    $0x40,%eax
    e63e:	0f 84 8c 01 00 00    	je     e7d0 <slipV_sprintType+0x220>
    e644:	e9 00 00 00 00       	jmp    e649 <slipV_sprintType+0x99>
    e649:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e64c:	2d 80 00 00 00       	sub    $0x80,%eax
    e651:	0f 84 93 01 00 00    	je     e7ea <slipV_sprintType+0x23a>
    e657:	e9 00 00 00 00       	jmp    e65c <slipV_sprintType+0xac>
    e65c:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e65f:	2d 00 01 00 00       	sub    $0x100,%eax
    e664:	0f 84 9a 01 00 00    	je     e804 <slipV_sprintType+0x254>
    e66a:	e9 00 00 00 00       	jmp    e66f <slipV_sprintType+0xbf>
    e66f:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e672:	2d 00 02 00 00       	sub    $0x200,%eax
    e677:	0f 84 a1 01 00 00    	je     e81e <slipV_sprintType+0x26e>
    e67d:	e9 00 00 00 00       	jmp    e682 <slipV_sprintType+0xd2>
    e682:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e685:	2d 00 04 00 00       	sub    $0x400,%eax
    e68a:	0f 84 a8 01 00 00    	je     e838 <slipV_sprintType+0x288>
    e690:	e9 00 00 00 00       	jmp    e695 <slipV_sprintType+0xe5>
    e695:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e698:	2d 00 08 00 00       	sub    $0x800,%eax
    e69d:	0f 84 af 01 00 00    	je     e852 <slipV_sprintType+0x2a2>
    e6a3:	e9 00 00 00 00       	jmp    e6a8 <slipV_sprintType+0xf8>
    e6a8:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e6ab:	2d 00 10 00 00       	sub    $0x1000,%eax
    e6b0:	0f 84 b6 01 00 00    	je     e86c <slipV_sprintType+0x2bc>
    e6b6:	e9 00 00 00 00       	jmp    e6bb <slipV_sprintType+0x10b>
    e6bb:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e6be:	2d 00 20 00 00       	sub    $0x2000,%eax
    e6c3:	0f 84 bd 01 00 00    	je     e886 <slipV_sprintType+0x2d6>
    e6c9:	e9 00 00 00 00       	jmp    e6ce <slipV_sprintType+0x11e>
    e6ce:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e6d1:	2d 00 00 01 00       	sub    $0x10000,%eax
    e6d6:	0f 84 c4 01 00 00    	je     e8a0 <slipV_sprintType+0x2f0>
    e6dc:	e9 00 00 00 00       	jmp    e6e1 <slipV_sprintType+0x131>
    e6e1:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e6e4:	2d 00 00 02 00       	sub    $0x20000,%eax
    e6e9:	0f 84 cb 01 00 00    	je     e8ba <slipV_sprintType+0x30a>
    e6ef:	e9 00 00 00 00       	jmp    e6f4 <slipV_sprintType+0x144>
    e6f4:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e6f7:	2d 00 00 04 00       	sub    $0x40000,%eax
    e6fc:	0f 84 d2 01 00 00    	je     e8d4 <slipV_sprintType+0x324>
    e702:	e9 00 00 00 00       	jmp    e707 <slipV_sprintType+0x157>
    e707:	8b 45 e8             	mov    -0x18(%rbp),%eax
    e70a:	2d 00 00 08 00       	sub    $0x80000,%eax
    e70f:	0f 84 d9 01 00 00    	je     e8ee <slipV_sprintType+0x33e>
    e715:	e9 ee 01 00 00       	jmp    e908 <slipV_sprintType+0x358>
    e71a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e71e:	48 8d 35 cf a4 00 00 	lea    0xa4cf(%rip),%rsi        # 18bf4 <getFreeElement.b+0x3f4>
    e725:	b0 00                	mov    $0x0,%al
    e727:	e8 b4 4a ff ff       	call   31e0 <sprintf@plt>
    e72c:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e72f:	e9 f0 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e734:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e738:	48 8d 35 b9 a4 00 00 	lea    0xa4b9(%rip),%rsi        # 18bf8 <getFreeElement.b+0x3f8>
    e73f:	b0 00                	mov    $0x0,%al
    e741:	e8 9a 4a ff ff       	call   31e0 <sprintf@plt>
    e746:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e749:	e9 d6 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e74e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e752:	48 8d 35 a4 a4 00 00 	lea    0xa4a4(%rip),%rsi        # 18bfd <getFreeElement.b+0x3fd>
    e759:	b0 00                	mov    $0x0,%al
    e75b:	e8 80 4a ff ff       	call   31e0 <sprintf@plt>
    e760:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e763:	e9 bc 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e768:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e76c:	48 8d 35 8e a4 00 00 	lea    0xa48e(%rip),%rsi        # 18c01 <getFreeElement.b+0x401>
    e773:	b0 00                	mov    $0x0,%al
    e775:	e8 66 4a ff ff       	call   31e0 <sprintf@plt>
    e77a:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e77d:	e9 a2 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e782:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e786:	48 8d 35 7b a4 00 00 	lea    0xa47b(%rip),%rsi        # 18c08 <getFreeElement.b+0x408>
    e78d:	b0 00                	mov    $0x0,%al
    e78f:	e8 4c 4a ff ff       	call   31e0 <sprintf@plt>
    e794:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e797:	e9 88 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e79c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e7a0:	48 8d 35 64 a4 00 00 	lea    0xa464(%rip),%rsi        # 18c0b <getFreeElement.b+0x40b>
    e7a7:	b0 00                	mov    $0x0,%al
    e7a9:	e8 32 4a ff ff       	call   31e0 <sprintf@plt>
    e7ae:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e7b1:	e9 6e 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e7b6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e7ba:	48 8d 35 50 a4 00 00 	lea    0xa450(%rip),%rsi        # 18c11 <getFreeElement.b+0x411>
    e7c1:	b0 00                	mov    $0x0,%al
    e7c3:	e8 18 4a ff ff       	call   31e0 <sprintf@plt>
    e7c8:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e7cb:	e9 54 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e7d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e7d4:	48 8d 35 3c a4 00 00 	lea    0xa43c(%rip),%rsi        # 18c17 <getFreeElement.b+0x417>
    e7db:	b0 00                	mov    $0x0,%al
    e7dd:	e8 fe 49 ff ff       	call   31e0 <sprintf@plt>
    e7e2:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e7e5:	e9 3a 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e7ea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e7ee:	48 8d 35 29 a4 00 00 	lea    0xa429(%rip),%rsi        # 18c1e <getFreeElement.b+0x41e>
    e7f5:	b0 00                	mov    $0x0,%al
    e7f7:	e8 e4 49 ff ff       	call   31e0 <sprintf@plt>
    e7fc:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e7ff:	e9 20 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e804:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e808:	48 8d 35 13 a4 00 00 	lea    0xa413(%rip),%rsi        # 18c22 <getFreeElement.b+0x422>
    e80f:	b0 00                	mov    $0x0,%al
    e811:	e8 ca 49 ff ff       	call   31e0 <sprintf@plt>
    e816:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e819:	e9 06 01 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e81e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e822:	48 8d 35 fe a3 00 00 	lea    0xa3fe(%rip),%rsi        # 18c27 <getFreeElement.b+0x427>
    e829:	b0 00                	mov    $0x0,%al
    e82b:	e8 b0 49 ff ff       	call   31e0 <sprintf@plt>
    e830:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e833:	e9 ec 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e838:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e83c:	48 8d 35 ea a3 00 00 	lea    0xa3ea(%rip),%rsi        # 18c2d <getFreeElement.b+0x42d>
    e843:	b0 00                	mov    $0x0,%al
    e845:	e8 96 49 ff ff       	call   31e0 <sprintf@plt>
    e84a:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e84d:	e9 d2 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e852:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e856:	48 8d 35 d7 a3 00 00 	lea    0xa3d7(%rip),%rsi        # 18c34 <getFreeElement.b+0x434>
    e85d:	b0 00                	mov    $0x0,%al
    e85f:	e8 7c 49 ff ff       	call   31e0 <sprintf@plt>
    e864:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e867:	e9 b8 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e86c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e870:	48 8d 35 c4 a3 00 00 	lea    0xa3c4(%rip),%rsi        # 18c3b <getFreeElement.b+0x43b>
    e877:	b0 00                	mov    $0x0,%al
    e879:	e8 62 49 ff ff       	call   31e0 <sprintf@plt>
    e87e:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e881:	e9 9e 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e886:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e88a:	48 8d 35 af a3 00 00 	lea    0xa3af(%rip),%rsi        # 18c40 <getFreeElement.b+0x440>
    e891:	b0 00                	mov    $0x0,%al
    e893:	e8 48 49 ff ff       	call   31e0 <sprintf@plt>
    e898:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e89b:	e9 84 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e8a0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e8a4:	48 8d 35 9b a3 00 00 	lea    0xa39b(%rip),%rsi        # 18c46 <getFreeElement.b+0x446>
    e8ab:	b0 00                	mov    $0x0,%al
    e8ad:	e8 2e 49 ff ff       	call   31e0 <sprintf@plt>
    e8b2:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e8b5:	e9 6a 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e8ba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e8be:	48 8d 35 86 a3 00 00 	lea    0xa386(%rip),%rsi        # 18c4b <getFreeElement.b+0x44b>
    e8c5:	b0 00                	mov    $0x0,%al
    e8c7:	e8 14 49 ff ff       	call   31e0 <sprintf@plt>
    e8cc:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e8cf:	e9 50 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e8d4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e8d8:	48 8d 35 75 a3 00 00 	lea    0xa375(%rip),%rsi        # 18c54 <getFreeElement.b+0x454>
    e8df:	b0 00                	mov    $0x0,%al
    e8e1:	e8 fa 48 ff ff       	call   31e0 <sprintf@plt>
    e8e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e8e9:	e9 36 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e8ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e8f2:	48 8d 35 64 a3 00 00 	lea    0xa364(%rip),%rsi        # 18c5d <getFreeElement.b+0x45d>
    e8f9:	b0 00                	mov    $0x0,%al
    e8fb:	e8 e0 48 ff ff       	call   31e0 <sprintf@plt>
    e900:	89 45 fc             	mov    %eax,-0x4(%rbp)
    e903:	e9 1c 00 00 00       	jmp    e924 <slipV_sprintType+0x374>
    e908:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    e90c:	8b 55 ec             	mov    -0x14(%rbp),%edx
    e90f:	48 8d 35 50 a3 00 00 	lea    0xa350(%rip),%rsi        # 18c66 <getFreeElement.b+0x466>
    e916:	b0 00                	mov    $0x0,%al
    e918:	e8 c3 48 ff ff       	call   31e0 <sprintf@plt>
    e91d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    e924:	8b 45 fc             	mov    -0x4(%rbp),%eax
    e927:	48 83 c4 20          	add    $0x20,%rsp
    e92b:	5d                   	pop    %rbp
    e92c:	c3                   	ret
    e92d:	0f 1f 00             	nopl   (%rax)

000000000000e930 <slipV_printValue>:
    e930:	55                   	push   %rbp
    e931:	48 89 e5             	mov    %rsp,%rbp
    e934:	48 83 ec 40          	sub    $0x40,%rsp
    e938:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    e93c:	89 75 f8             	mov    %esi,-0x8(%rbp)
    e93f:	8b 45 f8             	mov    -0x8(%rbp),%eax
    e942:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    e945:	85 c0                	test   %eax,%eax
    e947:	0f 84 82 00 00 00    	je     e9cf <slipV_printValue+0x9f>
    e94d:	e9 00 00 00 00       	jmp    e952 <slipV_printValue+0x22>
    e952:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e955:	83 e8 01             	sub    $0x1,%eax
    e958:	0f 84 84 00 00 00    	je     e9e2 <slipV_printValue+0xb2>
    e95e:	e9 00 00 00 00       	jmp    e963 <slipV_printValue+0x33>
    e963:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e966:	83 e8 02             	sub    $0x2,%eax
    e969:	0f 84 9e 00 00 00    	je     ea0d <slipV_printValue+0xdd>
    e96f:	e9 00 00 00 00       	jmp    e974 <slipV_printValue+0x44>
    e974:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e977:	83 e8 04             	sub    $0x4,%eax
    e97a:	0f 84 a4 00 00 00    	je     ea24 <slipV_printValue+0xf4>
    e980:	e9 00 00 00 00       	jmp    e985 <slipV_printValue+0x55>
    e985:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e988:	83 e8 08             	sub    $0x8,%eax
    e98b:	0f 84 ab 00 00 00    	je     ea3c <slipV_printValue+0x10c>
    e991:	e9 00 00 00 00       	jmp    e996 <slipV_printValue+0x66>
    e996:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e999:	2d 00 01 00 00       	sub    $0x100,%eax
    e99e:	0f 84 af 00 00 00    	je     ea53 <slipV_printValue+0x123>
    e9a4:	e9 00 00 00 00       	jmp    e9a9 <slipV_printValue+0x79>
    e9a9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e9ac:	2d 00 02 00 00       	sub    $0x200,%eax
    e9b1:	0f 84 aa 00 00 00    	je     ea61 <slipV_printValue+0x131>
    e9b7:	e9 00 00 00 00       	jmp    e9bc <slipV_printValue+0x8c>
    e9bc:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    e9bf:	2d 00 04 00 00       	sub    $0x400,%eax
    e9c4:	0f 84 ca 00 00 00    	je     ea94 <slipV_printValue+0x164>
    e9ca:	e9 fb 00 00 00       	jmp    eaca <slipV_printValue+0x19a>
    e9cf:	48 8d 3d 00 a2 00 00 	lea    0xa200(%rip),%rdi        # 18bd6 <getFreeElement.b+0x3d6>
    e9d6:	b0 00                	mov    $0x0,%al
    e9d8:	e8 f3 46 ff ff       	call   30d0 <printf@plt>
    e9dd:	e9 f0 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    e9e2:	8a 4d f0             	mov    -0x10(%rbp),%cl
    e9e5:	48 8d 35 f3 a1 00 00 	lea    0xa1f3(%rip),%rsi        # 18bdf <getFreeElement.b+0x3df>
    e9ec:	48 8d 05 e7 a1 00 00 	lea    0xa1e7(%rip),%rax        # 18bda <getFreeElement.b+0x3da>
    e9f3:	f6 c1 01             	test   $0x1,%cl
    e9f6:	48 0f 45 f0          	cmovne %rax,%rsi
    e9fa:	48 8d 3d c9 ae 00 00 	lea    0xaec9(%rip),%rdi        # 198ca <yyrline+0x2ea>
    ea01:	b0 00                	mov    $0x0,%al
    ea03:	e8 c8 46 ff ff       	call   30d0 <printf@plt>
    ea08:	e9 c5 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea0d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    ea11:	48 8d 3d cd a1 00 00 	lea    0xa1cd(%rip),%rdi        # 18be5 <getFreeElement.b+0x3e5>
    ea18:	b0 00                	mov    $0x0,%al
    ea1a:	e8 b1 46 ff ff       	call   30d0 <printf@plt>
    ea1f:	e9 ae 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea24:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    ea29:	48 8d 3d ba a1 00 00 	lea    0xa1ba(%rip),%rdi        # 18bea <getFreeElement.b+0x3ea>
    ea30:	b0 01                	mov    $0x1,%al
    ea32:	e8 99 46 ff ff       	call   30d0 <printf@plt>
    ea37:	e9 96 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea3c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    ea40:	48 8d 3d 83 ae 00 00 	lea    0xae83(%rip),%rdi        # 198ca <yyrline+0x2ea>
    ea47:	b0 00                	mov    $0x0,%al
    ea49:	e8 82 46 ff ff       	call   30d0 <printf@plt>
    ea4e:	e9 7f 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea53:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ea57:	e8 54 d1 ff ff       	call   bbb0 <slipL_print>
    ea5c:	e9 71 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ea65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ea69:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ea6d:	e8 2e bf ff ff       	call   a9a0 <slipM_getMeta>
    ea72:	48 8b 40 58          	mov    0x58(%rax),%rax
    ea76:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ea7a:	ff d0                	call   *%rax
    ea7c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ea80:	89 55 e0             	mov    %edx,-0x20(%rbp)
    ea83:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    ea87:	8b 75 e0             	mov    -0x20(%rbp),%esi
    ea8a:	e8 a1 fe ff ff       	call   e930 <slipV_printValue>
    ea8f:	e9 3e 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    ea94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ea98:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ea9c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    eaa0:	e8 fb be ff ff       	call   a9a0 <slipM_getMeta>
    eaa5:	48 8b 40 68          	mov    0x68(%rax),%rax
    eaa9:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    eaad:	ff d0                	call   *%rax
    eaaf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    eab3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    eab7:	48 8d 3d 31 a1 00 00 	lea    0xa131(%rip),%rdi        # 18bef <getFreeElement.b+0x3ef>
    eabe:	b0 00                	mov    $0x0,%al
    eac0:	e8 0b 46 ff ff       	call   30d0 <printf@plt>
    eac5:	e9 08 00 00 00       	jmp    ead2 <slipV_printValue+0x1a2>
    eaca:	8b 7d f8             	mov    -0x8(%rbp),%edi
    eacd:	e8 0e 00 00 00       	call   eae0 <slipV_printType>
    ead2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    ead7:	48 83 c4 40          	add    $0x40,%rsp
    eadb:	5d                   	pop    %rbp
    eadc:	c3                   	ret
    eadd:	0f 1f 00             	nopl   (%rax)

000000000000eae0 <slipV_printType>:
    eae0:	55                   	push   %rbp
    eae1:	48 89 e5             	mov    %rsp,%rbp
    eae4:	48 83 ec 20          	sub    $0x20,%rsp
    eae8:	89 7d fc             	mov    %edi,-0x4(%rbp)
    eaeb:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    eaef:	8b 75 fc             	mov    -0x4(%rbp),%esi
    eaf2:	e8 b9 fa ff ff       	call   e5b0 <slipV_sprintType>
    eaf7:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
    eafb:	48 8d 3d c8 ad 00 00 	lea    0xadc8(%rip),%rdi        # 198ca <yyrline+0x2ea>
    eb02:	b0 00                	mov    $0x0,%al
    eb04:	e8 c7 45 ff ff       	call   30d0 <printf@plt>
    eb09:	31 c0                	xor    %eax,%eax
    eb0b:	48 83 c4 20          	add    $0x20,%rsp
    eb0f:	5d                   	pop    %rbp
    eb10:	c3                   	ret
    eb11:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    eb18:	00 00 00 
    eb1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000eb20 <slipV_sprintValueType>:
    eb20:	55                   	push   %rbp
    eb21:	48 89 e5             	mov    %rsp,%rbp
    eb24:	48 83 ec 20          	sub    $0x20,%rsp
    eb28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    eb2c:	89 55 f8             	mov    %edx,-0x8(%rbp)
    eb2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    eb33:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    eb37:	8b 75 f8             	mov    -0x8(%rbp),%esi
    eb3a:	e8 71 fa ff ff       	call   e5b0 <slipV_sprintType>
    eb3f:	48 83 c4 20          	add    $0x20,%rsp
    eb43:	5d                   	pop    %rbp
    eb44:	c3                   	ret
    eb45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    eb4c:	00 00 00 
    eb4f:	90                   	nop

000000000000eb50 <slipV_isEqual>:
    eb50:	55                   	push   %rbp
    eb51:	48 89 e5             	mov    %rsp,%rbp
    eb54:	48 83 ec 40          	sub    $0x40,%rsp
    eb58:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    eb5c:	89 75 f0             	mov    %esi,-0x10(%rbp)
    eb5f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    eb63:	89 4d e0             	mov    %ecx,-0x20(%rbp)
    eb66:	8b 45 f0             	mov    -0x10(%rbp),%eax
    eb69:	3b 45 e0             	cmp    -0x20(%rbp),%eax
    eb6c:	0f 84 09 00 00 00    	je     eb7b <slipV_isEqual+0x2b>
    eb72:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    eb76:	e9 de 02 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    eb7b:	8b 45 f0             	mov    -0x10(%rbp),%eax
    eb7e:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    eb81:	85 c0                	test   %eax,%eax
    eb83:	0f 84 4d 01 00 00    	je     ecd6 <slipV_isEqual+0x186>
    eb89:	e9 00 00 00 00       	jmp    eb8e <slipV_isEqual+0x3e>
    eb8e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    eb91:	83 e8 01             	sub    $0x1,%eax
    eb94:	0f 84 45 01 00 00    	je     ecdf <slipV_isEqual+0x18f>
    eb9a:	e9 00 00 00 00       	jmp    eb9f <slipV_isEqual+0x4f>
    eb9f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    eba2:	83 e8 02             	sub    $0x2,%eax
    eba5:	0f 84 54 01 00 00    	je     ecff <slipV_isEqual+0x1af>
    ebab:	e9 00 00 00 00       	jmp    ebb0 <slipV_isEqual+0x60>
    ebb0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ebb3:	83 e8 04             	sub    $0x4,%eax
    ebb6:	0f 84 58 01 00 00    	je     ed14 <slipV_isEqual+0x1c4>
    ebbc:	e9 00 00 00 00       	jmp    ebc1 <slipV_isEqual+0x71>
    ebc1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ebc4:	83 e8 08             	sub    $0x8,%eax
    ebc7:	0f 84 63 01 00 00    	je     ed30 <slipV_isEqual+0x1e0>
    ebcd:	e9 00 00 00 00       	jmp    ebd2 <slipV_isEqual+0x82>
    ebd2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ebd5:	83 e8 10             	sub    $0x10,%eax
    ebd8:	0f 84 6f 01 00 00    	je     ed4d <slipV_isEqual+0x1fd>
    ebde:	e9 00 00 00 00       	jmp    ebe3 <slipV_isEqual+0x93>
    ebe3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ebe6:	83 e8 20             	sub    $0x20,%eax
    ebe9:	0f 84 73 01 00 00    	je     ed62 <slipV_isEqual+0x212>
    ebef:	e9 00 00 00 00       	jmp    ebf4 <slipV_isEqual+0xa4>
    ebf4:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ebf7:	83 e8 40             	sub    $0x40,%eax
    ebfa:	0f 84 62 01 00 00    	je     ed62 <slipV_isEqual+0x212>
    ec00:	e9 00 00 00 00       	jmp    ec05 <slipV_isEqual+0xb5>
    ec05:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec08:	2d 80 00 00 00       	sub    $0x80,%eax
    ec0d:	0f 84 64 01 00 00    	je     ed77 <slipV_isEqual+0x227>
    ec13:	e9 00 00 00 00       	jmp    ec18 <slipV_isEqual+0xc8>
    ec18:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec1b:	2d 00 01 00 00       	sub    $0x100,%eax
    ec20:	0f 84 74 01 00 00    	je     ed9a <slipV_isEqual+0x24a>
    ec26:	e9 00 00 00 00       	jmp    ec2b <slipV_isEqual+0xdb>
    ec2b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec2e:	2d 00 02 00 00       	sub    $0x200,%eax
    ec33:	0f 84 0b 02 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec39:	e9 00 00 00 00       	jmp    ec3e <slipV_isEqual+0xee>
    ec3e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec41:	2d 00 04 00 00       	sub    $0x400,%eax
    ec46:	0f 84 f8 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec4c:	e9 00 00 00 00       	jmp    ec51 <slipV_isEqual+0x101>
    ec51:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec54:	2d 00 08 00 00       	sub    $0x800,%eax
    ec59:	0f 84 e5 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec5f:	e9 00 00 00 00       	jmp    ec64 <slipV_isEqual+0x114>
    ec64:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec67:	2d 00 10 00 00       	sub    $0x1000,%eax
    ec6c:	0f 84 d2 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec72:	e9 00 00 00 00       	jmp    ec77 <slipV_isEqual+0x127>
    ec77:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec7a:	2d 00 20 00 00       	sub    $0x2000,%eax
    ec7f:	0f 84 bf 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec85:	e9 00 00 00 00       	jmp    ec8a <slipV_isEqual+0x13a>
    ec8a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ec8d:	2d 00 00 01 00       	sub    $0x10000,%eax
    ec92:	0f 84 ac 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ec98:	e9 00 00 00 00       	jmp    ec9d <slipV_isEqual+0x14d>
    ec9d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    eca0:	2d 00 00 02 00       	sub    $0x20000,%eax
    eca5:	0f 84 99 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ecab:	e9 00 00 00 00       	jmp    ecb0 <slipV_isEqual+0x160>
    ecb0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ecb3:	2d 00 00 04 00       	sub    $0x40000,%eax
    ecb8:	0f 84 86 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ecbe:	e9 00 00 00 00       	jmp    ecc3 <slipV_isEqual+0x173>
    ecc3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    ecc6:	2d 00 00 08 00       	sub    $0x80000,%eax
    eccb:	0f 84 73 01 00 00    	je     ee44 <slipV_isEqual+0x2f4>
    ecd1:	e9 73 01 00 00       	jmp    ee49 <slipV_isEqual+0x2f9>
    ecd6:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
    ecda:	e9 7a 01 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ecdf:	8a 45 e8             	mov    -0x18(%rbp),%al
    ece2:	24 01                	and    $0x1,%al
    ece4:	0f b6 c0             	movzbl %al,%eax
    ece7:	8a 4d d8             	mov    -0x28(%rbp),%cl
    ecea:	80 e1 01             	and    $0x1,%cl
    eced:	0f b6 c9             	movzbl %cl,%ecx
    ecf0:	39 c8                	cmp    %ecx,%eax
    ecf2:	0f 94 c0             	sete   %al
    ecf5:	24 01                	and    $0x1,%al
    ecf7:	88 45 ff             	mov    %al,-0x1(%rbp)
    ecfa:	e9 5a 01 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ecff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ed07:	0f 94 c0             	sete   %al
    ed0a:	24 01                	and    $0x1,%al
    ed0c:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed0f:	e9 45 01 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed14:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
    ed19:	66 0f 2e 45 d8       	ucomisd -0x28(%rbp),%xmm0
    ed1e:	0f 94 c0             	sete   %al
    ed21:	0f 9b c1             	setnp  %cl
    ed24:	20 c8                	and    %cl,%al
    ed26:	24 01                	and    $0x1,%al
    ed28:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed2b:	e9 29 01 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed30:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ed34:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    ed38:	e8 e3 43 ff ff       	call   3120 <strcmp@plt>
    ed3d:	83 f8 00             	cmp    $0x0,%eax
    ed40:	0f 94 c0             	sete   %al
    ed43:	24 01                	and    $0x1,%al
    ed45:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed48:	e9 0c 01 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed51:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ed55:	0f 94 c0             	sete   %al
    ed58:	24 01                	and    $0x1,%al
    ed5a:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed5d:	e9 f7 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed66:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ed6a:	0f 94 c0             	sete   %al
    ed6d:	24 01                	and    $0x1,%al
    ed6f:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed72:	e9 e2 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed77:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ed7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ed7f:	48 8b 39             	mov    (%rcx),%rdi
    ed82:	8b 71 08             	mov    0x8(%rcx),%esi
    ed85:	48 8b 10             	mov    (%rax),%rdx
    ed88:	8b 48 08             	mov    0x8(%rax),%ecx
    ed8b:	e8 c0 fd ff ff       	call   eb50 <slipV_isEqual>
    ed90:	24 01                	and    $0x1,%al
    ed92:	88 45 ff             	mov    %al,-0x1(%rbp)
    ed95:	e9 bf 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ed9a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ed9e:	e8 cd cd ff ff       	call   bb70 <slipL_getLength>
    eda3:	89 45 c0             	mov    %eax,-0x40(%rbp)
    eda6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    edaa:	e8 c1 cd ff ff       	call   bb70 <slipL_getLength>
    edaf:	89 c1                	mov    %eax,%ecx
    edb1:	8b 45 c0             	mov    -0x40(%rbp),%eax
    edb4:	39 c8                	cmp    %ecx,%eax
    edb6:	0f 84 09 00 00 00    	je     edc5 <slipV_isEqual+0x275>
    edbc:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    edc0:	e9 94 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    edc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    edc9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    edcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    edd1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    edd5:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    edda:	0f 84 5b 00 00 00    	je     ee3b <slipV_isEqual+0x2eb>
    ede0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    ede5:	0f 85 09 00 00 00    	jne    edf4 <slipV_isEqual+0x2a4>
    edeb:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    edef:	e9 65 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    edf4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    edf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    edfc:	48 8b 79 08          	mov    0x8(%rcx),%rdi
    ee00:	8b 71 10             	mov    0x10(%rcx),%esi
    ee03:	48 8b 50 08          	mov    0x8(%rax),%rdx
    ee07:	8b 48 10             	mov    0x10(%rax),%ecx
    ee0a:	e8 41 fd ff ff       	call   eb50 <slipV_isEqual>
    ee0f:	a8 01                	test   $0x1,%al
    ee11:	0f 85 09 00 00 00    	jne    ee20 <slipV_isEqual+0x2d0>
    ee17:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    ee1b:	e9 39 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ee20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ee24:	48 8b 00             	mov    (%rax),%rax
    ee27:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ee2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ee2f:	48 8b 00             	mov    (%rax),%rax
    ee32:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ee36:	e9 9a ff ff ff       	jmp    edd5 <slipV_isEqual+0x285>
    ee3b:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
    ee3f:	e9 15 00 00 00       	jmp    ee59 <slipV_isEqual+0x309>
    ee44:	e9 00 00 00 00       	jmp    ee49 <slipV_isEqual+0x2f9>
    ee49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ee4d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ee51:	0f 94 c0             	sete   %al
    ee54:	24 01                	and    $0x1,%al
    ee56:	88 45 ff             	mov    %al,-0x1(%rbp)
    ee59:	8a 45 ff             	mov    -0x1(%rbp),%al
    ee5c:	24 01                	and    $0x1,%al
    ee5e:	0f b6 c0             	movzbl %al,%eax
    ee61:	48 83 c4 40          	add    $0x40,%rsp
    ee65:	5d                   	pop    %rbp
    ee66:	c3                   	ret
    ee67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ee6e:	00 00 

000000000000ee70 <slipV_isThisID>:
    ee70:	55                   	push   %rbp
    ee71:	48 89 e5             	mov    %rsp,%rbp
    ee74:	48 83 ec 20          	sub    $0x20,%rsp
    ee78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ee7c:	89 75 f0             	mov    %esi,-0x10(%rbp)
    ee7f:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    ee83:	83 7d f0 08          	cmpl   $0x8,-0x10(%rbp)
    ee87:	0f 84 09 00 00 00    	je     ee96 <slipV_isThisID+0x26>
    ee8d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    ee91:	e9 18 00 00 00       	jmp    eeae <slipV_isThisID+0x3e>
    ee96:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ee9a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    ee9e:	e8 7d 42 ff ff       	call   3120 <strcmp@plt>
    eea3:	83 f8 00             	cmp    $0x0,%eax
    eea6:	0f 94 c0             	sete   %al
    eea9:	24 01                	and    $0x1,%al
    eeab:	88 45 ff             	mov    %al,-0x1(%rbp)
    eeae:	8a 45 ff             	mov    -0x1(%rbp),%al
    eeb1:	24 01                	and    $0x1,%al
    eeb3:	0f b6 c0             	movzbl %al,%eax
    eeb6:	48 83 c4 20          	add    $0x20,%rsp
    eeba:	5d                   	pop    %rbp
    eebb:	c3                   	ret
    eebc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000eec0 <slipV_getValue>:
    eec0:	55                   	push   %rbp
    eec1:	48 89 e5             	mov    %rsp,%rbp
    eec4:	48 83 ec 20          	sub    $0x20,%rsp
    eec8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    eecc:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    eecf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    eed3:	48 83 c7 08          	add    $0x8,%rdi
    eed7:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    eeda:	e8 71 ed ff ff       	call   dc50 <slipS_get>
    eedf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    eee3:	89 55 f8             	mov    %edx,-0x8(%rbp)
    eee6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eeea:	8b 55 f8             	mov    -0x8(%rbp),%edx
    eeed:	48 83 c4 20          	add    $0x20,%rsp
    eef1:	5d                   	pop    %rbp
    eef2:	c3                   	ret
    eef3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    eefa:	00 00 00 
    eefd:	0f 1f 00             	nopl   (%rax)

000000000000ef00 <slipV_setValue>:
    ef00:	55                   	push   %rbp
    ef01:	48 89 e5             	mov    %rsp,%rbp
    ef04:	48 83 ec 20          	sub    $0x20,%rsp
    ef08:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    ef0c:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    ef0f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ef13:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    ef16:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    ef19:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ef1d:	3b 41 14             	cmp    0x14(%rcx),%eax
    ef20:	0f 82 34 00 00 00    	jb     ef5a <slipV_setValue+0x5a>
    ef26:	e9 00 00 00 00       	jmp    ef2b <slipV_setValue+0x2b>
    ef2b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    ef2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ef32:	3b 41 10             	cmp    0x10(%rcx),%eax
    ef35:	0f 82 12 00 00 00    	jb     ef4d <slipV_setValue+0x4d>
    ef3b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ef3f:	48 83 c7 08          	add    $0x8,%rdi
    ef43:	e8 78 e9 ff ff       	call   d8c0 <slipS_extend>
    ef48:	e9 de ff ff ff       	jmp    ef2b <slipV_setValue+0x2b>
    ef4d:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    ef50:	83 c1 01             	add    $0x1,%ecx
    ef53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ef57:	89 48 14             	mov    %ecx,0x14(%rax)
    ef5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    ef5e:	48 83 c7 08          	add    $0x8,%rdi
    ef62:	8b 75 e4             	mov    -0x1c(%rbp),%esi
    ef65:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ef69:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    ef6c:	e8 1f ee ff ff       	call   dd90 <slipS_set>
    ef71:	48 83 c4 20          	add    $0x20,%rsp
    ef75:	5d                   	pop    %rbp
    ef76:	c3                   	ret
    ef77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    ef7e:	00 00 

000000000000ef80 <slipV_pushInt>:
    ef80:	55                   	push   %rbp
    ef81:	48 89 e5             	mov    %rsp,%rbp
    ef84:	48 83 ec 20          	sub    $0x20,%rsp
    ef88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef8c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ef8f:	48 63 75 f4          	movslq -0xc(%rbp),%rsi
    ef93:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    ef97:	e8 54 f3 ff ff       	call   e2f0 <slipV_setValueInt>
    ef9c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    efa0:	48 83 c7 08          	add    $0x8,%rdi
    efa4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    efa8:	8b 55 e8             	mov    -0x18(%rbp),%edx
    efab:	e8 20 e8 ff ff       	call   d7d0 <slipS_pushValue>
    efb0:	48 83 c4 20          	add    $0x20,%rsp
    efb4:	5d                   	pop    %rbp
    efb5:	c3                   	ret
    efb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    efbd:	00 00 00 

000000000000efc0 <slipV_pushDouble>:
    efc0:	55                   	push   %rbp
    efc1:	48 89 e5             	mov    %rsp,%rbp
    efc4:	48 83 ec 20          	sub    $0x20,%rsp
    efc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    efcc:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
    efd1:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    efd6:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    efda:	e8 71 f3 ff ff       	call   e350 <slipV_setValueDouble>
    efdf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    efe3:	48 83 c7 08          	add    $0x8,%rdi
    efe7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    efeb:	8b 55 e8             	mov    -0x18(%rbp),%edx
    efee:	e8 dd e7 ff ff       	call   d7d0 <slipS_pushValue>
    eff3:	48 83 c4 20          	add    $0x20,%rsp
    eff7:	5d                   	pop    %rbp
    eff8:	c3                   	ret
    eff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f000 <slipV_pushNil>:
    f000:	55                   	push   %rbp
    f001:	48 89 e5             	mov    %rsp,%rbp
    f004:	48 83 ec 20          	sub    $0x20,%rsp
    f008:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f00c:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
    f010:	31 c0                	xor    %eax,%eax
    f012:	89 c6                	mov    %eax,%esi
    f014:	e8 d7 f2 ff ff       	call   e2f0 <slipV_setValueInt>
    f019:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f01d:	48 83 c7 08          	add    $0x8,%rdi
    f021:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    f025:	8b 55 f0             	mov    -0x10(%rbp),%edx
    f028:	e8 a3 e7 ff ff       	call   d7d0 <slipS_pushValue>
    f02d:	48 83 c4 20          	add    $0x20,%rsp
    f031:	5d                   	pop    %rbp
    f032:	c3                   	ret
    f033:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f03a:	00 00 00 
    f03d:	0f 1f 00             	nopl   (%rax)

000000000000f040 <slipV_pushTable>:
    f040:	55                   	push   %rbp
    f041:	48 89 e5             	mov    %rsp,%rbp
    f044:	48 83 ec 20          	sub    $0x20,%rsp
    f048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f04c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f050:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f054:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f058:	e8 b3 f0 ff ff       	call   e110 <slipV_setValueTable>
    f05d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f061:	48 83 c7 08          	add    $0x8,%rdi
    f065:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f069:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f06c:	e8 5f e7 ff ff       	call   d7d0 <slipS_pushValue>
    f071:	48 83 c4 20          	add    $0x20,%rsp
    f075:	5d                   	pop    %rbp
    f076:	c3                   	ret
    f077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f07e:	00 00 

000000000000f080 <slipV_pushCFunc>:
    f080:	55                   	push   %rbp
    f081:	48 89 e5             	mov    %rsp,%rbp
    f084:	48 83 ec 20          	sub    $0x20,%rsp
    f088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f08c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f090:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f094:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f098:	e8 c3 f1 ff ff       	call   e260 <slipV_setValueCFunc>
    f09d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f0a1:	48 83 c7 08          	add    $0x8,%rdi
    f0a5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f0a9:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f0ac:	e8 1f e7 ff ff       	call   d7d0 <slipS_pushValue>
    f0b1:	48 83 c4 20          	add    $0x20,%rsp
    f0b5:	5d                   	pop    %rbp
    f0b6:	c3                   	ret
    f0b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f0be:	00 00 

000000000000f0c0 <slipV_pushCLightData>:
    f0c0:	55                   	push   %rbp
    f0c1:	48 89 e5             	mov    %rsp,%rbp
    f0c4:	48 83 ec 20          	sub    $0x20,%rsp
    f0c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f0d0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f0d4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f0d8:	e8 53 f1 ff ff       	call   e230 <slipV_setValueCPtr>
    f0dd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f0e1:	48 83 c7 08          	add    $0x8,%rdi
    f0e5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f0e9:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f0ec:	e8 df e6 ff ff       	call   d7d0 <slipS_pushValue>
    f0f1:	48 83 c4 20          	add    $0x20,%rsp
    f0f5:	5d                   	pop    %rbp
    f0f6:	c3                   	ret
    f0f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f0fe:	00 00 

000000000000f100 <slipV_pushSString>:
    f100:	55                   	push   %rbp
    f101:	48 89 e5             	mov    %rsp,%rbp
    f104:	48 83 ec 20          	sub    $0x20,%rsp
    f108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f10c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f110:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f114:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f118:	e8 c3 ef ff ff       	call   e0e0 <slipV_setValueString>
    f11d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f121:	48 83 c7 08          	add    $0x8,%rdi
    f125:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f129:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f12c:	e8 9f e6 ff ff       	call   d7d0 <slipS_pushValue>
    f131:	48 83 c4 20          	add    $0x20,%rsp
    f135:	5d                   	pop    %rbp
    f136:	c3                   	ret
    f137:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f13e:	00 00 

000000000000f140 <slipV_pushStr>:
    f140:	55                   	push   %rbp
    f141:	48 89 e5             	mov    %rsp,%rbp
    f144:	48 83 ec 30          	sub    $0x30,%rsp
    f148:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f14c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f154:	48 8b 78 48          	mov    0x48(%rax),%rdi
    f158:	e8 c3 dc ff ff       	call   ce20 <slipD_str>
    f15d:	48 8b 40 08          	mov    0x8(%rax),%rax
    f161:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    f165:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    f169:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f16d:	ff d0                	call   *%rax
    f16f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f173:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f177:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f17b:	e8 60 ef ff ff       	call   e0e0 <slipV_setValueString>
    f180:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f184:	48 83 c7 08          	add    $0x8,%rdi
    f188:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f18c:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f18f:	e8 3c e6 ff ff       	call   d7d0 <slipS_pushValue>
    f194:	48 83 c4 30          	add    $0x30,%rsp
    f198:	5d                   	pop    %rbp
    f199:	c3                   	ret
    f19a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000000f1a0 <slipV_pushListNode>:
    f1a0:	55                   	push   %rbp
    f1a1:	48 89 e5             	mov    %rsp,%rbp
    f1a4:	48 83 ec 20          	sub    $0x20,%rsp
    f1a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f1ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f1b0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    f1b4:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f1b8:	e8 e3 ef ff ff       	call   e1a0 <slipV_setValueList>
    f1bd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f1c1:	48 83 c7 08          	add    $0x8,%rdi
    f1c5:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f1c9:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f1cc:	e8 ff e5 ff ff       	call   d7d0 <slipS_pushValue>
    f1d1:	48 83 c4 20          	add    $0x20,%rsp
    f1d5:	5d                   	pop    %rbp
    f1d6:	c3                   	ret
    f1d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f1de:	00 00 

000000000000f1e0 <slipV_pushExpr>:
    f1e0:	55                   	push   %rbp
    f1e1:	48 89 e5             	mov    %rsp,%rbp
    f1e4:	48 83 ec 20          	sub    $0x20,%rsp
    f1e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f1ec:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f1ef:	48 63 75 f4          	movslq -0xc(%rbp),%rsi
    f1f3:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
    f1f7:	e8 24 f1 ff ff       	call   e320 <slipV_setValueExpr>
    f1fc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f200:	48 83 c7 08          	add    $0x8,%rdi
    f204:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    f208:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f20b:	e8 c0 e5 ff ff       	call   d7d0 <slipS_pushValue>
    f210:	48 83 c4 20          	add    $0x20,%rsp
    f214:	5d                   	pop    %rbp
    f215:	c3                   	ret
    f216:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f21d:	00 00 00 

000000000000f220 <slipV_toBool>:
    f220:	55                   	push   %rbp
    f221:	48 89 e5             	mov    %rsp,%rbp
    f224:	48 83 ec 20          	sub    $0x20,%rsp
    f228:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f22c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f22f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f233:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f236:	e8 85 fc ff ff       	call   eec0 <slipV_getValue>
    f23b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f23f:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f242:	8a 45 e0             	mov    -0x20(%rbp),%al
    f245:	24 01                	and    $0x1,%al
    f247:	0f b6 c0             	movzbl %al,%eax
    f24a:	48 83 c4 20          	add    $0x20,%rsp
    f24e:	5d                   	pop    %rbp
    f24f:	c3                   	ret

000000000000f250 <slipV_toInt>:
    f250:	55                   	push   %rbp
    f251:	48 89 e5             	mov    %rsp,%rbp
    f254:	48 83 ec 20          	sub    $0x20,%rsp
    f258:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f25c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f25f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f263:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f266:	e8 55 fc ff ff       	call   eec0 <slipV_getValue>
    f26b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f26f:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f272:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f276:	48 83 c4 20          	add    $0x20,%rsp
    f27a:	5d                   	pop    %rbp
    f27b:	c3                   	ret
    f27c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f280 <slipV_toDouble>:
    f280:	55                   	push   %rbp
    f281:	48 89 e5             	mov    %rsp,%rbp
    f284:	48 83 ec 20          	sub    $0x20,%rsp
    f288:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f28c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f28f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f293:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f296:	e8 25 fc ff ff       	call   eec0 <slipV_getValue>
    f29b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f29f:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f2a2:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
    f2a7:	48 83 c4 20          	add    $0x20,%rsp
    f2ab:	5d                   	pop    %rbp
    f2ac:	c3                   	ret
    f2ad:	0f 1f 00             	nopl   (%rax)

000000000000f2b0 <slipV_toSTable>:
    f2b0:	55                   	push   %rbp
    f2b1:	48 89 e5             	mov    %rsp,%rbp
    f2b4:	48 83 ec 20          	sub    $0x20,%rsp
    f2b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f2bc:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f2bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f2c3:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f2c6:	e8 f5 fb ff ff       	call   eec0 <slipV_getValue>
    f2cb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f2cf:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f2d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f2d6:	48 83 c4 20          	add    $0x20,%rsp
    f2da:	5d                   	pop    %rbp
    f2db:	c3                   	ret
    f2dc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f2e0 <slipV_toSString>:
    f2e0:	55                   	push   %rbp
    f2e1:	48 89 e5             	mov    %rsp,%rbp
    f2e4:	48 83 ec 20          	sub    $0x20,%rsp
    f2e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f2ec:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f2ef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f2f3:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f2f6:	e8 c5 fb ff ff       	call   eec0 <slipV_getValue>
    f2fb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f2ff:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f302:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f306:	48 83 c4 20          	add    $0x20,%rsp
    f30a:	5d                   	pop    %rbp
    f30b:	c3                   	ret
    f30c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f310 <slipV_toCStr>:
    f310:	55                   	push   %rbp
    f311:	48 89 e5             	mov    %rsp,%rbp
    f314:	48 83 ec 30          	sub    $0x30,%rsp
    f318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f31c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f31f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f323:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f326:	e8 95 fb ff ff       	call   eec0 <slipV_getValue>
    f32b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f32f:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f332:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f336:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f33a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f33e:	e8 5d b6 ff ff       	call   a9a0 <slipM_getMeta>
    f343:	48 8b 40 68          	mov    0x68(%rax),%rax
    f347:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f34b:	ff d0                	call   *%rax
    f34d:	48 83 c4 30          	add    $0x30,%rsp
    f351:	5d                   	pop    %rbp
    f352:	c3                   	ret
    f353:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    f35a:	00 00 00 
    f35d:	0f 1f 00             	nopl   (%rax)

000000000000f360 <slipV_toSChunk>:
    f360:	55                   	push   %rbp
    f361:	48 89 e5             	mov    %rsp,%rbp
    f364:	48 83 ec 20          	sub    $0x20,%rsp
    f368:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f36c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f36f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f373:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f376:	e8 45 fb ff ff       	call   eec0 <slipV_getValue>
    f37b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f37f:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f382:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f386:	48 83 c4 20          	add    $0x20,%rsp
    f38a:	5d                   	pop    %rbp
    f38b:	c3                   	ret
    f38c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f390 <slipV_toListNode>:
    f390:	55                   	push   %rbp
    f391:	48 89 e5             	mov    %rsp,%rbp
    f394:	48 83 ec 20          	sub    $0x20,%rsp
    f398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f39c:	89 75 f4             	mov    %esi,-0xc(%rbp)
    f39f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    f3a3:	8b 75 f4             	mov    -0xc(%rbp),%esi
    f3a6:	e8 15 fb ff ff       	call   eec0 <slipV_getValue>
    f3ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f3af:	89 55 e8             	mov    %edx,-0x18(%rbp)
    f3b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f3b6:	48 83 c4 20          	add    $0x20,%rsp
    f3ba:	5d                   	pop    %rbp
    f3bb:	c3                   	ret
    f3bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f3c0 <slipV_call>:
    f3c0:	55                   	push   %rbp
    f3c1:	48 89 e5             	mov    %rsp,%rbp
    f3c4:	48 83 ec 60          	sub    $0x60,%rsp
    f3c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f3cc:	89 75 ec             	mov    %esi,-0x14(%rbp)
    f3cf:	48 8d 05 3e 10 01 00 	lea    0x1103e(%rip),%rax        # 20414 <slip_debug_compile>
    f3d6:	f6 00 01             	testb  $0x1,(%rax)
    f3d9:	0f 84 09 00 00 00    	je     f3e8 <slipV_call+0x28>
    f3df:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f3e3:	e8 d8 c1 ff ff       	call   b5c0 <slipC_printStack>
    f3e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f3ec:	48 83 c7 08          	add    $0x8,%rdi
    f3f0:	e8 6b e5 ff ff       	call   d960 <slipS_popValue>
    f3f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f3f9:	89 55 e0             	mov    %edx,-0x20(%rbp)
    f3fc:	8b 45 e0             	mov    -0x20(%rbp),%eax
    f3ff:	89 45 ac             	mov    %eax,-0x54(%rbp)
    f402:	83 e8 20             	sub    $0x20,%eax
    f405:	0f 84 4f 00 00 00    	je     f45a <slipV_call+0x9a>
    f40b:	e9 00 00 00 00       	jmp    f410 <slipV_call+0x50>
    f410:	8b 45 ac             	mov    -0x54(%rbp),%eax
    f413:	83 e8 40             	sub    $0x40,%eax
    f416:	0f 84 57 00 00 00    	je     f473 <slipV_call+0xb3>
    f41c:	e9 00 00 00 00       	jmp    f421 <slipV_call+0x61>
    f421:	8b 45 ac             	mov    -0x54(%rbp),%eax
    f424:	2d 00 01 00 00       	sub    $0x100,%eax
    f429:	0f 84 80 01 00 00    	je     f5af <slipV_call+0x1ef>
    f42f:	e9 00 00 00 00       	jmp    f434 <slipV_call+0x74>
    f434:	8b 45 ac             	mov    -0x54(%rbp),%eax
    f437:	2d 00 10 00 00       	sub    $0x1000,%eax
    f43c:	0f 84 4a 00 00 00    	je     f48c <slipV_call+0xcc>
    f442:	e9 00 00 00 00       	jmp    f447 <slipV_call+0x87>
    f447:	8b 45 ac             	mov    -0x54(%rbp),%eax
    f44a:	2d 00 20 00 00       	sub    $0x2000,%eax
    f44f:	0f 84 59 00 00 00    	je     f4ae <slipV_call+0xee>
    f455:	e9 77 01 00 00       	jmp    f5d1 <slipV_call+0x211>
    f45a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f45e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f462:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f465:	e8 66 ac ff ff       	call   a0d0 <slipL_callCFunction>
    f46a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f46e:	e9 92 01 00 00       	jmp    f605 <slipV_call+0x245>
    f473:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f477:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f47b:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f47e:	e8 7d ac ff ff       	call   a100 <slipL_callCMacro>
    f483:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f487:	e9 79 01 00 00       	jmp    f605 <slipV_call+0x245>
    f48c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f490:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f494:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f497:	e8 94 01 00 00       	call   f630 <slipV_callProto>
    f49c:	89 c7                	mov    %eax,%edi
    f49e:	31 f6                	xor    %esi,%esi
    f4a0:	e8 6b 01 00 00       	call   f610 <slip_Return>
    f4a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f4a9:	e9 57 01 00 00       	jmp    f605 <slipV_call+0x245>
    f4ae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f4b2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f4b6:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f4b9:	e8 72 01 00 00       	call   f630 <slipV_callProto>
    f4be:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    f4c1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    f4c5:	0f 8d 2c 00 00 00    	jge    f4f7 <slipV_call+0x137>
    f4cb:	48 8d 3d 32 98 00 00 	lea    0x9832(%rip),%rdi        # 18d04 <getFreeElement.b+0x504>
    f4d2:	b0 00                	mov    $0x0,%al
    f4d4:	e8 f7 3b ff ff       	call   30d0 <printf@plt>
    f4d9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f4dd:	e8 1e d1 ff ff       	call   c600 <slipP_dump>
    f4e2:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    f4e7:	31 f6                	xor    %esi,%esi
    f4e9:	e8 22 01 00 00       	call   f610 <slip_Return>
    f4ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f4f2:	e9 0e 01 00 00       	jmp    f605 <slipV_call+0x245>
    f4f7:	83 7d d4 02          	cmpl   $0x2,-0x2c(%rbp)
    f4fb:	0f 84 2c 00 00 00    	je     f52d <slipV_call+0x16d>
    f501:	48 8d 3d 12 98 00 00 	lea    0x9812(%rip),%rdi        # 18d1a <getFreeElement.b+0x51a>
    f508:	b0 00                	mov    $0x0,%al
    f50a:	e8 c1 3b ff ff       	call   30d0 <printf@plt>
    f50f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f513:	e8 e8 d0 ff ff       	call   c600 <slipP_dump>
    f518:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    f51d:	31 f6                	xor    %esi,%esi
    f51f:	e8 ec 00 00 00       	call   f610 <slip_Return>
    f524:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f528:	e9 d8 00 00 00       	jmp    f605 <slipV_call+0x245>
    f52d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f531:	48 83 c7 08          	add    $0x8,%rdi
    f535:	e8 26 e4 ff ff       	call   d960 <slipS_popValue>
    f53a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    f53e:	89 55 c8             	mov    %edx,-0x38(%rbp)
    f541:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f545:	48 83 c7 08          	add    $0x8,%rdi
    f549:	e8 12 e4 ff ff       	call   d960 <slipS_popValue>
    f54e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    f552:	89 55 b8             	mov    %edx,-0x48(%rbp)
    f555:	83 7d b8 02          	cmpl   $0x2,-0x48(%rbp)
    f559:	0f 85 0a 00 00 00    	jne    f569 <slipV_call+0x1a9>
    f55f:	83 7d c8 02          	cmpl   $0x2,-0x38(%rbp)
    f563:	0f 84 2c 00 00 00    	je     f595 <slipV_call+0x1d5>
    f569:	48 8d 3d e1 97 00 00 	lea    0x97e1(%rip),%rdi        # 18d51 <getFreeElement.b+0x551>
    f570:	b0 00                	mov    $0x0,%al
    f572:	e8 59 3b ff ff       	call   30d0 <printf@plt>
    f577:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f57b:	e8 80 d0 ff ff       	call   c600 <slipP_dump>
    f580:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    f585:	31 f6                	xor    %esi,%esi
    f587:	e8 84 00 00 00       	call   f610 <slip_Return>
    f58c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f590:	e9 70 00 00 00       	jmp    f605 <slipV_call+0x245>
    f595:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    f599:	89 c7                	mov    %eax,%edi
    f59b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f59f:	89 c6                	mov    %eax,%esi
    f5a1:	e8 6a 00 00 00       	call   f610 <slip_Return>
    f5a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f5aa:	e9 56 00 00 00       	jmp    f605 <slipV_call+0x245>
    f5af:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f5b3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    f5b7:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f5ba:	e8 41 14 00 00       	call   10a00 <slipV_callList>
    f5bf:	89 c7                	mov    %eax,%edi
    f5c1:	31 f6                	xor    %esi,%esi
    f5c3:	e8 48 00 00 00       	call   f610 <slip_Return>
    f5c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f5cc:	e9 34 00 00 00       	jmp    f605 <slipV_call+0x245>
    f5d1:	48 8d 3d 9e 97 00 00 	lea    0x979e(%rip),%rdi        # 18d76 <getFreeElement.b+0x576>
    f5d8:	b0 00                	mov    $0x0,%al
    f5da:	e8 f1 3a ff ff       	call   30d0 <printf@plt>
    f5df:	8b 7d e0             	mov    -0x20(%rbp),%edi
    f5e2:	e8 f9 f4 ff ff       	call   eae0 <slipV_printType>
    f5e7:	48 8d 3d 3d 8b 00 00 	lea    0x8b3d(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
    f5ee:	b0 00                	mov    $0x0,%al
    f5f0:	e8 db 3a ff ff       	call   30d0 <printf@plt>
    f5f5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    f5fa:	31 f6                	xor    %esi,%esi
    f5fc:	e8 0f 00 00 00       	call   f610 <slip_Return>
    f601:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f609:	48 83 c4 60          	add    $0x60,%rsp
    f60d:	5d                   	pop    %rbp
    f60e:	c3                   	ret
    f60f:	90                   	nop

000000000000f610 <slip_Return>:
    f610:	55                   	push   %rbp
    f611:	48 89 e5             	mov    %rsp,%rbp
    f614:	89 7d f4             	mov    %edi,-0xc(%rbp)
    f617:	89 75 f0             	mov    %esi,-0x10(%rbp)
    f61a:	8b 45 f4             	mov    -0xc(%rbp),%eax
    f61d:	89 45 f8             	mov    %eax,-0x8(%rbp)
    f620:	8b 45 f0             	mov    -0x10(%rbp),%eax
    f623:	89 45 fc             	mov    %eax,-0x4(%rbp)
    f626:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f62a:	5d                   	pop    %rbp
    f62b:	c3                   	ret
    f62c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000000f630 <slipV_callProto>:
    f630:	55                   	push   %rbp
    f631:	48 89 e5             	mov    %rsp,%rbp
    f634:	48 81 ec 20 04 00 00 	sub    $0x420,%rsp
    f63b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    f63f:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
    f643:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    f646:	48 8d 05 c7 0d 01 00 	lea    0x10dc7(%rip),%rax        # 20414 <slip_debug_compile>
    f64d:	f6 00 01             	testb  $0x1,(%rax)
    f650:	0f 84 0e 00 00 00    	je     f664 <slipV_callProto+0x34>
    f656:	48 8d 3d b5 97 00 00 	lea    0x97b5(%rip),%rdi        # 18e12 <getFreeElement.b+0x612>
    f65d:	b0 00                	mov    $0x0,%al
    f65f:	e8 6c 3a ff ff       	call   30d0 <printf@plt>
    f664:	e9 00 00 00 00       	jmp    f669 <slipV_callProto+0x39>
    f669:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f66d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f671:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    f678:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f67c:	8b 40 14             	mov    0x14(%rax),%eax
    f67f:	2b 45 e4             	sub    -0x1c(%rbp),%eax
    f682:	89 45 d0             	mov    %eax,-0x30(%rbp)
    f685:	48 8d 05 90 0d 01 00 	lea    0x10d90(%rip),%rax        # 2041c <slip_debug_exec>
    f68c:	f6 00 01             	testb  $0x1,(%rax)
    f68f:	0f 84 15 00 00 00    	je     f6aa <slipV_callProto+0x7a>
    f695:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f699:	e8 22 bf ff ff       	call   b5c0 <slipC_printStack>
    f69e:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    f6a2:	8b 75 d4             	mov    -0x2c(%rbp),%esi
    f6a5:	e8 f6 15 00 00       	call   10ca0 <printProto>
    f6aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f6ae:	48 8b 40 38          	mov    0x38(%rax),%rax
    f6b2:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    f6b5:	8b 04 88             	mov    (%rax,%rcx,4),%eax
    f6b8:	89 45 b8             	mov    %eax,-0x48(%rbp)
    f6bb:	0f b6 45 b8          	movzbl -0x48(%rbp),%eax
    f6bf:	83 e0 3f             	and    $0x3f,%eax
    f6c2:	83 c0 ff             	add    $0xffffffff,%eax
    f6c5:	89 c1                	mov    %eax,%ecx
    f6c7:	48 89 8d e0 fc ff ff 	mov    %rcx,-0x320(%rbp)
    f6ce:	83 e8 22             	sub    $0x22,%eax
    f6d1:	0f 87 cf 12 00 00    	ja     109a6 <slipV_callProto+0x1376>
    f6d7:	48 8b 85 e0 fc ff ff 	mov    -0x320(%rbp),%rax
    f6de:	48 8d 0d 93 95 00 00 	lea    0x9593(%rip),%rcx        # 18c78 <getFreeElement.b+0x478>
    f6e5:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
    f6e9:	48 01 c8             	add    %rcx,%rax
    f6ec:	ff e0                	jmp    *%rax
    f6ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f6f2:	48 89 85 d0 fc ff ff 	mov    %rax,-0x330(%rbp)
    f6f9:	8b 45 d0             	mov    -0x30(%rbp),%eax
    f6fc:	66 8b 4d b8          	mov    -0x48(%rbp),%cx
    f700:	66 c1 e9 06          	shr    $0x6,%cx
    f704:	0f b7 c9             	movzwl %cx,%ecx
    f707:	01 c8                	add    %ecx,%eax
    f709:	89 85 dc fc ff ff    	mov    %eax,-0x324(%rbp)
    f70f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f713:	0f b7 75 ba          	movzwl -0x46(%rbp),%esi
    f717:	e8 a4 f7 ff ff       	call   eec0 <slipV_getValue>
    f71c:	48 8b bd d0 fc ff ff 	mov    -0x330(%rbp),%rdi
    f723:	8b b5 dc fc ff ff    	mov    -0x324(%rbp),%esi
    f729:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    f72d:	89 55 b0             	mov    %edx,-0x50(%rbp)
    f730:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    f734:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    f737:	e8 c4 f7 ff ff       	call   ef00 <slipV_setValue>
    f73c:	e9 96 12 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f741:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
    f745:	83 f8 00             	cmp    $0x0,%eax
    f748:	0f 85 3c 00 00 00    	jne    f78a <slipV_callProto+0x15a>
    f74e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f752:	31 f6                	xor    %esi,%esi
    f754:	e8 67 bd ff ff       	call   b4c0 <slipC_getEnv>
    f759:	48 89 c6             	mov    %rax,%rsi
    f75c:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
    f760:	e8 ab e9 ff ff       	call   e110 <slipV_setValueTable>
    f765:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f769:	8b 75 d0             	mov    -0x30(%rbp),%esi
    f76c:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    f770:	66 c1 e8 06          	shr    $0x6,%ax
    f774:	0f b7 c0             	movzwl %ax,%eax
    f777:	01 c6                	add    %eax,%esi
    f779:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    f77d:	8b 4d a0             	mov    -0x60(%rbp),%ecx
    f780:	e8 7b f7 ff ff       	call   ef00 <slipV_setValue>
    f785:	e9 38 00 00 00       	jmp    f7c2 <slipV_callProto+0x192>
    f78a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f78e:	8b 75 d0             	mov    -0x30(%rbp),%esi
    f791:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    f795:	66 c1 e8 06          	shr    $0x6,%ax
    f799:	0f b7 c0             	movzwl %ax,%eax
    f79c:	01 c6                	add    %eax,%esi
    f79e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f7a2:	48 8b 40 40          	mov    0x40(%rax),%rax
    f7a6:	0f b7 4d ba          	movzwl -0x46(%rbp),%ecx
    f7aa:	83 e9 01             	sub    $0x1,%ecx
    f7ad:	48 63 c9             	movslq %ecx,%rcx
    f7b0:	48 c1 e1 04          	shl    $0x4,%rcx
    f7b4:	48 01 c8             	add    %rcx,%rax
    f7b7:	48 8b 10             	mov    (%rax),%rdx
    f7ba:	8b 48 08             	mov    0x8(%rax),%ecx
    f7bd:	e8 3e f7 ff ff       	call   ef00 <slipV_setValue>
    f7c2:	e9 10 12 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f7c7:	48 0f bf 75 ba       	movswq -0x46(%rbp),%rsi
    f7cc:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    f7d0:	e8 1b eb ff ff       	call   e2f0 <slipV_setValueInt>
    f7d5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f7d9:	8b 75 d0             	mov    -0x30(%rbp),%esi
    f7dc:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    f7e0:	66 c1 e8 06          	shr    $0x6,%ax
    f7e4:	0f b7 c0             	movzwl %ax,%eax
    f7e7:	01 c6                	add    %eax,%esi
    f7e9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    f7ed:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    f7f0:	e8 0b f7 ff ff       	call   ef00 <slipV_setValue>
    f7f5:	e9 dd 11 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f7fa:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    f7fe:	e8 bd e8 ff ff       	call   e0c0 <slipV_setValueNil>
    f803:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
    f80a:	8b 45 94             	mov    -0x6c(%rbp),%eax
    f80d:	0f b7 4d ba          	movzwl -0x46(%rbp),%ecx
    f811:	39 c8                	cmp    %ecx,%eax
    f813:	0f 8d 31 00 00 00    	jge    f84a <slipV_callProto+0x21a>
    f819:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f81d:	8b 75 d0             	mov    -0x30(%rbp),%esi
    f820:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    f824:	66 c1 e8 06          	shr    $0x6,%ax
    f828:	0f b7 c0             	movzwl %ax,%eax
    f82b:	01 c6                	add    %eax,%esi
    f82d:	03 75 94             	add    -0x6c(%rbp),%esi
    f830:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    f834:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    f837:	e8 c4 f6 ff ff       	call   ef00 <slipV_setValue>
    f83c:	8b 45 94             	mov    -0x6c(%rbp),%eax
    f83f:	83 c0 01             	add    $0x1,%eax
    f842:	89 45 94             	mov    %eax,-0x6c(%rbp)
    f845:	e9 c0 ff ff ff       	jmp    f80a <slipV_callProto+0x1da>
    f84a:	e9 88 11 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f853:	48 83 c0 08          	add    $0x8,%rax
    f857:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    f85e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f862:	8b 75 b8             	mov    -0x48(%rbp),%esi
    f865:	c1 ee 06             	shr    $0x6,%esi
    f868:	e8 53 f6 ff ff       	call   eec0 <slipV_getValue>
    f86d:	48 8b bd c8 fc ff ff 	mov    -0x338(%rbp),%rdi
    f874:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    f878:	89 55 88             	mov    %edx,-0x78(%rbp)
    f87b:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    f87f:	8b 55 88             	mov    -0x78(%rbp),%edx
    f882:	e8 49 df ff ff       	call   d7d0 <slipS_pushValue>
    f887:	e9 4b 11 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f88c:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    f890:	66 c1 e8 06          	shr    $0x6,%ax
    f894:	0f b7 c0             	movzwl %ax,%eax
    f897:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    f89c:	0f 85 16 00 00 00    	jne    f8b8 <slipV_callProto+0x288>
    f8a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f8a6:	48 83 c7 08          	add    $0x8,%rdi
    f8aa:	0f b7 75 ba          	movzwl -0x46(%rbp),%esi
    f8ae:	e8 bd e1 ff ff       	call   da70 <slipS_popValueNum>
    f8b3:	e9 93 00 00 00       	jmp    f94b <slipV_callProto+0x31b>
    f8b8:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
    f8bc:	83 e8 01             	sub    $0x1,%eax
    f8bf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
    f8c5:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%rbp)
    f8cc:	0f 8c 74 00 00 00    	jl     f946 <slipV_callProto+0x316>
    f8d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f8d6:	48 89 85 b8 fc ff ff 	mov    %rax,-0x348(%rbp)
    f8dd:	8b 45 d0             	mov    -0x30(%rbp),%eax
    f8e0:	66 8b 4d b8          	mov    -0x48(%rbp),%cx
    f8e4:	66 c1 e9 06          	shr    $0x6,%cx
    f8e8:	0f b7 c9             	movzwl %cx,%ecx
    f8eb:	01 c8                	add    %ecx,%eax
    f8ed:	03 85 7c ff ff ff    	add    -0x84(%rbp),%eax
    f8f3:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%rbp)
    f8f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f8fd:	48 83 c7 08          	add    $0x8,%rdi
    f901:	e8 5a e0 ff ff       	call   d960 <slipS_popValue>
    f906:	48 8b bd b8 fc ff ff 	mov    -0x348(%rbp),%rdi
    f90d:	8b b5 c4 fc ff ff    	mov    -0x33c(%rbp),%esi
    f913:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    f91a:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
    f920:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    f927:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    f92d:	e8 ce f5 ff ff       	call   ef00 <slipV_setValue>
    f932:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
    f938:	83 c0 ff             	add    $0xffffffff,%eax
    f93b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
    f941:	e9 7f ff ff ff       	jmp    f8c5 <slipV_callProto+0x295>
    f946:	e9 00 00 00 00       	jmp    f94b <slipV_callProto+0x31b>
    f94b:	e9 87 10 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f950:	e9 82 10 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f955:	e9 7d 10 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    f95a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f95e:	0f b6 75 ba          	movzbl -0x46(%rbp),%esi
    f962:	e8 59 f5 ff ff       	call   eec0 <slipV_getValue>
    f967:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    f96e:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%rbp)
    f974:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    f978:	0f b6 75 bb          	movzbl -0x45(%rbp),%esi
    f97c:	e8 3f f5 ff ff       	call   eec0 <slipV_getValue>
    f981:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    f988:	89 95 50 ff ff ff    	mov    %edx,-0xb0(%rbp)
    f98e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    f995:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    f99c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f9a0:	48 89 85 a8 fc ff ff 	mov    %rax,-0x358(%rbp)
    f9a7:	8b 45 d0             	mov    -0x30(%rbp),%eax
    f9aa:	66 8b 4d b8          	mov    -0x48(%rbp),%cx
    f9ae:	66 c1 e9 06          	shr    $0x6,%cx
    f9b2:	0f b7 c9             	movzwl %cx,%ecx
    f9b5:	01 c8                	add    %ecx,%eax
    f9b7:	89 85 b4 fc ff ff    	mov    %eax,-0x34c(%rbp)
    f9bd:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    f9c4:	e8 d7 af ff ff       	call   a9a0 <slipM_getMeta>
    f9c9:	48 8b 40 28          	mov    0x28(%rax),%rax
    f9cd:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    f9d4:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    f9db:	8b 95 50 ff ff ff    	mov    -0xb0(%rbp),%edx
    f9e1:	ff d0                	call   *%rax
    f9e3:	48 8b bd a8 fc ff ff 	mov    -0x358(%rbp),%rdi
    f9ea:	8b b5 b4 fc ff ff    	mov    -0x34c(%rbp),%esi
    f9f0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    f9f7:	89 95 38 ff ff ff    	mov    %edx,-0xc8(%rbp)
    f9fd:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    fa04:	8b 8d 38 ff ff ff    	mov    -0xc8(%rbp),%ecx
    fa0a:	e8 f1 f4 ff ff       	call   ef00 <slipV_setValue>
    fa0f:	e9 c3 0f 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fa14:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fa18:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fa1b:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    fa1f:	66 c1 e8 06          	shr    $0x6,%ax
    fa23:	0f b7 c0             	movzwl %ax,%eax
    fa26:	01 c6                	add    %eax,%esi
    fa28:	e8 93 f4 ff ff       	call   eec0 <slipV_getValue>
    fa2d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    fa34:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%rbp)
    fa3a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fa3e:	0f b6 75 bb          	movzbl -0x45(%rbp),%esi
    fa42:	e8 79 f4 ff ff       	call   eec0 <slipV_getValue>
    fa47:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    fa4e:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%rbp)
    fa54:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    fa5b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    fa62:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
    fa69:	e8 32 af ff ff       	call   a9a0 <slipM_getMeta>
    fa6e:	48 8b 40 20          	mov    0x20(%rax),%rax
    fa72:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    fa79:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    fa80:	48 89 85 98 fc ff ff 	mov    %rax,-0x368(%rbp)
    fa87:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fa8b:	0f b6 75 ba          	movzbl -0x46(%rbp),%esi
    fa8f:	e8 2c f4 ff ff       	call   eec0 <slipV_getValue>
    fa94:	48 8b bd 98 fc ff ff 	mov    -0x368(%rbp),%rdi
    fa9b:	48 89 c1             	mov    %rax,%rcx
    fa9e:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
    faa5:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
    faac:	89 95 00 ff ff ff    	mov    %edx,-0x100(%rbp)
    fab2:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
    fab9:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
    fabf:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
    fac6:	44 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%r8d
    facd:	ff d0                	call   *%rax
    facf:	e9 03 0f 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fad4:	e9 fe 0e 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    fadd:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
    fae4:	8b 45 d0             	mov    -0x30(%rbp),%eax
    fae7:	8b 4d b8             	mov    -0x48(%rbp),%ecx
    faea:	c1 e9 06             	shr    $0x6,%ecx
    faed:	01 c8                	add    %ecx,%eax
    faef:	89 85 94 fc ff ff    	mov    %eax,-0x36c(%rbp)
    faf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    faf9:	48 8b 78 48          	mov    0x48(%rax),%rdi
    fafd:	e8 fe d3 ff ff       	call   cf00 <slipD_table>
    fb02:	48 8b 40 10          	mov    0x10(%rax),%rax
    fb06:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    fb0a:	48 8b 79 48          	mov    0x48(%rcx),%rdi
    fb0e:	ff d0                	call   *%rax
    fb10:	48 8b bd 88 fc ff ff 	mov    -0x378(%rbp),%rdi
    fb17:	8b b5 94 fc ff ff    	mov    -0x36c(%rbp),%esi
    fb1d:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    fb24:	89 95 f0 fe ff ff    	mov    %edx,-0x110(%rbp)
    fb2a:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
    fb31:	8b 8d f0 fe ff ff    	mov    -0x110(%rbp),%ecx
    fb37:	e8 c4 f3 ff ff       	call   ef00 <slipV_setValue>
    fb3c:	e9 96 0e 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fb41:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fb45:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fb48:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fb4c:	01 c6                	add    %eax,%esi
    fb4e:	e8 6d f3 ff ff       	call   eec0 <slipV_getValue>
    fb53:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    fb5a:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%rbp)
    fb60:	83 bd e0 fe ff ff 04 	cmpl   $0x4,-0x120(%rbp)
    fb67:	0f 84 2c 00 00 00    	je     fb99 <slipV_callProto+0x569>
    fb6d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fb71:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fb74:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fb78:	01 c6                	add    %eax,%esi
    fb7a:	e8 41 f3 ff ff       	call   eec0 <slipV_getValue>
    fb7f:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    fb86:	89 95 d0 fe ff ff    	mov    %edx,-0x130(%rbp)
    fb8c:	83 bd d0 fe ff ff 04 	cmpl   $0x4,-0x130(%rbp)
    fb93:	0f 85 49 00 00 00    	jne    fbe2 <slipV_callProto+0x5b2>
    fb99:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fb9d:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fba0:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fba4:	01 c6                	add    %eax,%esi
    fba6:	e8 d5 f6 ff ff       	call   f280 <slipV_toDouble>
    fbab:	f2 0f 11 85 80 fc ff 	movsd  %xmm0,-0x380(%rbp)
    fbb2:	ff 
    fbb3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fbb7:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fbba:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fbbe:	01 c6                	add    %eax,%esi
    fbc0:	e8 bb f6 ff ff       	call   f280 <slipV_toDouble>
    fbc5:	0f 28 c8             	movaps %xmm0,%xmm1
    fbc8:	f2 0f 10 85 80 fc ff 	movsd  -0x380(%rbp),%xmm0
    fbcf:	ff 
    fbd0:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    fbd4:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    fbd8:	e8 73 e7 ff ff       	call   e350 <slipV_setValueDouble>
    fbdd:	e9 ba 00 00 00       	jmp    fc9c <slipV_callProto+0x66c>
    fbe2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fbe6:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fbe9:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fbed:	01 c6                	add    %eax,%esi
    fbef:	e8 cc f2 ff ff       	call   eec0 <slipV_getValue>
    fbf4:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    fbfb:	89 95 c0 fe ff ff    	mov    %edx,-0x140(%rbp)
    fc01:	83 bd c0 fe ff ff 02 	cmpl   $0x2,-0x140(%rbp)
    fc08:	0f 85 6f 00 00 00    	jne    fc7d <slipV_callProto+0x64d>
    fc0e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fc12:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fc15:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fc19:	01 c6                	add    %eax,%esi
    fc1b:	e8 a0 f2 ff ff       	call   eec0 <slipV_getValue>
    fc20:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    fc27:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%rbp)
    fc2d:	83 bd b0 fe ff ff 02 	cmpl   $0x2,-0x150(%rbp)
    fc34:	0f 85 43 00 00 00    	jne    fc7d <slipV_callProto+0x64d>
    fc3a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fc3e:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fc41:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fc45:	01 c6                	add    %eax,%esi
    fc47:	e8 04 f6 ff ff       	call   f250 <slipV_toInt>
    fc4c:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    fc53:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fc57:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fc5a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fc5e:	01 c6                	add    %eax,%esi
    fc60:	e8 eb f5 ff ff       	call   f250 <slipV_toInt>
    fc65:	48 8b b5 78 fc ff ff 	mov    -0x388(%rbp),%rsi
    fc6c:	48 01 c6             	add    %rax,%rsi
    fc6f:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    fc73:	e8 78 e6 ff ff       	call   e2f0 <slipV_setValueInt>
    fc78:	e9 1a 00 00 00       	jmp    fc97 <slipV_callProto+0x667>
    fc7d:	48 8d 3d 9f 91 00 00 	lea    0x919f(%rip),%rdi        # 18e23 <getFreeElement.b+0x623>
    fc84:	b0 00                	mov    $0x0,%al
    fc86:	e8 45 34 ff ff       	call   30d0 <printf@plt>
    fc8b:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    fc92:	e9 4e 0d 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
    fc97:	e9 00 00 00 00       	jmp    fc9c <slipV_callProto+0x66c>
    fc9c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fca0:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fca3:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    fca7:	66 c1 e8 06          	shr    $0x6,%ax
    fcab:	0f b7 c0             	movzwl %ax,%eax
    fcae:	01 c6                	add    %eax,%esi
    fcb0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fcb4:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    fcb7:	e8 44 f2 ff ff       	call   ef00 <slipV_setValue>
    fcbc:	e9 16 0d 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fcc1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fcc5:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fcc8:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fccc:	01 c6                	add    %eax,%esi
    fcce:	e8 ed f1 ff ff       	call   eec0 <slipV_getValue>
    fcd3:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
    fcda:	89 95 a0 fe ff ff    	mov    %edx,-0x160(%rbp)
    fce0:	83 bd a0 fe ff ff 04 	cmpl   $0x4,-0x160(%rbp)
    fce7:	0f 84 2c 00 00 00    	je     fd19 <slipV_callProto+0x6e9>
    fced:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fcf1:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fcf4:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fcf8:	01 c6                	add    %eax,%esi
    fcfa:	e8 c1 f1 ff ff       	call   eec0 <slipV_getValue>
    fcff:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
    fd06:	89 95 90 fe ff ff    	mov    %edx,-0x170(%rbp)
    fd0c:	83 bd 90 fe ff ff 04 	cmpl   $0x4,-0x170(%rbp)
    fd13:	0f 85 49 00 00 00    	jne    fd62 <slipV_callProto+0x732>
    fd19:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fd1d:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fd20:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fd24:	01 c6                	add    %eax,%esi
    fd26:	e8 55 f5 ff ff       	call   f280 <slipV_toDouble>
    fd2b:	f2 0f 11 85 70 fc ff 	movsd  %xmm0,-0x390(%rbp)
    fd32:	ff 
    fd33:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fd37:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fd3a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fd3e:	01 c6                	add    %eax,%esi
    fd40:	e8 3b f5 ff ff       	call   f280 <slipV_toDouble>
    fd45:	0f 28 c8             	movaps %xmm0,%xmm1
    fd48:	f2 0f 10 85 70 fc ff 	movsd  -0x390(%rbp),%xmm0
    fd4f:	ff 
    fd50:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    fd54:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    fd58:	e8 f3 e5 ff ff       	call   e350 <slipV_setValueDouble>
    fd5d:	e9 ba 00 00 00       	jmp    fe1c <slipV_callProto+0x7ec>
    fd62:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fd66:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fd69:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fd6d:	01 c6                	add    %eax,%esi
    fd6f:	e8 4c f1 ff ff       	call   eec0 <slipV_getValue>
    fd74:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    fd7b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%rbp)
    fd81:	83 bd 80 fe ff ff 02 	cmpl   $0x2,-0x180(%rbp)
    fd88:	0f 85 6f 00 00 00    	jne    fdfd <slipV_callProto+0x7cd>
    fd8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fd92:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fd95:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fd99:	01 c6                	add    %eax,%esi
    fd9b:	e8 20 f1 ff ff       	call   eec0 <slipV_getValue>
    fda0:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    fda7:	89 95 70 fe ff ff    	mov    %edx,-0x190(%rbp)
    fdad:	83 bd 70 fe ff ff 02 	cmpl   $0x2,-0x190(%rbp)
    fdb4:	0f 85 43 00 00 00    	jne    fdfd <slipV_callProto+0x7cd>
    fdba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fdbe:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fdc1:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fdc5:	01 c6                	add    %eax,%esi
    fdc7:	e8 84 f4 ff ff       	call   f250 <slipV_toInt>
    fdcc:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
    fdd3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fdd7:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fdda:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fdde:	01 c6                	add    %eax,%esi
    fde0:	e8 6b f4 ff ff       	call   f250 <slipV_toInt>
    fde5:	48 8b b5 68 fc ff ff 	mov    -0x398(%rbp),%rsi
    fdec:	48 29 c6             	sub    %rax,%rsi
    fdef:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    fdf3:	e8 f8 e4 ff ff       	call   e2f0 <slipV_setValueInt>
    fdf8:	e9 1a 00 00 00       	jmp    fe17 <slipV_callProto+0x7e7>
    fdfd:	48 8d 3d 1f 90 00 00 	lea    0x901f(%rip),%rdi        # 18e23 <getFreeElement.b+0x623>
    fe04:	b0 00                	mov    $0x0,%al
    fe06:	e8 c5 32 ff ff       	call   30d0 <printf@plt>
    fe0b:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    fe12:	e9 ce 0b 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
    fe17:	e9 00 00 00 00       	jmp    fe1c <slipV_callProto+0x7ec>
    fe1c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fe20:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fe23:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    fe27:	66 c1 e8 06          	shr    $0x6,%ax
    fe2b:	0f b7 c0             	movzwl %ax,%eax
    fe2e:	01 c6                	add    %eax,%esi
    fe30:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    fe34:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    fe37:	e8 c4 f0 ff ff       	call   ef00 <slipV_setValue>
    fe3c:	e9 96 0b 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    fe41:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fe45:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fe48:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fe4c:	01 c6                	add    %eax,%esi
    fe4e:	e8 6d f0 ff ff       	call   eec0 <slipV_getValue>
    fe53:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    fe5a:	89 95 60 fe ff ff    	mov    %edx,-0x1a0(%rbp)
    fe60:	83 bd 60 fe ff ff 04 	cmpl   $0x4,-0x1a0(%rbp)
    fe67:	0f 84 2c 00 00 00    	je     fe99 <slipV_callProto+0x869>
    fe6d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fe71:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fe74:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fe78:	01 c6                	add    %eax,%esi
    fe7a:	e8 41 f0 ff ff       	call   eec0 <slipV_getValue>
    fe7f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
    fe86:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%rbp)
    fe8c:	83 bd 50 fe ff ff 04 	cmpl   $0x4,-0x1b0(%rbp)
    fe93:	0f 85 49 00 00 00    	jne    fee2 <slipV_callProto+0x8b2>
    fe99:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fe9d:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fea0:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    fea4:	01 c6                	add    %eax,%esi
    fea6:	e8 d5 f3 ff ff       	call   f280 <slipV_toDouble>
    feab:	f2 0f 11 85 60 fc ff 	movsd  %xmm0,-0x3a0(%rbp)
    feb2:	ff 
    feb3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    feb7:	8b 75 d0             	mov    -0x30(%rbp),%esi
    feba:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    febe:	01 c6                	add    %eax,%esi
    fec0:	e8 bb f3 ff ff       	call   f280 <slipV_toDouble>
    fec5:	0f 28 c8             	movaps %xmm0,%xmm1
    fec8:	f2 0f 10 85 60 fc ff 	movsd  -0x3a0(%rbp),%xmm0
    fecf:	ff 
    fed0:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
    fed4:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    fed8:	e8 73 e4 ff ff       	call   e350 <slipV_setValueDouble>
    fedd:	e9 bb 00 00 00       	jmp    ff9d <slipV_callProto+0x96d>
    fee2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fee6:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fee9:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    feed:	01 c6                	add    %eax,%esi
    feef:	e8 cc ef ff ff       	call   eec0 <slipV_getValue>
    fef4:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    fefb:	89 95 40 fe ff ff    	mov    %edx,-0x1c0(%rbp)
    ff01:	83 bd 40 fe ff ff 02 	cmpl   $0x2,-0x1c0(%rbp)
    ff08:	0f 85 70 00 00 00    	jne    ff7e <slipV_callProto+0x94e>
    ff0e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ff12:	8b 75 d0             	mov    -0x30(%rbp),%esi
    ff15:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    ff19:	01 c6                	add    %eax,%esi
    ff1b:	e8 a0 ef ff ff       	call   eec0 <slipV_getValue>
    ff20:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    ff27:	89 95 30 fe ff ff    	mov    %edx,-0x1d0(%rbp)
    ff2d:	83 bd 30 fe ff ff 02 	cmpl   $0x2,-0x1d0(%rbp)
    ff34:	0f 85 44 00 00 00    	jne    ff7e <slipV_callProto+0x94e>
    ff3a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ff3e:	8b 75 d0             	mov    -0x30(%rbp),%esi
    ff41:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    ff45:	01 c6                	add    %eax,%esi
    ff47:	e8 04 f3 ff ff       	call   f250 <slipV_toInt>
    ff4c:	48 89 85 58 fc ff ff 	mov    %rax,-0x3a8(%rbp)
    ff53:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ff57:	8b 75 d0             	mov    -0x30(%rbp),%esi
    ff5a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    ff5e:	01 c6                	add    %eax,%esi
    ff60:	e8 eb f2 ff ff       	call   f250 <slipV_toInt>
    ff65:	48 8b b5 58 fc ff ff 	mov    -0x3a8(%rbp),%rsi
    ff6c:	48 0f af f0          	imul   %rax,%rsi
    ff70:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    ff74:	e8 77 e3 ff ff       	call   e2f0 <slipV_setValueInt>
    ff79:	e9 1a 00 00 00       	jmp    ff98 <slipV_callProto+0x968>
    ff7e:	48 8d 3d 9e 8e 00 00 	lea    0x8e9e(%rip),%rdi        # 18e23 <getFreeElement.b+0x623>
    ff85:	b0 00                	mov    $0x0,%al
    ff87:	e8 44 31 ff ff       	call   30d0 <printf@plt>
    ff8c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
    ff93:	e9 4d 0a 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
    ff98:	e9 00 00 00 00       	jmp    ff9d <slipV_callProto+0x96d>
    ff9d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ffa1:	8b 75 d0             	mov    -0x30(%rbp),%esi
    ffa4:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
    ffa8:	66 c1 e8 06          	shr    $0x6,%ax
    ffac:	0f b7 c0             	movzwl %ax,%eax
    ffaf:	01 c6                	add    %eax,%esi
    ffb1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    ffb5:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    ffb8:	e8 43 ef ff ff       	call   ef00 <slipV_setValue>
    ffbd:	e9 15 0a 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
    ffc2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    ffc6:	8b 75 d0             	mov    -0x30(%rbp),%esi
    ffc9:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
    ffcd:	01 c6                	add    %eax,%esi
    ffcf:	e8 ec ee ff ff       	call   eec0 <slipV_getValue>
    ffd4:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
    ffdb:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%rbp)
    ffe1:	83 bd 20 fe ff ff 04 	cmpl   $0x4,-0x1e0(%rbp)
    ffe8:	0f 84 2c 00 00 00    	je     1001a <slipV_callProto+0x9ea>
    ffee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
    fff2:	8b 75 d0             	mov    -0x30(%rbp),%esi
    fff5:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
    fff9:	01 c6                	add    %eax,%esi
    fffb:	e8 c0 ee ff ff       	call   eec0 <slipV_getValue>
   10000:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
   10007:	89 95 10 fe ff ff    	mov    %edx,-0x1f0(%rbp)
   1000d:	83 bd 10 fe ff ff 04 	cmpl   $0x4,-0x1f0(%rbp)
   10014:	0f 85 49 00 00 00    	jne    10063 <slipV_callProto+0xa33>
   1001a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1001e:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10021:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10025:	01 c6                	add    %eax,%esi
   10027:	e8 54 f2 ff ff       	call   f280 <slipV_toDouble>
   1002c:	f2 0f 11 85 50 fc ff 	movsd  %xmm0,-0x3b0(%rbp)
   10033:	ff 
   10034:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10038:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1003b:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   1003f:	01 c6                	add    %eax,%esi
   10041:	e8 3a f2 ff ff       	call   f280 <slipV_toDouble>
   10046:	0f 28 c8             	movaps %xmm0,%xmm1
   10049:	f2 0f 10 85 50 fc ff 	movsd  -0x3b0(%rbp),%xmm0
   10050:	ff 
   10051:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   10055:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10059:	e8 f2 e2 ff ff       	call   e350 <slipV_setValueDouble>
   1005e:	e9 c2 00 00 00       	jmp    10125 <slipV_callProto+0xaf5>
   10063:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10067:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1006a:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   1006e:	01 c6                	add    %eax,%esi
   10070:	e8 4b ee ff ff       	call   eec0 <slipV_getValue>
   10075:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
   1007c:	89 95 00 fe ff ff    	mov    %edx,-0x200(%rbp)
   10082:	83 bd 00 fe ff ff 02 	cmpl   $0x2,-0x200(%rbp)
   10089:	0f 85 77 00 00 00    	jne    10106 <slipV_callProto+0xad6>
   1008f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10093:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10096:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   1009a:	01 c6                	add    %eax,%esi
   1009c:	e8 1f ee ff ff       	call   eec0 <slipV_getValue>
   100a1:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
   100a8:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%rbp)
   100ae:	83 bd f0 fd ff ff 02 	cmpl   $0x2,-0x210(%rbp)
   100b5:	0f 85 4b 00 00 00    	jne    10106 <slipV_callProto+0xad6>
   100bb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   100bf:	8b 75 d0             	mov    -0x30(%rbp),%esi
   100c2:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   100c6:	01 c6                	add    %eax,%esi
   100c8:	e8 83 f1 ff ff       	call   f250 <slipV_toInt>
   100cd:	48 89 85 48 fc ff ff 	mov    %rax,-0x3b8(%rbp)
   100d4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   100d8:	8b 75 d0             	mov    -0x30(%rbp),%esi
   100db:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   100df:	01 c6                	add    %eax,%esi
   100e1:	e8 6a f1 ff ff       	call   f250 <slipV_toInt>
   100e6:	48 89 c1             	mov    %rax,%rcx
   100e9:	48 8b 85 48 fc ff ff 	mov    -0x3b8(%rbp),%rax
   100f0:	48 99                	cqto
   100f2:	48 f7 f9             	idiv   %rcx
   100f5:	48 89 c6             	mov    %rax,%rsi
   100f8:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   100fc:	e8 ef e1 ff ff       	call   e2f0 <slipV_setValueInt>
   10101:	e9 1a 00 00 00       	jmp    10120 <slipV_callProto+0xaf0>
   10106:	48 8d 3d 16 8d 00 00 	lea    0x8d16(%rip),%rdi        # 18e23 <getFreeElement.b+0x623>
   1010d:	b0 00                	mov    $0x0,%al
   1010f:	e8 bc 2f ff ff       	call   30d0 <printf@plt>
   10114:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   1011b:	e9 c5 08 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   10120:	e9 00 00 00 00       	jmp    10125 <slipV_callProto+0xaf5>
   10125:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10129:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1012c:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10130:	66 c1 e8 06          	shr    $0x6,%ax
   10134:	0f b7 c0             	movzwl %ax,%eax
   10137:	01 c6                	add    %eax,%esi
   10139:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1013d:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10140:	e8 bb ed ff ff       	call   ef00 <slipV_setValue>
   10145:	e9 8d 08 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1014a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1014e:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10151:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
   10155:	01 c6                	add    %eax,%esi
   10157:	e8 64 ed ff ff       	call   eec0 <slipV_getValue>
   1015c:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
   10163:	89 95 e0 fd ff ff    	mov    %edx,-0x220(%rbp)
   10169:	83 bd e0 fd ff ff 01 	cmpl   $0x1,-0x220(%rbp)
   10170:	0f 85 28 00 00 00    	jne    1019e <slipV_callProto+0xb6e>
   10176:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1017a:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1017d:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
   10181:	01 c6                	add    %eax,%esi
   10183:	e8 98 f0 ff ff       	call   f220 <slipV_toBool>
   10188:	34 ff                	xor    $0xff,%al
   1018a:	0f b6 f0             	movzbl %al,%esi
   1018d:	83 e6 01             	and    $0x1,%esi
   10190:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10194:	e8 27 e1 ff ff       	call   e2c0 <slipV_setValueBool>
   10199:	e9 7a 00 00 00       	jmp    10218 <slipV_callProto+0xbe8>
   1019e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   101a2:	8b 75 d0             	mov    -0x30(%rbp),%esi
   101a5:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
   101a9:	01 c6                	add    %eax,%esi
   101ab:	e8 10 ed ff ff       	call   eec0 <slipV_getValue>
   101b0:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   101b7:	89 95 d0 fd ff ff    	mov    %edx,-0x230(%rbp)
   101bd:	83 bd d0 fd ff ff 02 	cmpl   $0x2,-0x230(%rbp)
   101c4:	0f 85 2f 00 00 00    	jne    101f9 <slipV_callProto+0xbc9>
   101ca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   101ce:	8b 75 d0             	mov    -0x30(%rbp),%esi
   101d1:	0f b7 45 ba          	movzwl -0x46(%rbp),%eax
   101d5:	01 c6                	add    %eax,%esi
   101d7:	e8 74 f0 ff ff       	call   f250 <slipV_toInt>
   101dc:	48 83 f8 00          	cmp    $0x0,%rax
   101e0:	0f 95 c0             	setne  %al
   101e3:	34 ff                	xor    $0xff,%al
   101e5:	0f b6 f0             	movzbl %al,%esi
   101e8:	83 e6 01             	and    $0x1,%esi
   101eb:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   101ef:	e8 cc e0 ff ff       	call   e2c0 <slipV_setValueBool>
   101f4:	e9 1a 00 00 00       	jmp    10213 <slipV_callProto+0xbe3>
   101f9:	48 8d 3d 31 8c 00 00 	lea    0x8c31(%rip),%rdi        # 18e31 <getFreeElement.b+0x631>
   10200:	b0 00                	mov    $0x0,%al
   10202:	e8 c9 2e ff ff       	call   30d0 <printf@plt>
   10207:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   1020e:	e9 d2 07 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   10213:	e9 00 00 00 00       	jmp    10218 <slipV_callProto+0xbe8>
   10218:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1021c:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1021f:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10223:	66 c1 e8 06          	shr    $0x6,%ax
   10227:	0f b7 c0             	movzwl %ax,%eax
   1022a:	01 c6                	add    %eax,%esi
   1022c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   10230:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10233:	e8 c8 ec ff ff       	call   ef00 <slipV_setValue>
   10238:	e9 9a 07 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1023d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10241:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10244:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10248:	01 c6                	add    %eax,%esi
   1024a:	e8 71 ec ff ff       	call   eec0 <slipV_getValue>
   1024f:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
   10256:	89 95 c0 fd ff ff    	mov    %edx,-0x240(%rbp)
   1025c:	83 bd c0 fd ff ff 01 	cmpl   $0x1,-0x240(%rbp)
   10263:	0f 85 85 00 00 00    	jne    102ee <slipV_callProto+0xcbe>
   10269:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1026d:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10270:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   10274:	01 c6                	add    %eax,%esi
   10276:	e8 45 ec ff ff       	call   eec0 <slipV_getValue>
   1027b:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
   10282:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%rbp)
   10288:	83 bd b0 fd ff ff 01 	cmpl   $0x1,-0x250(%rbp)
   1028f:	0f 85 59 00 00 00    	jne    102ee <slipV_callProto+0xcbe>
   10295:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10299:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1029c:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   102a0:	01 c6                	add    %eax,%esi
   102a2:	e8 79 ef ff ff       	call   f220 <slipV_toBool>
   102a7:	24 01                	and    $0x1,%al
   102a9:	0f b6 c0             	movzbl %al,%eax
   102ac:	89 85 44 fc ff ff    	mov    %eax,-0x3bc(%rbp)
   102b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   102b6:	8b 75 d0             	mov    -0x30(%rbp),%esi
   102b9:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   102bd:	01 c6                	add    %eax,%esi
   102bf:	e8 5c ef ff ff       	call   f220 <slipV_toBool>
   102c4:	88 c1                	mov    %al,%cl
   102c6:	8b 85 44 fc ff ff    	mov    -0x3bc(%rbp),%eax
   102cc:	80 e1 01             	and    $0x1,%cl
   102cf:	0f b6 c9             	movzbl %cl,%ecx
   102d2:	21 c8                	and    %ecx,%eax
   102d4:	83 f8 00             	cmp    $0x0,%eax
   102d7:	0f 95 c0             	setne  %al
   102da:	0f b6 f0             	movzbl %al,%esi
   102dd:	83 e6 01             	and    $0x1,%esi
   102e0:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   102e4:	e8 d7 df ff ff       	call   e2c0 <slipV_setValueBool>
   102e9:	e9 ba 00 00 00       	jmp    103a8 <slipV_callProto+0xd78>
   102ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   102f2:	8b 75 d0             	mov    -0x30(%rbp),%esi
   102f5:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   102f9:	01 c6                	add    %eax,%esi
   102fb:	e8 c0 eb ff ff       	call   eec0 <slipV_getValue>
   10300:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
   10307:	89 95 a0 fd ff ff    	mov    %edx,-0x260(%rbp)
   1030d:	83 bd a0 fd ff ff 02 	cmpl   $0x2,-0x260(%rbp)
   10314:	0f 85 6f 00 00 00    	jne    10389 <slipV_callProto+0xd59>
   1031a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1031e:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10321:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   10325:	01 c6                	add    %eax,%esi
   10327:	e8 94 eb ff ff       	call   eec0 <slipV_getValue>
   1032c:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
   10333:	89 95 90 fd ff ff    	mov    %edx,-0x270(%rbp)
   10339:	83 bd 90 fd ff ff 02 	cmpl   $0x2,-0x270(%rbp)
   10340:	0f 85 43 00 00 00    	jne    10389 <slipV_callProto+0xd59>
   10346:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1034a:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1034d:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10351:	01 c6                	add    %eax,%esi
   10353:	e8 f8 ee ff ff       	call   f250 <slipV_toInt>
   10358:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
   1035f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10363:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10366:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   1036a:	01 c6                	add    %eax,%esi
   1036c:	e8 df ee ff ff       	call   f250 <slipV_toInt>
   10371:	48 8b b5 38 fc ff ff 	mov    -0x3c8(%rbp),%rsi
   10378:	48 21 c6             	and    %rax,%rsi
   1037b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1037f:	e8 6c df ff ff       	call   e2f0 <slipV_setValueInt>
   10384:	e9 1a 00 00 00       	jmp    103a3 <slipV_callProto+0xd73>
   10389:	48 8d 3d af 8a 00 00 	lea    0x8aaf(%rip),%rdi        # 18e3f <getFreeElement.b+0x63f>
   10390:	b0 00                	mov    $0x0,%al
   10392:	e8 39 2d ff ff       	call   30d0 <printf@plt>
   10397:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   1039e:	e9 42 06 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   103a3:	e9 00 00 00 00       	jmp    103a8 <slipV_callProto+0xd78>
   103a8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   103ac:	8b 75 d0             	mov    -0x30(%rbp),%esi
   103af:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   103b3:	66 c1 e8 06          	shr    $0x6,%ax
   103b7:	0f b7 c0             	movzwl %ax,%eax
   103ba:	01 c6                	add    %eax,%esi
   103bc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   103c0:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   103c3:	e8 38 eb ff ff       	call   ef00 <slipV_setValue>
   103c8:	e9 0a 06 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   103cd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   103d1:	8b 75 d0             	mov    -0x30(%rbp),%esi
   103d4:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   103d8:	01 c6                	add    %eax,%esi
   103da:	e8 e1 ea ff ff       	call   eec0 <slipV_getValue>
   103df:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
   103e6:	89 95 80 fd ff ff    	mov    %edx,-0x280(%rbp)
   103ec:	83 bd 80 fd ff ff 01 	cmpl   $0x1,-0x280(%rbp)
   103f3:	0f 85 85 00 00 00    	jne    1047e <slipV_callProto+0xe4e>
   103f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   103fd:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10400:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   10404:	01 c6                	add    %eax,%esi
   10406:	e8 b5 ea ff ff       	call   eec0 <slipV_getValue>
   1040b:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
   10412:	89 95 70 fd ff ff    	mov    %edx,-0x290(%rbp)
   10418:	83 bd 70 fd ff ff 01 	cmpl   $0x1,-0x290(%rbp)
   1041f:	0f 85 59 00 00 00    	jne    1047e <slipV_callProto+0xe4e>
   10425:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10429:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1042c:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10430:	01 c6                	add    %eax,%esi
   10432:	e8 e9 ed ff ff       	call   f220 <slipV_toBool>
   10437:	24 01                	and    $0x1,%al
   10439:	0f b6 c0             	movzbl %al,%eax
   1043c:	89 85 34 fc ff ff    	mov    %eax,-0x3cc(%rbp)
   10442:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10446:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10449:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   1044d:	01 c6                	add    %eax,%esi
   1044f:	e8 cc ed ff ff       	call   f220 <slipV_toBool>
   10454:	88 c1                	mov    %al,%cl
   10456:	8b 85 34 fc ff ff    	mov    -0x3cc(%rbp),%eax
   1045c:	80 e1 01             	and    $0x1,%cl
   1045f:	0f b6 c9             	movzbl %cl,%ecx
   10462:	09 c8                	or     %ecx,%eax
   10464:	83 f8 00             	cmp    $0x0,%eax
   10467:	0f 95 c0             	setne  %al
   1046a:	0f b6 f0             	movzbl %al,%esi
   1046d:	83 e6 01             	and    $0x1,%esi
   10470:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10474:	e8 47 de ff ff       	call   e2c0 <slipV_setValueBool>
   10479:	e9 ba 00 00 00       	jmp    10538 <slipV_callProto+0xf08>
   1047e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10482:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10485:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10489:	01 c6                	add    %eax,%esi
   1048b:	e8 30 ea ff ff       	call   eec0 <slipV_getValue>
   10490:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
   10497:	89 95 60 fd ff ff    	mov    %edx,-0x2a0(%rbp)
   1049d:	83 bd 60 fd ff ff 02 	cmpl   $0x2,-0x2a0(%rbp)
   104a4:	0f 85 6f 00 00 00    	jne    10519 <slipV_callProto+0xee9>
   104aa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   104ae:	8b 75 d0             	mov    -0x30(%rbp),%esi
   104b1:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   104b5:	01 c6                	add    %eax,%esi
   104b7:	e8 04 ea ff ff       	call   eec0 <slipV_getValue>
   104bc:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
   104c3:	89 95 50 fd ff ff    	mov    %edx,-0x2b0(%rbp)
   104c9:	83 bd 50 fd ff ff 02 	cmpl   $0x2,-0x2b0(%rbp)
   104d0:	0f 85 43 00 00 00    	jne    10519 <slipV_callProto+0xee9>
   104d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   104da:	8b 75 d0             	mov    -0x30(%rbp),%esi
   104dd:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   104e1:	01 c6                	add    %eax,%esi
   104e3:	e8 68 ed ff ff       	call   f250 <slipV_toInt>
   104e8:	48 89 85 28 fc ff ff 	mov    %rax,-0x3d8(%rbp)
   104ef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   104f3:	8b 75 d0             	mov    -0x30(%rbp),%esi
   104f6:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   104fa:	01 c6                	add    %eax,%esi
   104fc:	e8 4f ed ff ff       	call   f250 <slipV_toInt>
   10501:	48 8b b5 28 fc ff ff 	mov    -0x3d8(%rbp),%rsi
   10508:	48 09 c6             	or     %rax,%rsi
   1050b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1050f:	e8 dc dd ff ff       	call   e2f0 <slipV_setValueInt>
   10514:	e9 1a 00 00 00       	jmp    10533 <slipV_callProto+0xf03>
   10519:	48 8d 3d 1f 89 00 00 	lea    0x891f(%rip),%rdi        # 18e3f <getFreeElement.b+0x63f>
   10520:	b0 00                	mov    $0x0,%al
   10522:	e8 a9 2b ff ff       	call   30d0 <printf@plt>
   10527:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   1052e:	e9 b2 04 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   10533:	e9 00 00 00 00       	jmp    10538 <slipV_callProto+0xf08>
   10538:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1053c:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1053f:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10543:	66 c1 e8 06          	shr    $0x6,%ax
   10547:	0f b7 c0             	movzwl %ax,%eax
   1054a:	01 c6                	add    %eax,%esi
   1054c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   10550:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10553:	e8 a8 e9 ff ff       	call   ef00 <slipV_setValue>
   10558:	e9 7a 04 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1055d:	e9 75 04 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   10562:	e9 70 04 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   10567:	e9 6b 04 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1056c:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1056f:	c1 f8 06             	sar    $0x6,%eax
   10572:	03 45 d4             	add    -0x2c(%rbp),%eax
   10575:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   10578:	e9 08 f1 ff ff       	jmp    f685 <slipV_callProto+0x55>
   1057d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10581:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10584:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10588:	66 c1 e8 06          	shr    $0x6,%ax
   1058c:	0f b7 c0             	movzwl %ax,%eax
   1058f:	01 c6                	add    %eax,%esi
   10591:	e8 8a ec ff ff       	call   f220 <slipV_toBool>
   10596:	24 01                	and    $0x1,%al
   10598:	0f b6 c0             	movzbl %al,%eax
   1059b:	83 f8 01             	cmp    $0x1,%eax
   1059e:	0f 85 0f 00 00 00    	jne    105b3 <slipV_callProto+0xf83>
   105a4:	0f bf 45 ba          	movswl -0x46(%rbp),%eax
   105a8:	03 45 d4             	add    -0x2c(%rbp),%eax
   105ab:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   105ae:	e9 d2 f0 ff ff       	jmp    f685 <slipV_callProto+0x55>
   105b3:	e9 1f 04 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   105b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   105bc:	8b 75 d0             	mov    -0x30(%rbp),%esi
   105bf:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   105c3:	01 c6                	add    %eax,%esi
   105c5:	e8 f6 e8 ff ff       	call   eec0 <slipV_getValue>
   105ca:	48 89 85 30 fd ff ff 	mov    %rax,-0x2d0(%rbp)
   105d1:	89 95 38 fd ff ff    	mov    %edx,-0x2c8(%rbp)
   105d7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   105db:	8b 75 d0             	mov    -0x30(%rbp),%esi
   105de:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   105e2:	01 c6                	add    %eax,%esi
   105e4:	e8 d7 e8 ff ff       	call   eec0 <slipV_getValue>
   105e9:	48 89 85 20 fd ff ff 	mov    %rax,-0x2e0(%rbp)
   105f0:	89 95 28 fd ff ff    	mov    %edx,-0x2d8(%rbp)
   105f6:	48 8b bd 30 fd ff ff 	mov    -0x2d0(%rbp),%rdi
   105fd:	8b b5 38 fd ff ff    	mov    -0x2c8(%rbp),%esi
   10603:	48 8b 95 20 fd ff ff 	mov    -0x2e0(%rbp),%rdx
   1060a:	8b 8d 28 fd ff ff    	mov    -0x2d8(%rbp),%ecx
   10610:	e8 3b e5 ff ff       	call   eb50 <slipV_isEqual>
   10615:	24 01                	and    $0x1,%al
   10617:	88 85 47 fd ff ff    	mov    %al,-0x2b9(%rbp)
   1061d:	8a 85 47 fd ff ff    	mov    -0x2b9(%rbp),%al
   10623:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10627:	24 01                	and    $0x1,%al
   10629:	0f b6 f0             	movzbl %al,%esi
   1062c:	e8 8f dc ff ff       	call   e2c0 <slipV_setValueBool>
   10631:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10635:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10638:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   1063c:	66 c1 e8 06          	shr    $0x6,%ax
   10640:	0f b7 c0             	movzwl %ax,%eax
   10643:	01 c6                	add    %eax,%esi
   10645:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   10649:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   1064c:	e8 af e8 ff ff       	call   ef00 <slipV_setValue>
   10651:	8a 45 b8             	mov    -0x48(%rbp),%al
   10654:	24 3f                	and    $0x3f,%al
   10656:	0f b6 c0             	movzbl %al,%eax
   10659:	83 f8 1b             	cmp    $0x1b,%eax
   1065c:	0f 85 66 00 00 00    	jne    106c8 <slipV_callProto+0x1098>
   10662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10666:	48 89 85 18 fc ff ff 	mov    %rax,-0x3e8(%rbp)
   1066d:	8b 45 d0             	mov    -0x30(%rbp),%eax
   10670:	66 8b 4d b8          	mov    -0x48(%rbp),%cx
   10674:	66 c1 e9 06          	shr    $0x6,%cx
   10678:	0f b7 c9             	movzwl %cx,%ecx
   1067b:	01 c8                	add    %ecx,%eax
   1067d:	89 85 24 fc ff ff    	mov    %eax,-0x3dc(%rbp)
   10683:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10687:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1068a:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   1068e:	66 c1 e8 06          	shr    $0x6,%ax
   10692:	0f b7 c0             	movzwl %ax,%eax
   10695:	01 c6                	add    %eax,%esi
   10697:	e8 24 e8 ff ff       	call   eec0 <slipV_getValue>
   1069c:	48 8b bd 18 fc ff ff 	mov    -0x3e8(%rbp),%rdi
   106a3:	8b b5 24 fc ff ff    	mov    -0x3dc(%rbp),%esi
   106a9:	48 89 85 10 fd ff ff 	mov    %rax,-0x2f0(%rbp)
   106b0:	89 95 18 fd ff ff    	mov    %edx,-0x2e8(%rbp)
   106b6:	48 8b 95 10 fd ff ff 	mov    -0x2f0(%rbp),%rdx
   106bd:	8b 8d 18 fd ff ff    	mov    -0x2e8(%rbp),%ecx
   106c3:	e8 38 e8 ff ff       	call   ef00 <slipV_setValue>
   106c8:	e9 0a 03 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   106cd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   106d1:	8b 75 d0             	mov    -0x30(%rbp),%esi
   106d4:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   106d8:	01 c6                	add    %eax,%esi
   106da:	e8 71 eb ff ff       	call   f250 <slipV_toInt>
   106df:	48 89 85 10 fc ff ff 	mov    %rax,-0x3f0(%rbp)
   106e6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   106ea:	8b 75 d0             	mov    -0x30(%rbp),%esi
   106ed:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   106f1:	01 c6                	add    %eax,%esi
   106f3:	e8 58 eb ff ff       	call   f250 <slipV_toInt>
   106f8:	48 89 c1             	mov    %rax,%rcx
   106fb:	48 8b 85 10 fc ff ff 	mov    -0x3f0(%rbp),%rax
   10702:	48 39 c8             	cmp    %rcx,%rax
   10705:	0f 9e c0             	setle  %al
   10708:	0f b6 f0             	movzbl %al,%esi
   1070b:	83 e6 01             	and    $0x1,%esi
   1070e:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10712:	e8 a9 db ff ff       	call   e2c0 <slipV_setValueBool>
   10717:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1071b:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1071e:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10722:	66 c1 e8 06          	shr    $0x6,%ax
   10726:	0f b7 c0             	movzwl %ax,%eax
   10729:	01 c6                	add    %eax,%esi
   1072b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1072f:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10732:	e8 c9 e7 ff ff       	call   ef00 <slipV_setValue>
   10737:	e9 9b 02 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1073c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10740:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10743:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10747:	01 c6                	add    %eax,%esi
   10749:	e8 02 eb ff ff       	call   f250 <slipV_toInt>
   1074e:	48 89 85 08 fc ff ff 	mov    %rax,-0x3f8(%rbp)
   10755:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10759:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1075c:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   10760:	01 c6                	add    %eax,%esi
   10762:	e8 e9 ea ff ff       	call   f250 <slipV_toInt>
   10767:	48 89 c1             	mov    %rax,%rcx
   1076a:	48 8b 85 08 fc ff ff 	mov    -0x3f8(%rbp),%rax
   10771:	48 39 c8             	cmp    %rcx,%rax
   10774:	0f 9c c0             	setl   %al
   10777:	0f b6 f0             	movzbl %al,%esi
   1077a:	83 e6 01             	and    $0x1,%esi
   1077d:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   10781:	e8 3a db ff ff       	call   e2c0 <slipV_setValueBool>
   10786:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1078a:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1078d:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10791:	66 c1 e8 06          	shr    $0x6,%ax
   10795:	0f b7 c0             	movzwl %ax,%eax
   10798:	01 c6                	add    %eax,%esi
   1079a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1079e:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   107a1:	e8 5a e7 ff ff       	call   ef00 <slipV_setValue>
   107a6:	e9 2c 02 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   107ab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   107af:	8b 75 d0             	mov    -0x30(%rbp),%esi
   107b2:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   107b6:	01 c6                	add    %eax,%esi
   107b8:	e8 93 ea ff ff       	call   f250 <slipV_toInt>
   107bd:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
   107c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   107c8:	8b 75 d0             	mov    -0x30(%rbp),%esi
   107cb:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   107cf:	01 c6                	add    %eax,%esi
   107d1:	e8 7a ea ff ff       	call   f250 <slipV_toInt>
   107d6:	48 89 c1             	mov    %rax,%rcx
   107d9:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
   107e0:	48 39 c8             	cmp    %rcx,%rax
   107e3:	0f 9d c0             	setge  %al
   107e6:	0f b6 f0             	movzbl %al,%esi
   107e9:	83 e6 01             	and    $0x1,%esi
   107ec:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   107f0:	e8 cb da ff ff       	call   e2c0 <slipV_setValueBool>
   107f5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   107f9:	8b 75 d0             	mov    -0x30(%rbp),%esi
   107fc:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   10800:	66 c1 e8 06          	shr    $0x6,%ax
   10804:	0f b7 c0             	movzwl %ax,%eax
   10807:	01 c6                	add    %eax,%esi
   10809:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1080d:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10810:	e8 eb e6 ff ff       	call   ef00 <slipV_setValue>
   10815:	e9 bd 01 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   1081a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1081e:	8b 75 d0             	mov    -0x30(%rbp),%esi
   10821:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
   10825:	01 c6                	add    %eax,%esi
   10827:	e8 24 ea ff ff       	call   f250 <slipV_toInt>
   1082c:	48 89 85 f8 fb ff ff 	mov    %rax,-0x408(%rbp)
   10833:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10837:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1083a:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
   1083e:	01 c6                	add    %eax,%esi
   10840:	e8 0b ea ff ff       	call   f250 <slipV_toInt>
   10845:	48 89 c1             	mov    %rax,%rcx
   10848:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
   1084f:	48 39 c8             	cmp    %rcx,%rax
   10852:	0f 9f c0             	setg   %al
   10855:	0f b6 f0             	movzbl %al,%esi
   10858:	83 e6 01             	and    $0x1,%esi
   1085b:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
   1085f:	e8 5c da ff ff       	call   e2c0 <slipV_setValueBool>
   10864:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10868:	8b 75 d0             	mov    -0x30(%rbp),%esi
   1086b:	66 8b 45 b8          	mov    -0x48(%rbp),%ax
   1086f:	66 c1 e8 06          	shr    $0x6,%ax
   10873:	0f b7 c0             	movzwl %ax,%eax
   10876:	01 c6                	add    %eax,%esi
   10878:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1087c:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   1087f:	e8 7c e6 ff ff       	call   ef00 <slipV_setValue>
   10884:	e9 4e 01 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   10889:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1088d:	8b 40 14             	mov    0x14(%rax),%eax
   10890:	8b 4d b8             	mov    -0x48(%rbp),%ecx
   10893:	c1 e9 06             	shr    $0x6,%ecx
   10896:	29 c8                	sub    %ecx,%eax
   10898:	83 e8 01             	sub    $0x1,%eax
   1089b:	89 85 0c fd ff ff    	mov    %eax,-0x2f4(%rbp)
   108a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   108a5:	8b 75 b8             	mov    -0x48(%rbp),%esi
   108a8:	c1 ee 06             	shr    $0x6,%esi
   108ab:	e8 10 eb ff ff       	call   f3c0 <slipV_call>
   108b0:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
   108b7:	83 bd 00 fd ff ff 00 	cmpl   $0x0,-0x300(%rbp)
   108be:	0f 8d 1a 00 00 00    	jge    108de <slipV_callProto+0x12ae>
   108c4:	48 8d 3d 8e 85 00 00 	lea    0x858e(%rip),%rdi        # 18e59 <getFreeElement.b+0x659>
   108cb:	b0 00                	mov    $0x0,%al
   108cd:	e8 fe 27 ff ff       	call   30d0 <printf@plt>
   108d2:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   108d9:	e9 07 01 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   108de:	e9 f4 00 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   108e3:	e9 ef 00 00 00       	jmp    109d7 <slipV_callProto+0x13a7>
   108e8:	c7 85 fc fc ff ff 00 	movl   $0x0,-0x304(%rbp)
   108ef:	00 00 00 
   108f2:	8b 85 fc fc ff ff    	mov    -0x304(%rbp),%eax
   108f8:	8b 4d b8             	mov    -0x48(%rbp),%ecx
   108fb:	c1 e9 06             	shr    $0x6,%ecx
   108fe:	39 c8                	cmp    %ecx,%eax
   10900:	0f 8d 73 00 00 00    	jge    10979 <slipV_callProto+0x1349>
   10906:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1090a:	48 89 85 e8 fb ff ff 	mov    %rax,-0x418(%rbp)
   10911:	8b 45 d0             	mov    -0x30(%rbp),%eax
   10914:	03 85 fc fc ff ff    	add    -0x304(%rbp),%eax
   1091a:	89 85 f4 fb ff ff    	mov    %eax,-0x40c(%rbp)
   10920:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10924:	8b 45 b8             	mov    -0x48(%rbp),%eax
   10927:	c1 e8 06             	shr    $0x6,%eax
   1092a:	31 f6                	xor    %esi,%esi
   1092c:	29 c6                	sub    %eax,%esi
   1092e:	03 b5 fc fc ff ff    	add    -0x304(%rbp),%esi
   10934:	e8 87 e5 ff ff       	call   eec0 <slipV_getValue>
   10939:	48 8b bd e8 fb ff ff 	mov    -0x418(%rbp),%rdi
   10940:	8b b5 f4 fb ff ff    	mov    -0x40c(%rbp),%esi
   10946:	48 89 85 e8 fc ff ff 	mov    %rax,-0x318(%rbp)
   1094d:	89 95 f0 fc ff ff    	mov    %edx,-0x310(%rbp)
   10953:	48 8b 95 e8 fc ff ff 	mov    -0x318(%rbp),%rdx
   1095a:	8b 8d f0 fc ff ff    	mov    -0x310(%rbp),%ecx
   10960:	e8 9b e5 ff ff       	call   ef00 <slipV_setValue>
   10965:	8b 85 fc fc ff ff    	mov    -0x304(%rbp),%eax
   1096b:	83 c0 01             	add    $0x1,%eax
   1096e:	89 85 fc fc ff ff    	mov    %eax,-0x304(%rbp)
   10974:	e9 79 ff ff ff       	jmp    108f2 <slipV_callProto+0x12c2>
   10979:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1097d:	48 83 c7 08          	add    $0x8,%rdi
   10981:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10985:	8b 70 14             	mov    0x14(%rax),%esi
   10988:	2b 75 d0             	sub    -0x30(%rbp),%esi
   1098b:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1098e:	c1 e8 06             	shr    $0x6,%eax
   10991:	29 c6                	sub    %eax,%esi
   10993:	e8 d8 d0 ff ff       	call   da70 <slipS_popValueNum>
   10998:	8b 45 b8             	mov    -0x48(%rbp),%eax
   1099b:	c1 e8 06             	shr    $0x6,%eax
   1099e:	89 45 fc             	mov    %eax,-0x4(%rbp)
   109a1:	e9 3f 00 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   109a6:	8b 75 d4             	mov    -0x2c(%rbp),%esi
   109a9:	8a 45 b8             	mov    -0x48(%rbp),%al
   109ac:	24 3f                	and    $0x3f,%al
   109ae:	0f b6 d0             	movzbl %al,%edx
   109b1:	48 8d 3d b6 84 00 00 	lea    0x84b6(%rip),%rdi        # 18e6e <getFreeElement.b+0x66e>
   109b8:	b0 00                	mov    $0x0,%al
   109ba:	e8 11 27 ff ff       	call   30d0 <printf@plt>
   109bf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   109c3:	8b 75 d4             	mov    -0x2c(%rbp),%esi
   109c6:	e8 d5 02 00 00       	call   10ca0 <printProto>
   109cb:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   109d2:	e9 0e 00 00 00       	jmp    109e5 <slipV_callProto+0x13b5>
   109d7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   109da:	83 c0 01             	add    $0x1,%eax
   109dd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   109e0:	e9 a0 ec ff ff       	jmp    f685 <slipV_callProto+0x55>
   109e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
   109e8:	48 81 c4 20 04 00 00 	add    $0x420,%rsp
   109ef:	5d                   	pop    %rbp
   109f0:	c3                   	ret
   109f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   109f8:	00 00 00 
   109fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000010a00 <slipV_callList>:
   10a00:	55                   	push   %rbp
   10a01:	48 89 e5             	mov    %rsp,%rbp
   10a04:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   10a0b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   10a0f:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   10a13:	89 55 e4             	mov    %edx,-0x1c(%rbp)
   10a16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
   10a1d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   10a22:	0f 84 2e 02 00 00    	je     10c56 <slipV_callList+0x256>
   10a28:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
   10a2c:	0f 8e 10 00 00 00    	jle    10a42 <slipV_callList+0x42>
   10a32:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10a36:	48 83 c7 08          	add    $0x8,%rdi
   10a3a:	8b 75 e0             	mov    -0x20(%rbp),%esi
   10a3d:	e8 2e d0 ff ff       	call   da70 <slipS_popValueNum>
   10a42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10a46:	83 78 10 08          	cmpl   $0x8,0x10(%rax)
   10a4a:	0f 84 88 00 00 00    	je     10ad8 <slipV_callList+0xd8>
   10a50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10a54:	81 78 10 00 01 00 00 	cmpl   $0x100,0x10(%rax)
   10a5b:	0f 85 2f 00 00 00    	jne    10a90 <slipV_callList+0x90>
   10a61:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10a65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10a69:	48 8b 70 08          	mov    0x8(%rax),%rsi
   10a6d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   10a70:	e8 8b ff ff ff       	call   10a00 <slipV_callList>
   10a75:	89 45 dc             	mov    %eax,-0x24(%rbp)
   10a78:	8b 45 dc             	mov    -0x24(%rbp),%eax
   10a7b:	89 45 e0             	mov    %eax,-0x20(%rbp)
   10a7e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10a82:	e8 c9 b0 ff ff       	call   bb50 <slipL_forward>
   10a87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10a8b:	e9 43 00 00 00       	jmp    10ad3 <slipV_callList+0xd3>
   10a90:	48 8b 05 59 f5 00 00 	mov    0xf559(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   10a97:	48 8b 38             	mov    (%rax),%rdi
   10a9a:	48 8d 35 fb 82 00 00 	lea    0x82fb(%rip),%rsi        # 18d9c <getFreeElement.b+0x59c>
   10aa1:	b0 00                	mov    $0x0,%al
   10aa3:	e8 88 26 ff ff       	call   3130 <fprintf@plt>
   10aa8:	48 8b 05 41 f5 00 00 	mov    0xf541(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   10aaf:	48 8b 38             	mov    (%rax),%rdi
   10ab2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ab6:	8b 50 10             	mov    0x10(%rax),%edx
   10ab9:	48 8d 35 be 83 00 00 	lea    0x83be(%rip),%rsi        # 18e7e <getFreeElement.b+0x67e>
   10ac0:	b0 00                	mov    $0x0,%al
   10ac2:	e8 69 26 ff ff       	call   3130 <fprintf@plt>
   10ac7:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   10ace:	e9 89 01 00 00       	jmp    10c5c <slipV_callList+0x25c>
   10ad3:	e9 79 01 00 00       	jmp    10c51 <slipV_callList+0x251>
   10ad8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
   10adf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10ae3:	48 8b 40 08          	mov    0x8(%rax),%rax
   10ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10aeb:	48 8d 05 22 f9 00 00 	lea    0xf922(%rip),%rax        # 20414 <slip_debug_compile>
   10af2:	f6 00 01             	testb  $0x1,(%rax)
   10af5:	0f 84 15 00 00 00    	je     10b10 <slipV_callList+0x110>
   10afb:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   10aff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   10b02:	48 8d 3d c4 82 00 00 	lea    0x82c4(%rip),%rdi        # 18dcd <getFreeElement.b+0x5cd>
   10b09:	b0 00                	mov    $0x0,%al
   10b0b:	e8 c0 25 ff ff       	call   30d0 <printf@plt>
   10b10:	e9 00 00 00 00       	jmp    10b15 <slipV_callList+0x115>
   10b15:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10b19:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   10b1d:	e8 be a6 ff ff       	call   b1e0 <slipC_findID>
   10b22:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   10b26:	89 55 c8             	mov    %edx,-0x38(%rbp)
   10b29:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
   10b2d:	0f 84 17 00 00 00    	je     10b4a <slipV_callList+0x14a>
   10b33:	83 7d c8 40          	cmpl   $0x40,-0x38(%rbp)
   10b37:	0f 84 71 00 00 00    	je     10bae <slipV_callList+0x1ae>
   10b3d:	81 7d c8 00 20 00 00 	cmpl   $0x2000,-0x38(%rbp)
   10b44:	0f 84 64 00 00 00    	je     10bae <slipV_callList+0x1ae>
   10b4a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10b4e:	48 8d 35 23 76 00 00 	lea    0x7623(%rip),%rsi        # 18178 <_IO_stdin_used+0x178>
   10b55:	e8 86 a6 ff ff       	call   b1e0 <slipC_findID>
   10b5a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   10b5e:	89 55 b8             	mov    %edx,-0x48(%rbp)
   10b61:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   10b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   10b69:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10b6d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   10b71:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
   10b75:	0f 84 0a 00 00 00    	je     10b85 <slipV_callList+0x185>
   10b7b:	83 7d c8 40          	cmpl   $0x40,-0x38(%rbp)
   10b7f:	0f 84 24 00 00 00    	je     10ba9 <slipV_callList+0x1a9>
   10b85:	48 8b 05 64 f4 00 00 	mov    0xf464(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   10b8c:	48 8b 38             	mov    (%rax),%rdi
   10b8f:	48 8d 35 4d 82 00 00 	lea    0x824d(%rip),%rsi        # 18de3 <getFreeElement.b+0x5e3>
   10b96:	b0 00                	mov    $0x0,%al
   10b98:	e8 93 25 ff ff       	call   3130 <fprintf@plt>
   10b9d:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   10ba4:	e9 b3 00 00 00       	jmp    10c5c <slipV_callList+0x25c>
   10ba9:	e9 0d 00 00 00       	jmp    10bbb <slipV_callList+0x1bb>
   10bae:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10bb2:	e8 99 af ff ff       	call   bb50 <slipL_forward>
   10bb7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10bbb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   10bbf:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
   10bc3:	e8 d8 d5 ff ff       	call   e1a0 <slipV_setValueList>
   10bc8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10bcc:	48 83 c7 08          	add    $0x8,%rdi
   10bd0:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   10bd4:	8b 55 a8             	mov    -0x58(%rbp),%edx
   10bd7:	e8 f4 cb ff ff       	call   d7d0 <slipS_pushValue>
   10bdc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10be0:	48 83 c7 08          	add    $0x8,%rdi
   10be4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   10be8:	8b 55 c8             	mov    -0x38(%rbp),%edx
   10beb:	e8 e0 cb ff ff       	call   d7d0 <slipS_pushValue>
   10bf0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   10bf4:	be 01 00 00 00       	mov    $0x1,%esi
   10bf9:	e8 c2 e7 ff ff       	call   f3c0 <slipV_call>
   10bfe:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   10c02:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   10c06:	0f 8d 0c 00 00 00    	jge    10c18 <slipV_callList+0x218>
   10c0c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   10c13:	e9 44 00 00 00       	jmp    10c5c <slipV_callList+0x25c>
   10c18:	8b 45 88             	mov    -0x78(%rbp),%eax
   10c1b:	89 45 e0             	mov    %eax,-0x20(%rbp)
   10c1e:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
   10c25:	8b 45 84             	mov    -0x7c(%rbp),%eax
   10c28:	3b 45 8c             	cmp    -0x74(%rbp),%eax
   10c2b:	0f 8d 1b 00 00 00    	jge    10c4c <slipV_callList+0x24c>
   10c31:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   10c35:	e8 16 af ff ff       	call   bb50 <slipL_forward>
   10c3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10c3e:	8b 45 84             	mov    -0x7c(%rbp),%eax
   10c41:	83 c0 01             	add    $0x1,%eax
   10c44:	89 45 84             	mov    %eax,-0x7c(%rbp)
   10c47:	e9 d9 ff ff ff       	jmp    10c25 <slipV_callList+0x225>
   10c4c:	e9 00 00 00 00       	jmp    10c51 <slipV_callList+0x251>
   10c51:	e9 c7 fd ff ff       	jmp    10a1d <slipV_callList+0x1d>
   10c56:	8b 45 e0             	mov    -0x20(%rbp),%eax
   10c59:	89 45 fc             	mov    %eax,-0x4(%rbp)
   10c5c:	8b 45 fc             	mov    -0x4(%rbp),%eax
   10c5f:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   10c66:	5d                   	pop    %rbp
   10c67:	c3                   	ret
   10c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   10c6f:	00 

0000000000010c70 <slipV_callID>:
   10c70:	55                   	push   %rbp
   10c71:	48 89 e5             	mov    %rsp,%rbp
   10c74:	48 83 ec 20          	sub    $0x20,%rsp
   10c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10c7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10c80:	89 55 ec             	mov    %edx,-0x14(%rbp)
   10c83:	48 8d 3d 7a 81 00 00 	lea    0x817a(%rip),%rdi        # 18e04 <getFreeElement.b+0x604>
   10c8a:	b0 00                	mov    $0x0,%al
   10c8c:	e8 3f 24 ff ff       	call   30d0 <printf@plt>
   10c91:	31 c0                	xor    %eax,%eax
   10c93:	48 83 c4 20          	add    $0x20,%rsp
   10c97:	5d                   	pop    %rbp
   10c98:	c3                   	ret
   10c99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000010ca0 <printProto>:
   10ca0:	55                   	push   %rbp
   10ca1:	48 89 e5             	mov    %rsp,%rbp
   10ca4:	48 83 ec 60          	sub    $0x60,%rsp
   10ca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10cac:	89 75 f4             	mov    %esi,-0xc(%rbp)
   10caf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
   10cb6:	8b 45 f0             	mov    -0x10(%rbp),%eax
   10cb9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   10cbd:	3b 41 18             	cmp    0x18(%rcx),%eax
   10cc0:	0f 83 68 00 00 00    	jae    10d2e <printProto+0x8e>
   10cc6:	8b 45 f0             	mov    -0x10(%rbp),%eax
   10cc9:	3b 45 f4             	cmp    -0xc(%rbp),%eax
   10ccc:	0f 85 13 00 00 00    	jne    10ce5 <printProto+0x45>
   10cd2:	48 8d 3d a9 81 00 00 	lea    0x81a9(%rip),%rdi        # 18e82 <getFreeElement.b+0x682>
   10cd9:	b0 00                	mov    $0x0,%al
   10cdb:	e8 f0 23 ff ff       	call   30d0 <printf@plt>
   10ce0:	e9 11 00 00 00       	jmp    10cf6 <printProto+0x56>
   10ce5:	8b 75 f0             	mov    -0x10(%rbp),%esi
   10ce8:	48 8d 3d 51 7d 00 00 	lea    0x7d51(%rip),%rdi        # 18a40 <getFreeElement.b+0x240>
   10cef:	b0 00                	mov    $0x0,%al
   10cf1:	e8 da 23 ff ff       	call   30d0 <printf@plt>
   10cf6:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
   10cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cfe:	48 8b 40 38          	mov    0x38(%rax),%rax
   10d02:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
   10d06:	8b 34 88             	mov    (%rax,%rcx,4),%esi
   10d09:	e8 f2 6e 00 00       	call   17c00 <slipI_sprint>
   10d0e:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
   10d12:	48 8d 3d 26 78 00 00 	lea    0x7826(%rip),%rdi        # 1853f <_IO_stdin_used+0x53f>
   10d19:	b0 00                	mov    $0x0,%al
   10d1b:	e8 b0 23 ff ff       	call   30d0 <printf@plt>
   10d20:	8b 45 f0             	mov    -0x10(%rbp),%eax
   10d23:	83 c0 01             	add    $0x1,%eax
   10d26:	89 45 f0             	mov    %eax,-0x10(%rbp)
   10d29:	e9 88 ff ff ff       	jmp    10cb6 <printProto+0x16>
   10d2e:	48 8d 3d 12 7d 00 00 	lea    0x7d12(%rip),%rdi        # 18a47 <getFreeElement.b+0x247>
   10d35:	b0 00                	mov    $0x0,%al
   10d37:	e8 94 23 ff ff       	call   30d0 <printf@plt>
   10d3c:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
   10d43:	8b 45 ac             	mov    -0x54(%rbp),%eax
   10d46:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   10d4a:	3b 41 28             	cmp    0x28(%rcx),%eax
   10d4d:	0f 83 3a 00 00 00    	jae    10d8d <printProto+0xed>
   10d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d57:	48 8b 40 40          	mov    0x40(%rax),%rax
   10d5b:	48 63 4d ac          	movslq -0x54(%rbp),%rcx
   10d5f:	48 c1 e1 04          	shl    $0x4,%rcx
   10d63:	48 01 c8             	add    %rcx,%rax
   10d66:	48 8b 38             	mov    (%rax),%rdi
   10d69:	8b 70 08             	mov    0x8(%rax),%esi
   10d6c:	e8 bf db ff ff       	call   e930 <slipV_printValue>
   10d71:	48 8d 3d b3 73 00 00 	lea    0x73b3(%rip),%rdi        # 1812b <_IO_stdin_used+0x12b>
   10d78:	b0 00                	mov    $0x0,%al
   10d7a:	e8 51 23 ff ff       	call   30d0 <printf@plt>
   10d7f:	8b 45 ac             	mov    -0x54(%rbp),%eax
   10d82:	83 c0 01             	add    $0x1,%eax
   10d85:	89 45 ac             	mov    %eax,-0x54(%rbp)
   10d88:	e9 b6 ff ff ff       	jmp    10d43 <printProto+0xa3>
   10d8d:	48 83 c4 60          	add    $0x60,%rsp
   10d91:	5d                   	pop    %rbp
   10d92:	c3                   	ret
   10d93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   10d9a:	00 00 00 
   10d9d:	0f 1f 00             	nopl   (%rax)

0000000000010da0 <yyparse>:
   10da0:	55                   	push   %rbp
   10da1:	48 89 e5             	mov    %rsp,%rbp
   10da4:	48 81 ec 40 17 00 00 	sub    $0x1740,%rsp
   10dab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   10daf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   10db3:	48 8b 05 86 f6 00 00 	mov    0xf686(%rip),%rax        # 20440 <yyparse.yyval_default>
   10dba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10dbe:	48 8b 05 13 f5 00 00 	mov    0xf513(%rip),%rax        # 202d8 <yyparse.yyloc_default>
   10dc5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10dc9:	48 8b 05 10 f5 00 00 	mov    0xf510(%rip),%rax        # 202e0 <yyparse.yyloc_default+0x8>
   10dd0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   10dd4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
   10ddb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
   10de2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
   10de9:	48 c7 45 b8 c8 00 00 	movq   $0xc8,-0x48(%rbp)
   10df0:	00 
   10df1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   10df8:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   10dff:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10e06:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   10e0d:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
   10e14:	48 89 85 98 f8 ff ff 	mov    %rax,-0x768(%rbp)
   10e1b:	48 8b 85 98 f8 ff ff 	mov    -0x768(%rbp),%rax
   10e22:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   10e29:	48 8d 85 10 ec ff ff 	lea    -0x13f0(%rbp),%rax
   10e30:	48 89 85 08 ec ff ff 	mov    %rax,-0x13f8(%rbp)
   10e37:	48 8b 85 08 ec ff ff 	mov    -0x13f8(%rbp),%rax
   10e3e:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   10e45:	c7 85 f4 eb ff ff fe 	movl   $0xfffffffe,-0x140c(%rbp)
   10e4c:	ff ff ff 
   10e4f:	48 8d 85 20 eb ff ff 	lea    -0x14e0(%rbp),%rax
   10e56:	48 89 85 18 eb ff ff 	mov    %rax,-0x14e8(%rbp)
   10e5d:	48 c7 85 10 eb ff ff 	movq   $0x80,-0x14f0(%rbp)
   10e64:	80 00 00 00 
   10e68:	c7 85 0c eb ff ff 00 	movl   $0x0,-0x14f4(%rbp)
   10e6f:	00 00 00 
   10e72:	83 3d cf f5 00 00 00 	cmpl   $0x0,0xf5cf(%rip)        # 20448 <yydebug>
   10e79:	0f 84 18 00 00 00    	je     10e97 <yyparse+0xf7>
   10e7f:	48 8b 05 6a f1 00 00 	mov    0xf16a(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   10e86:	48 8b 38             	mov    (%rax),%rdi
   10e89:	48 8d 35 8f 87 00 00 	lea    0x878f(%rip),%rsi        # 1961f <yyrline+0x3f>
   10e90:	b0 00                	mov    $0x0,%al
   10e92:	e8 99 22 ff ff       	call   3130 <fprintf@plt>
   10e97:	e9 00 00 00 00       	jmp    10e9c <yyparse+0xfc>
   10e9c:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
   10ea3:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   10eaa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   10eae:	48 89 08             	mov    %rcx,(%rax)
   10eb1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   10eb5:	48 89 48 08          	mov    %rcx,0x8(%rax)
   10eb9:	e9 12 00 00 00       	jmp    10ed0 <yyparse+0x130>
   10ebe:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   10ec5:	48 83 c0 01          	add    $0x1,%rax
   10ec9:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   10ed0:	e9 00 00 00 00       	jmp    10ed5 <yyparse+0x135>
   10ed5:	83 3d 6c f5 00 00 00 	cmpl   $0x0,0xf56c(%rip)        # 20448 <yydebug>
   10edc:	0f 84 1b 00 00 00    	je     10efd <yyparse+0x15d>
   10ee2:	48 8b 05 07 f1 00 00 	mov    0xf107(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   10ee9:	48 8b 38             	mov    (%rax),%rdi
   10eec:	8b 55 c8             	mov    -0x38(%rbp),%edx
   10eef:	48 8d 35 39 87 00 00 	lea    0x8739(%rip),%rsi        # 1962f <yyrline+0x4f>
   10ef6:	b0 00                	mov    $0x0,%al
   10ef8:	e8 33 22 ff ff       	call   3130 <fprintf@plt>
   10efd:	e9 00 00 00 00       	jmp    10f02 <yyparse+0x162>
   10f02:	8b 45 c8             	mov    -0x38(%rbp),%eax
   10f05:	88 c1                	mov    %al,%cl
   10f07:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   10f0e:	88 08                	mov    %cl,(%rax)
   10f10:	83 3d 31 f5 00 00 00 	cmpl   $0x0,0xf531(%rip)        # 20448 <yydebug>
   10f17:	0f 84 13 00 00 00    	je     10f30 <yyparse+0x190>
   10f1d:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   10f24:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
   10f2b:	e8 60 21 00 00       	call   13090 <yy_stack_print>
   10f30:	e9 00 00 00 00       	jmp    10f35 <yyparse+0x195>
   10f35:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10f3c:	48 03 45 b8          	add    -0x48(%rbp),%rax
   10f40:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   10f44:	48 3b 85 e0 fe ff ff 	cmp    -0x120(%rbp),%rax
   10f4b:	0f 87 8e 02 00 00    	ja     111df <yyparse+0x43f>
   10f51:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   10f58:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
   10f5f:	48 29 c8             	sub    %rcx,%rax
   10f62:	48 83 c0 01          	add    $0x1,%rax
   10f66:	48 89 85 00 eb ff ff 	mov    %rax,-0x1500(%rbp)
   10f6d:	b8 10 27 00 00       	mov    $0x2710,%eax
   10f72:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   10f76:	0f 8f 05 00 00 00    	jg     10f81 <yyparse+0x1e1>
   10f7c:	e9 01 1f 00 00       	jmp    12e82 <yyparse+0x20e2>
   10f81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10f85:	48 c1 e0 01          	shl    $0x1,%rax
   10f89:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   10f8d:	b8 10 27 00 00       	mov    $0x2710,%eax
   10f92:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   10f96:	0f 8d 08 00 00 00    	jge    10fa4 <yyparse+0x204>
   10f9c:	48 c7 45 b8 10 27 00 	movq   $0x2710,-0x48(%rbp)
   10fa3:	00 
   10fa4:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   10fab:	48 89 85 f8 ea ff ff 	mov    %rax,-0x1508(%rbp)
   10fb2:	48 6b 7d b8 19       	imul   $0x19,-0x48(%rbp),%rdi
   10fb7:	48 83 c7 1e          	add    $0x1e,%rdi
   10fbb:	e8 d0 21 ff ff       	call   3190 <malloc@plt>
   10fc0:	48 89 85 f0 ea ff ff 	mov    %rax,-0x1510(%rbp)
   10fc7:	48 83 bd f0 ea ff ff 	cmpq   $0x0,-0x1510(%rbp)
   10fce:	00 
   10fcf:	0f 85 05 00 00 00    	jne    10fda <yyparse+0x23a>
   10fd5:	e9 a8 1e 00 00       	jmp    12e82 <yyparse+0x20e2>
   10fda:	e9 00 00 00 00       	jmp    10fdf <yyparse+0x23f>
   10fdf:	48 8b bd f0 ea ff ff 	mov    -0x1510(%rbp),%rdi
   10fe6:	48 8b b5 e8 fe ff ff 	mov    -0x118(%rbp),%rsi
   10fed:	48 8b 95 00 eb ff ff 	mov    -0x1500(%rbp),%rdx
   10ff4:	48 c1 e2 00          	shl    $0x0,%rdx
   10ff8:	e8 73 21 ff ff       	call   3170 <memcpy@plt>
   10ffd:	48 8b 85 f0 ea ff ff 	mov    -0x1510(%rbp),%rax
   11004:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   1100b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1100f:	48 c1 e0 00          	shl    $0x0,%rax
   11013:	48 83 c0 0f          	add    $0xf,%rax
   11017:	48 89 85 e8 ea ff ff 	mov    %rax,-0x1518(%rbp)
   1101e:	48 8b 85 e8 ea ff ff 	mov    -0x1518(%rbp),%rax
   11025:	b9 10 00 00 00       	mov    $0x10,%ecx
   1102a:	48 99                	cqto
   1102c:	48 f7 f9             	idiv   %rcx
   1102f:	48 c1 e0 04          	shl    $0x4,%rax
   11033:	48 03 85 f0 ea ff ff 	add    -0x1510(%rbp),%rax
   1103a:	48 89 85 f0 ea ff ff 	mov    %rax,-0x1510(%rbp)
   11041:	e9 00 00 00 00       	jmp    11046 <yyparse+0x2a6>
   11046:	48 8b bd f0 ea ff ff 	mov    -0x1510(%rbp),%rdi
   1104d:	48 8b b5 98 f8 ff ff 	mov    -0x768(%rbp),%rsi
   11054:	48 8b 95 00 eb ff ff 	mov    -0x1500(%rbp),%rdx
   1105b:	48 c1 e2 03          	shl    $0x3,%rdx
   1105f:	e8 0c 21 ff ff       	call   3170 <memcpy@plt>
   11064:	48 8b 85 f0 ea ff ff 	mov    -0x1510(%rbp),%rax
   1106b:	48 89 85 98 f8 ff ff 	mov    %rax,-0x768(%rbp)
   11072:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11076:	48 c1 e0 03          	shl    $0x3,%rax
   1107a:	48 83 c0 0f          	add    $0xf,%rax
   1107e:	48 89 85 e0 ea ff ff 	mov    %rax,-0x1520(%rbp)
   11085:	48 8b 85 e0 ea ff ff 	mov    -0x1520(%rbp),%rax
   1108c:	b9 10 00 00 00       	mov    $0x10,%ecx
   11091:	48 99                	cqto
   11093:	48 f7 f9             	idiv   %rcx
   11096:	48 c1 e0 04          	shl    $0x4,%rax
   1109a:	48 03 85 f0 ea ff ff 	add    -0x1510(%rbp),%rax
   110a1:	48 89 85 f0 ea ff ff 	mov    %rax,-0x1510(%rbp)
   110a8:	e9 00 00 00 00       	jmp    110ad <yyparse+0x30d>
   110ad:	48 8b bd f0 ea ff ff 	mov    -0x1510(%rbp),%rdi
   110b4:	48 8b b5 08 ec ff ff 	mov    -0x13f8(%rbp),%rsi
   110bb:	48 8b 95 00 eb ff ff 	mov    -0x1500(%rbp),%rdx
   110c2:	48 c1 e2 04          	shl    $0x4,%rdx
   110c6:	e8 a5 20 ff ff       	call   3170 <memcpy@plt>
   110cb:	48 8b 85 f0 ea ff ff 	mov    -0x1510(%rbp),%rax
   110d2:	48 89 85 08 ec ff ff 	mov    %rax,-0x13f8(%rbp)
   110d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   110dd:	48 c1 e0 04          	shl    $0x4,%rax
   110e1:	48 83 c0 0f          	add    $0xf,%rax
   110e5:	48 89 85 d8 ea ff ff 	mov    %rax,-0x1528(%rbp)
   110ec:	48 8b 85 d8 ea ff ff 	mov    -0x1528(%rbp),%rax
   110f3:	b9 10 00 00 00       	mov    $0x10,%ecx
   110f8:	48 99                	cqto
   110fa:	48 f7 f9             	idiv   %rcx
   110fd:	48 c1 e0 04          	shl    $0x4,%rax
   11101:	48 03 85 f0 ea ff ff 	add    -0x1510(%rbp),%rax
   11108:	48 89 85 f0 ea ff ff 	mov    %rax,-0x1510(%rbp)
   1110f:	48 8b 85 f8 ea ff ff 	mov    -0x1508(%rbp),%rax
   11116:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
   1111d:	48 39 c8             	cmp    %rcx,%rax
   11120:	0f 84 0c 00 00 00    	je     11132 <yyparse+0x392>
   11126:	48 8b bd f8 ea ff ff 	mov    -0x1508(%rbp),%rdi
   1112d:	e8 fe 1e ff ff       	call   3030 <free@plt>
   11132:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   11139:	48 03 85 00 eb ff ff 	add    -0x1500(%rbp),%rax
   11140:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   11144:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   1114b:	48 8b 85 98 f8 ff ff 	mov    -0x768(%rbp),%rax
   11152:	48 8b 8d 00 eb ff ff 	mov    -0x1500(%rbp),%rcx
   11159:	48 c1 e1 03          	shl    $0x3,%rcx
   1115d:	48 01 c8             	add    %rcx,%rax
   11160:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   11164:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   1116b:	48 8b 85 08 ec ff ff 	mov    -0x13f8(%rbp),%rax
   11172:	48 8b 8d 00 eb ff ff 	mov    -0x1500(%rbp),%rcx
   11179:	48 c1 e1 04          	shl    $0x4,%rcx
   1117d:	48 01 c8             	add    %rcx,%rax
   11180:	48 83 c0 f0          	add    $0xfffffffffffffff0,%rax
   11184:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   1118b:	83 3d b6 f2 00 00 00 	cmpl   $0x0,0xf2b6(%rip)        # 20448 <yydebug>
   11192:	0f 84 1c 00 00 00    	je     111b4 <yyparse+0x414>
   11198:	48 8b 05 51 ee 00 00 	mov    0xee51(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1119f:	48 8b 38             	mov    (%rax),%rdi
   111a2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   111a6:	48 8d 35 95 84 00 00 	lea    0x8495(%rip),%rsi        # 19642 <yyrline+0x62>
   111ad:	b0 00                	mov    $0x0,%al
   111af:	e8 7c 1f ff ff       	call   3130 <fprintf@plt>
   111b4:	e9 00 00 00 00       	jmp    111b9 <yyparse+0x419>
   111b9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   111c0:	48 03 45 b8          	add    -0x48(%rbp),%rax
   111c4:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   111c8:	48 3b 85 e0 fe ff ff 	cmp    -0x120(%rbp),%rax
   111cf:	0f 87 05 00 00 00    	ja     111da <yyparse+0x43a>
   111d5:	e9 99 1c 00 00       	jmp    12e73 <yyparse+0x20d3>
   111da:	e9 00 00 00 00       	jmp    111df <yyparse+0x43f>
   111df:	83 7d c8 2a          	cmpl   $0x2a,-0x38(%rbp)
   111e3:	0f 85 05 00 00 00    	jne    111ee <yyparse+0x44e>
   111e9:	e9 76 1c 00 00       	jmp    12e64 <yyparse+0x20c4>
   111ee:	e9 00 00 00 00       	jmp    111f3 <yyparse+0x453>
   111f3:	48 63 4d c8          	movslq -0x38(%rbp),%rcx
   111f7:	48 8d 05 92 7d 00 00 	lea    0x7d92(%rip),%rax        # 18f90 <yypact>
   111fe:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   11202:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   11208:	83 bd fc eb ff ff da 	cmpl   $0xffffffda,-0x1404(%rbp)
   1120f:	0f 85 05 00 00 00    	jne    1121a <yyparse+0x47a>
   11215:	e9 10 03 00 00       	jmp    1152a <yyparse+0x78a>
   1121a:	83 7d ec fe          	cmpl   $0xfffffffe,-0x14(%rbp)
   1121e:	0f 85 43 00 00 00    	jne    11267 <yyparse+0x4c7>
   11224:	e9 00 00 00 00       	jmp    11229 <yyparse+0x489>
   11229:	83 3d 18 f2 00 00 00 	cmpl   $0x0,0xf218(%rip)        # 20448 <yydebug>
   11230:	0f 84 18 00 00 00    	je     1124e <yyparse+0x4ae>
   11236:	48 8b 05 b3 ed 00 00 	mov    0xedb3(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1123d:	48 8b 38             	mov    (%rax),%rdi
   11240:	48 8d 35 18 84 00 00 	lea    0x8418(%rip),%rsi        # 1965f <yyrline+0x7f>
   11247:	b0 00                	mov    $0x0,%al
   11249:	e8 e2 1e ff ff       	call   3130 <fprintf@plt>
   1124e:	e9 00 00 00 00       	jmp    11253 <yyparse+0x4b3>
   11253:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11257:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
   1125b:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1125f:	e8 6c 2c 00 00       	call   13ed0 <yylex>
   11264:	89 45 ec             	mov    %eax,-0x14(%rbp)
   11267:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1126b:	0f 8f 40 00 00 00    	jg     112b1 <yyparse+0x511>
   11271:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   11278:	c7 85 f4 eb ff ff 00 	movl   $0x0,-0x140c(%rbp)
   1127f:	00 00 00 
   11282:	83 3d bf f1 00 00 00 	cmpl   $0x0,0xf1bf(%rip)        # 20448 <yydebug>
   11289:	0f 84 18 00 00 00    	je     112a7 <yyparse+0x507>
   1128f:	48 8b 05 5a ed 00 00 	mov    0xed5a(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   11296:	48 8b 38             	mov    (%rax),%rdi
   11299:	48 8d 35 d0 83 00 00 	lea    0x83d0(%rip),%rsi        # 19670 <yyrline+0x90>
   112a0:	b0 00                	mov    $0x0,%al
   112a2:	e8 89 1e ff ff       	call   3130 <fprintf@plt>
   112a7:	e9 00 00 00 00       	jmp    112ac <yyparse+0x50c>
   112ac:	e9 ff 00 00 00       	jmp    113b0 <yyparse+0x610>
   112b1:	81 7d ec 00 01 00 00 	cmpl   $0x100,-0x14(%rbp)
   112b8:	0f 85 2c 00 00 00    	jne    112ea <yyparse+0x54a>
   112be:	c7 45 ec 01 01 00 00 	movl   $0x101,-0x14(%rbp)
   112c5:	c7 85 f4 eb ff ff 01 	movl   $0x1,-0x140c(%rbp)
   112cc:	00 00 00 
   112cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   112d3:	48 89 85 b0 eb ff ff 	mov    %rax,-0x1450(%rbp)
   112da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   112de:	48 89 85 b8 eb ff ff 	mov    %rax,-0x1448(%rbp)
   112e5:	e9 ea 18 00 00       	jmp    12bd4 <yyparse+0x1e34>
   112ea:	31 c0                	xor    %eax,%eax
   112ec:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   112ef:	0f 8f 27 00 00 00    	jg     1131c <yyparse+0x57c>
   112f5:	81 7d ec 0e 01 00 00 	cmpl   $0x10e,-0x14(%rbp)
   112fc:	0f 8f 1a 00 00 00    	jg     1131c <yyparse+0x57c>
   11302:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   11306:	48 8d 05 63 7d 00 00 	lea    0x7d63(%rip),%rax        # 19070 <yytranslate>
   1130d:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   11311:	89 85 a8 ea ff ff    	mov    %eax,-0x1558(%rbp)
   11317:	e9 10 00 00 00       	jmp    1132c <yyparse+0x58c>
   1131c:	b8 02 00 00 00       	mov    $0x2,%eax
   11321:	89 85 a8 ea ff ff    	mov    %eax,-0x1558(%rbp)
   11327:	e9 00 00 00 00       	jmp    1132c <yyparse+0x58c>
   1132c:	8b 85 a8 ea ff ff    	mov    -0x1558(%rbp),%eax
   11332:	89 85 f4 eb ff ff    	mov    %eax,-0x140c(%rbp)
   11338:	83 3d 09 f1 00 00 00 	cmpl   $0x0,0xf109(%rip)        # 20448 <yydebug>
   1133f:	0f 84 5c 00 00 00    	je     113a1 <yyparse+0x601>
   11345:	48 8b 05 a4 ec 00 00 	mov    0xeca4(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1134c:	48 8b 38             	mov    (%rax),%rdi
   1134f:	48 8d 35 f0 6e 00 00 	lea    0x6ef0(%rip),%rsi        # 18246 <_IO_stdin_used+0x246>
   11356:	48 8d 15 29 83 00 00 	lea    0x8329(%rip),%rdx        # 19686 <yyrline+0xa6>
   1135d:	b0 00                	mov    $0x0,%al
   1135f:	e8 cc 1d ff ff       	call   3130 <fprintf@plt>
   11364:	48 8b 05 85 ec 00 00 	mov    0xec85(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1136b:	48 8b 38             	mov    (%rax),%rdi
   1136e:	8b b5 f4 eb ff ff    	mov    -0x140c(%rbp),%esi
   11374:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   11378:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   1137c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   11380:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   11384:	e8 97 1d 00 00       	call   13120 <yy_symbol_print>
   11389:	48 8b 05 60 ec 00 00 	mov    0xec60(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   11390:	48 8b 38             	mov    (%rax),%rdi
   11393:	48 8d 35 91 6d 00 00 	lea    0x6d91(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   1139a:	b0 00                	mov    $0x0,%al
   1139c:	e8 8f 1d ff ff       	call   3130 <fprintf@plt>
   113a1:	e9 00 00 00 00       	jmp    113a6 <yyparse+0x606>
   113a6:	e9 00 00 00 00       	jmp    113ab <yyparse+0x60b>
   113ab:	e9 00 00 00 00       	jmp    113b0 <yyparse+0x610>
   113b0:	8b 85 f4 eb ff ff    	mov    -0x140c(%rbp),%eax
   113b6:	03 85 fc eb ff ff    	add    -0x1404(%rbp),%eax
   113bc:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   113c2:	83 bd fc eb ff ff 00 	cmpl   $0x0,-0x1404(%rbp)
   113c9:	0f 8c 2f 00 00 00    	jl     113fe <yyparse+0x65e>
   113cf:	b8 69 01 00 00       	mov    $0x169,%eax
   113d4:	3b 85 fc eb ff ff    	cmp    -0x1404(%rbp),%eax
   113da:	0f 8c 1e 00 00 00    	jl     113fe <yyparse+0x65e>
   113e0:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   113e7:	48 8d 05 92 7d 00 00 	lea    0x7d92(%rip),%rax        # 19180 <yycheck>
   113ee:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   113f2:	3b 85 f4 eb ff ff    	cmp    -0x140c(%rbp),%eax
   113f8:	0f 84 05 00 00 00    	je     11403 <yyparse+0x663>
   113fe:	e9 27 01 00 00       	jmp    1152a <yyparse+0x78a>
   11403:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   1140a:	48 8d 05 df 7e 00 00 	lea    0x7edf(%rip),%rax        # 192f0 <yytable>
   11411:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   11415:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   1141b:	83 bd fc eb ff ff 00 	cmpl   $0x0,-0x1404(%rbp)
   11422:	0f 8f 25 00 00 00    	jg     1144d <yyparse+0x6ad>
   11428:	83 bd fc eb ff ff d7 	cmpl   $0xffffffd7,-0x1404(%rbp)
   1142f:	0f 85 05 00 00 00    	jne    1143a <yyparse+0x69a>
   11435:	e9 4f 15 00 00       	jmp    12989 <yyparse+0x1be9>
   1143a:	31 c0                	xor    %eax,%eax
   1143c:	2b 85 fc eb ff ff    	sub    -0x1404(%rbp),%eax
   11442:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   11448:	e9 09 01 00 00       	jmp    11556 <yyparse+0x7b6>
   1144d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
   11451:	0f 84 09 00 00 00    	je     11460 <yyparse+0x6c0>
   11457:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   1145a:	83 c0 ff             	add    $0xffffffff,%eax
   1145d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   11460:	e9 00 00 00 00       	jmp    11465 <yyparse+0x6c5>
   11465:	83 3d dc ef 00 00 00 	cmpl   $0x0,0xefdc(%rip)        # 20448 <yydebug>
   1146c:	0f 84 5c 00 00 00    	je     114ce <yyparse+0x72e>
   11472:	48 8b 05 77 eb 00 00 	mov    0xeb77(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   11479:	48 8b 38             	mov    (%rax),%rdi
   1147c:	48 8d 35 c3 6d 00 00 	lea    0x6dc3(%rip),%rsi        # 18246 <_IO_stdin_used+0x246>
   11483:	48 8d 15 0a 82 00 00 	lea    0x820a(%rip),%rdx        # 19694 <yyrline+0xb4>
   1148a:	b0 00                	mov    $0x0,%al
   1148c:	e8 9f 1c ff ff       	call   3130 <fprintf@plt>
   11491:	48 8b 05 58 eb 00 00 	mov    0xeb58(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   11498:	48 8b 38             	mov    (%rax),%rdi
   1149b:	8b b5 f4 eb ff ff    	mov    -0x140c(%rbp),%esi
   114a1:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   114a5:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   114a9:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   114ad:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   114b1:	e8 6a 1c 00 00       	call   13120 <yy_symbol_print>
   114b6:	48 8b 05 33 eb 00 00 	mov    0xeb33(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   114bd:	48 8b 38             	mov    (%rax),%rdi
   114c0:	48 8d 35 64 6c 00 00 	lea    0x6c64(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   114c7:	b0 00                	mov    $0x0,%al
   114c9:	e8 62 1c ff ff       	call   3130 <fprintf@plt>
   114ce:	e9 00 00 00 00       	jmp    114d3 <yyparse+0x733>
   114d3:	8b 85 fc eb ff ff    	mov    -0x1404(%rbp),%eax
   114d9:	89 45 c8             	mov    %eax,-0x38(%rbp)
   114dc:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   114e3:	48 89 c1             	mov    %rax,%rcx
   114e6:	48 83 c1 08          	add    $0x8,%rcx
   114ea:	48 89 8d 90 f8 ff ff 	mov    %rcx,-0x770(%rbp)
   114f1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   114f5:	48 89 48 08          	mov    %rcx,0x8(%rax)
   114f9:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   11500:	48 89 c1             	mov    %rax,%rcx
   11503:	48 83 c1 10          	add    $0x10,%rcx
   11507:	48 89 8d 00 ec ff ff 	mov    %rcx,-0x1400(%rbp)
   1150e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   11512:	48 89 48 10          	mov    %rcx,0x10(%rax)
   11516:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1151a:	48 89 48 18          	mov    %rcx,0x18(%rax)
   1151e:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
   11525:	e9 94 f9 ff ff       	jmp    10ebe <yyparse+0x11e>
   1152a:	48 63 4d c8          	movslq -0x38(%rbp),%rcx
   1152e:	48 8d 05 2b 7f 00 00 	lea    0x7f2b(%rip),%rax        # 19460 <yydefact>
   11535:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   11539:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   1153f:	83 bd fc eb ff ff 00 	cmpl   $0x0,-0x1404(%rbp)
   11546:	0f 85 05 00 00 00    	jne    11551 <yyparse+0x7b1>
   1154c:	e9 38 14 00 00       	jmp    12989 <yyparse+0x1be9>
   11551:	e9 00 00 00 00       	jmp    11556 <yyparse+0x7b6>
   11556:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   1155d:	48 8d 05 6c 7f 00 00 	lea    0x7f6c(%rip),%rax        # 194d0 <yyr2>
   11564:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   11568:	89 85 0c eb ff ff    	mov    %eax,-0x14f4(%rbp)
   1156e:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11575:	b9 01 00 00 00       	mov    $0x1,%ecx
   1157a:	2b 8d 0c eb ff ff    	sub    -0x14f4(%rbp),%ecx
   11580:	48 63 c9             	movslq %ecx,%rcx
   11583:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   11587:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1158e:	83 bd 0c eb ff ff 00 	cmpl   $0x0,-0x14f4(%rbp)
   11595:	0f 84 ad 00 00 00    	je     11648 <yyparse+0x8a8>
   1159b:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   115a2:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   115a9:	31 c9                	xor    %ecx,%ecx
   115ab:	48 29 d1             	sub    %rdx,%rcx
   115ae:	48 c1 e1 04          	shl    $0x4,%rcx
   115b2:	48 01 c8             	add    %rcx,%rax
   115b5:	8b 40 10             	mov    0x10(%rax),%eax
   115b8:	89 85 d8 eb ff ff    	mov    %eax,-0x1428(%rbp)
   115be:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   115c5:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   115cc:	31 c9                	xor    %ecx,%ecx
   115ce:	48 29 d1             	sub    %rdx,%rcx
   115d1:	48 c1 e1 04          	shl    $0x4,%rcx
   115d5:	48 01 c8             	add    %rcx,%rax
   115d8:	8b 40 14             	mov    0x14(%rax),%eax
   115db:	89 85 dc eb ff ff    	mov    %eax,-0x1424(%rbp)
   115e1:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   115e8:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   115ef:	31 c9                	xor    %ecx,%ecx
   115f1:	48 29 d1             	sub    %rdx,%rcx
   115f4:	48 c1 e1 04          	shl    $0x4,%rcx
   115f8:	48 01 c8             	add    %rcx,%rax
   115fb:	48 63 8d 0c eb ff ff 	movslq -0x14f4(%rbp),%rcx
   11602:	48 c1 e1 04          	shl    $0x4,%rcx
   11606:	48 01 c8             	add    %rcx,%rax
   11609:	8b 40 08             	mov    0x8(%rax),%eax
   1160c:	89 85 e0 eb ff ff    	mov    %eax,-0x1420(%rbp)
   11612:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   11619:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   11620:	31 c9                	xor    %ecx,%ecx
   11622:	48 29 d1             	sub    %rdx,%rcx
   11625:	48 c1 e1 04          	shl    $0x4,%rcx
   11629:	48 01 c8             	add    %rcx,%rax
   1162c:	48 63 8d 0c eb ff ff 	movslq -0x14f4(%rbp),%rcx
   11633:	48 c1 e1 04          	shl    $0x4,%rcx
   11637:	48 01 c8             	add    %rcx,%rax
   1163a:	8b 40 0c             	mov    0xc(%rax),%eax
   1163d:	89 85 e4 eb ff ff    	mov    %eax,-0x141c(%rbp)
   11643:	e9 52 00 00 00       	jmp    1169a <yyparse+0x8fa>
   11648:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   1164f:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   11656:	31 c9                	xor    %ecx,%ecx
   11658:	48 29 d1             	sub    %rdx,%rcx
   1165b:	48 c1 e1 04          	shl    $0x4,%rcx
   1165f:	48 01 c8             	add    %rcx,%rax
   11662:	8b 40 08             	mov    0x8(%rax),%eax
   11665:	89 85 e0 eb ff ff    	mov    %eax,-0x1420(%rbp)
   1166b:	89 85 d8 eb ff ff    	mov    %eax,-0x1428(%rbp)
   11671:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   11678:	48 63 95 0c eb ff ff 	movslq -0x14f4(%rbp),%rdx
   1167f:	31 c9                	xor    %ecx,%ecx
   11681:	48 29 d1             	sub    %rdx,%rcx
   11684:	48 c1 e1 04          	shl    $0x4,%rcx
   11688:	48 01 c8             	add    %rcx,%rax
   1168b:	8b 40 0c             	mov    0xc(%rax),%eax
   1168e:	89 85 e4 eb ff ff    	mov    %eax,-0x141c(%rbp)
   11694:	89 85 dc eb ff ff    	mov    %eax,-0x1424(%rbp)
   1169a:	e9 00 00 00 00       	jmp    1169f <yyparse+0x8ff>
   1169f:	48 8b 85 d8 eb ff ff 	mov    -0x1428(%rbp),%rax
   116a6:	48 89 85 b0 eb ff ff 	mov    %rax,-0x1450(%rbp)
   116ad:	48 8b 85 e0 eb ff ff 	mov    -0x1420(%rbp),%rax
   116b4:	48 89 85 b8 eb ff ff 	mov    %rax,-0x1448(%rbp)
   116bb:	83 3d 86 ed 00 00 00 	cmpl   $0x0,0xed86(%rip)        # 20448 <yydebug>
   116c2:	0f 84 28 00 00 00    	je     116f0 <yyparse+0x950>
   116c8:	48 8b bd e0 fe ff ff 	mov    -0x120(%rbp),%rdi
   116cf:	48 8b b5 90 f8 ff ff 	mov    -0x770(%rbp),%rsi
   116d6:	48 8b 95 00 ec ff ff 	mov    -0x1400(%rbp),%rdx
   116dd:	8b 8d fc eb ff ff    	mov    -0x1404(%rbp),%ecx
   116e3:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   116e7:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   116eb:	e8 f0 1a 00 00       	call   131e0 <yy_reduce_print>
   116f0:	e9 00 00 00 00       	jmp    116f5 <yyparse+0x955>
   116f5:	8b 85 fc eb ff ff    	mov    -0x1404(%rbp),%eax
   116fb:	83 c0 fe             	add    $0xfffffffe,%eax
   116fe:	89 c1                	mov    %eax,%ecx
   11700:	48 89 8d a0 ea ff ff 	mov    %rcx,-0x1560(%rbp)
   11707:	83 e8 38             	sub    $0x38,%eax
   1170a:	0f 87 71 10 00 00    	ja     12781 <yyparse+0x19e1>
   11710:	48 8b 85 a0 ea ff ff 	mov    -0x1560(%rbp),%rax
   11717:	48 8d 0d 72 77 00 00 	lea    0x7772(%rip),%rcx        # 18e90 <getFreeElement.b+0x690>
   1171e:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   11722:	48 01 c8             	add    %rcx,%rax
   11725:	ff e0                	jmp    *%rax
   11727:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1172e:	48 8b 08             	mov    (%rax),%rcx
   11731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11735:	48 89 48 18          	mov    %rcx,0x18(%rax)
   11739:	e9 48 10 00 00       	jmp    12786 <yyparse+0x19e6>
   1173e:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11745:	48 8b 48 f8          	mov    -0x8(%rax),%rcx
   11749:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1174d:	48 89 48 18          	mov    %rcx,0x18(%rax)
   11751:	e9 30 10 00 00       	jmp    12786 <yyparse+0x19e6>
   11756:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1175a:	48 8b 40 10          	mov    0x10(%rax),%rax
   1175e:	48 89 85 98 ea ff ff 	mov    %rax,-0x1568(%rbp)
   11765:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11769:	48 8b 40 10          	mov    0x10(%rax),%rax
   1176d:	48 89 85 88 ea ff ff 	mov    %rax,-0x1578(%rbp)
   11774:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11778:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1177c:	48 8d 35 31 7f 00 00 	lea    0x7f31(%rip),%rsi        # 196b4 <yyrline+0xd4>
   11783:	e8 a8 a0 ff ff       	call   b830 <slipL_create_IDNode>
   11788:	48 89 85 90 ea ff ff 	mov    %rax,-0x1570(%rbp)
   1178f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11793:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11797:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1179e:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   117a2:	e8 d9 a0 ff ff       	call   b880 <slipL_create_ListNode>
   117a7:	48 8b bd 88 ea ff ff 	mov    -0x1578(%rbp),%rdi
   117ae:	48 8b 95 90 ea ff ff 	mov    -0x1570(%rbp),%rdx
   117b5:	48 89 c1             	mov    %rax,%rcx
   117b8:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   117bf:	4c 8b 00             	mov    (%rax),%r8
   117c2:	be 03 00 00 00       	mov    $0x3,%esi
   117c7:	b0 00                	mov    $0x0,%al
   117c9:	e8 c2 a1 ff ff       	call   b990 <slipL_makeList>
   117ce:	48 8b bd 98 ea ff ff 	mov    -0x1568(%rbp),%rdi
   117d5:	48 89 c6             	mov    %rax,%rsi
   117d8:	e8 a3 a0 ff ff       	call   b880 <slipL_create_ListNode>
   117dd:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   117e4:	e9 9d 0f 00 00       	jmp    12786 <yyparse+0x19e6>
   117e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   117ed:	48 8b 40 10          	mov    0x10(%rax),%rax
   117f1:	48 89 85 80 ea ff ff 	mov    %rax,-0x1580(%rbp)
   117f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   117fc:	48 8b 40 10          	mov    0x10(%rax),%rax
   11800:	48 89 85 68 ea ff ff 	mov    %rax,-0x1598(%rbp)
   11807:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1180b:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1180f:	48 8d 35 9e 7e 00 00 	lea    0x7e9e(%rip),%rsi        # 196b4 <yyrline+0xd4>
   11816:	e8 15 a0 ff ff       	call   b830 <slipL_create_IDNode>
   1181b:	48 89 85 70 ea ff ff 	mov    %rax,-0x1590(%rbp)
   11822:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11826:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1182a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11831:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   11835:	e8 46 a0 ff ff       	call   b880 <slipL_create_ListNode>
   1183a:	48 89 85 78 ea ff ff 	mov    %rax,-0x1588(%rbp)
   11841:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11845:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11849:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11850:	48 8b 30             	mov    (%rax),%rsi
   11853:	e8 28 a0 ff ff       	call   b880 <slipL_create_ListNode>
   11858:	48 8b bd 68 ea ff ff 	mov    -0x1598(%rbp),%rdi
   1185f:	48 8b 95 70 ea ff ff 	mov    -0x1590(%rbp),%rdx
   11866:	48 8b 8d 78 ea ff ff 	mov    -0x1588(%rbp),%rcx
   1186d:	49 89 c0             	mov    %rax,%r8
   11870:	be 03 00 00 00       	mov    $0x3,%esi
   11875:	b0 00                	mov    $0x0,%al
   11877:	e8 14 a1 ff ff       	call   b990 <slipL_makeList>
   1187c:	48 8b bd 80 ea ff ff 	mov    -0x1580(%rbp),%rdi
   11883:	48 89 c6             	mov    %rax,%rsi
   11886:	e8 f5 9f ff ff       	call   b880 <slipL_create_ListNode>
   1188b:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11892:	e9 ef 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   11897:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1189e:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   118a2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   118a9:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   118b0:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
   118b4:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   118bb:	48 8b 30             	mov    (%rax),%rsi
   118be:	e8 4d a2 ff ff       	call   bb10 <slipL_concat>
   118c3:	e9 be 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   118c8:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   118cf:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   118d3:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   118da:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   118e1:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
   118e5:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   118ec:	48 8b 30             	mov    (%rax),%rsi
   118ef:	e8 1c a2 ff ff       	call   bb10 <slipL_concat>
   118f4:	e9 8d 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   118f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   118fd:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11901:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11908:	48 8b 30             	mov    (%rax),%rsi
   1190b:	e8 20 9f ff ff       	call   b830 <slipL_create_IDNode>
   11910:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11917:	e9 6a 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   1191c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11920:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11924:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1192b:	48 8b 30             	mov    (%rax),%rsi
   1192e:	e8 8d 9e ff ff       	call   b7c0 <slipL_create_StringNode>
   11933:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1193a:	e9 47 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   1193f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11943:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11947:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1194e:	48 8b 30             	mov    (%rax),%rsi
   11951:	e8 fa 9f ff ff       	call   b950 <slipL_create_FloatNodeFromStr>
   11956:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1195d:	e9 24 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   11962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11966:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1196a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11971:	48 8b 30             	mov    (%rax),%rsi
   11974:	e8 97 9f ff ff       	call   b910 <slipL_create_IntNodeFromStr>
   11979:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11980:	e9 01 0e 00 00       	jmp    12786 <yyparse+0x19e6>
   11985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11989:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1198d:	e8 3e 9f ff ff       	call   b8d0 <slipL_create_NilNode>
   11992:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11999:	e9 e8 0d 00 00       	jmp    12786 <yyparse+0x19e6>
   1199e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   119a2:	48 8b 78 10          	mov    0x10(%rax),%rdi
   119a6:	48 8d 35 40 68 00 00 	lea    0x6840(%rip),%rsi        # 181ed <_IO_stdin_used+0x1ed>
   119ad:	e8 5e 9f ff ff       	call   b910 <slipL_create_IntNodeFromStr>
   119b2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   119b9:	e9 c8 0d 00 00       	jmp    12786 <yyparse+0x19e6>
   119be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   119c2:	48 8b 78 10          	mov    0x10(%rax),%rdi
   119c6:	48 8d 35 73 6f 00 00 	lea    0x6f73(%rip),%rsi        # 18940 <getFreeElement.b+0x140>
   119cd:	e8 3e 9f ff ff       	call   b910 <slipL_create_IntNodeFromStr>
   119d2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   119d9:	e9 a8 0d 00 00       	jmp    12786 <yyparse+0x19e6>
   119de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   119e2:	48 8b 40 10          	mov    0x10(%rax),%rax
   119e6:	48 89 85 60 ea ff ff 	mov    %rax,-0x15a0(%rbp)
   119ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   119f1:	48 8b 40 10          	mov    0x10(%rax),%rax
   119f5:	48 89 85 58 ea ff ff 	mov    %rax,-0x15a8(%rbp)
   119fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11a00:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11a04:	48 8d 35 ba 67 00 00 	lea    0x67ba(%rip),%rsi        # 181c5 <_IO_stdin_used+0x1c5>
   11a0b:	e8 20 9e ff ff       	call   b830 <slipL_create_IDNode>
   11a10:	48 8b bd 58 ea ff ff 	mov    -0x15a8(%rbp),%rdi
   11a17:	48 89 c2             	mov    %rax,%rdx
   11a1a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11a21:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11a25:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11a2c:	4c 8b 00             	mov    (%rax),%r8
   11a2f:	be 03 00 00 00       	mov    $0x3,%esi
   11a34:	b0 00                	mov    $0x0,%al
   11a36:	e8 55 9f ff ff       	call   b990 <slipL_makeList>
   11a3b:	48 8b bd 60 ea ff ff 	mov    -0x15a0(%rbp),%rdi
   11a42:	48 89 c6             	mov    %rax,%rsi
   11a45:	e8 36 9e ff ff       	call   b880 <slipL_create_ListNode>
   11a4a:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11a51:	e9 30 0d 00 00       	jmp    12786 <yyparse+0x19e6>
   11a56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11a5a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11a5e:	48 89 85 50 ea ff ff 	mov    %rax,-0x15b0(%rbp)
   11a65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11a69:	48 8b 40 10          	mov    0x10(%rax),%rax
   11a6d:	48 89 85 48 ea ff ff 	mov    %rax,-0x15b8(%rbp)
   11a74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11a78:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11a7c:	48 8d 35 44 67 00 00 	lea    0x6744(%rip),%rsi        # 181c7 <_IO_stdin_used+0x1c7>
   11a83:	e8 a8 9d ff ff       	call   b830 <slipL_create_IDNode>
   11a88:	48 8b bd 48 ea ff ff 	mov    -0x15b8(%rbp),%rdi
   11a8f:	48 89 c2             	mov    %rax,%rdx
   11a92:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11a99:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11a9d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11aa4:	4c 8b 00             	mov    (%rax),%r8
   11aa7:	be 03 00 00 00       	mov    $0x3,%esi
   11aac:	b0 00                	mov    $0x0,%al
   11aae:	e8 dd 9e ff ff       	call   b990 <slipL_makeList>
   11ab3:	48 8b bd 50 ea ff ff 	mov    -0x15b0(%rbp),%rdi
   11aba:	48 89 c6             	mov    %rax,%rsi
   11abd:	e8 be 9d ff ff       	call   b880 <slipL_create_ListNode>
   11ac2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11ac9:	e9 b8 0c 00 00       	jmp    12786 <yyparse+0x19e6>
   11ace:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11ad2:	48 8b 40 10          	mov    0x10(%rax),%rax
   11ad6:	48 89 85 40 ea ff ff 	mov    %rax,-0x15c0(%rbp)
   11add:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11ae1:	48 8b 40 10          	mov    0x10(%rax),%rax
   11ae5:	48 89 85 38 ea ff ff 	mov    %rax,-0x15c8(%rbp)
   11aec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11af0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11af4:	48 8d 35 ce 66 00 00 	lea    0x66ce(%rip),%rsi        # 181c9 <_IO_stdin_used+0x1c9>
   11afb:	e8 30 9d ff ff       	call   b830 <slipL_create_IDNode>
   11b00:	48 8b bd 38 ea ff ff 	mov    -0x15c8(%rbp),%rdi
   11b07:	48 89 c2             	mov    %rax,%rdx
   11b0a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11b11:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11b15:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11b1c:	4c 8b 00             	mov    (%rax),%r8
   11b1f:	be 03 00 00 00       	mov    $0x3,%esi
   11b24:	b0 00                	mov    $0x0,%al
   11b26:	e8 65 9e ff ff       	call   b990 <slipL_makeList>
   11b2b:	48 8b bd 40 ea ff ff 	mov    -0x15c0(%rbp),%rdi
   11b32:	48 89 c6             	mov    %rax,%rsi
   11b35:	e8 46 9d ff ff       	call   b880 <slipL_create_ListNode>
   11b3a:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11b41:	e9 40 0c 00 00       	jmp    12786 <yyparse+0x19e6>
   11b46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11b4a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11b4e:	48 89 85 30 ea ff ff 	mov    %rax,-0x15d0(%rbp)
   11b55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11b59:	48 8b 40 10          	mov    0x10(%rax),%rax
   11b5d:	48 89 85 28 ea ff ff 	mov    %rax,-0x15d8(%rbp)
   11b64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11b68:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11b6c:	48 8d 35 59 66 00 00 	lea    0x6659(%rip),%rsi        # 181cc <_IO_stdin_used+0x1cc>
   11b73:	e8 b8 9c ff ff       	call   b830 <slipL_create_IDNode>
   11b78:	48 8b bd 28 ea ff ff 	mov    -0x15d8(%rbp),%rdi
   11b7f:	48 89 c2             	mov    %rax,%rdx
   11b82:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11b89:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11b8d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11b94:	4c 8b 00             	mov    (%rax),%r8
   11b97:	be 03 00 00 00       	mov    $0x3,%esi
   11b9c:	b0 00                	mov    $0x0,%al
   11b9e:	e8 ed 9d ff ff       	call   b990 <slipL_makeList>
   11ba3:	48 8b bd 30 ea ff ff 	mov    -0x15d0(%rbp),%rdi
   11baa:	48 89 c6             	mov    %rax,%rsi
   11bad:	e8 ce 9c ff ff       	call   b880 <slipL_create_ListNode>
   11bb2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11bb9:	e9 c8 0b 00 00       	jmp    12786 <yyparse+0x19e6>
   11bbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11bc2:	48 8b 40 10          	mov    0x10(%rax),%rax
   11bc6:	48 89 85 20 ea ff ff 	mov    %rax,-0x15e0(%rbp)
   11bcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11bd1:	48 8b 40 10          	mov    0x10(%rax),%rax
   11bd5:	48 89 85 18 ea ff ff 	mov    %rax,-0x15e8(%rbp)
   11bdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11be0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11be4:	48 8d 35 eb 65 00 00 	lea    0x65eb(%rip),%rsi        # 181d6 <_IO_stdin_used+0x1d6>
   11beb:	e8 40 9c ff ff       	call   b830 <slipL_create_IDNode>
   11bf0:	48 8b bd 18 ea ff ff 	mov    -0x15e8(%rbp),%rdi
   11bf7:	48 89 c2             	mov    %rax,%rdx
   11bfa:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11c01:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11c05:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11c0c:	4c 8b 00             	mov    (%rax),%r8
   11c0f:	be 03 00 00 00       	mov    $0x3,%esi
   11c14:	b0 00                	mov    $0x0,%al
   11c16:	e8 75 9d ff ff       	call   b990 <slipL_makeList>
   11c1b:	48 8b bd 20 ea ff ff 	mov    -0x15e0(%rbp),%rdi
   11c22:	48 89 c6             	mov    %rax,%rsi
   11c25:	e8 56 9c ff ff       	call   b880 <slipL_create_ListNode>
   11c2a:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11c31:	e9 50 0b 00 00       	jmp    12786 <yyparse+0x19e6>
   11c36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11c3a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11c3e:	48 89 85 10 ea ff ff 	mov    %rax,-0x15f0(%rbp)
   11c45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11c49:	48 8b 40 10          	mov    0x10(%rax),%rax
   11c4d:	48 89 85 08 ea ff ff 	mov    %rax,-0x15f8(%rbp)
   11c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11c58:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11c5c:	48 8d 35 75 65 00 00 	lea    0x6575(%rip),%rsi        # 181d8 <_IO_stdin_used+0x1d8>
   11c63:	e8 c8 9b ff ff       	call   b830 <slipL_create_IDNode>
   11c68:	48 8b bd 08 ea ff ff 	mov    -0x15f8(%rbp),%rdi
   11c6f:	48 89 c2             	mov    %rax,%rdx
   11c72:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11c79:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11c7d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11c84:	4c 8b 00             	mov    (%rax),%r8
   11c87:	be 03 00 00 00       	mov    $0x3,%esi
   11c8c:	b0 00                	mov    $0x0,%al
   11c8e:	e8 fd 9c ff ff       	call   b990 <slipL_makeList>
   11c93:	48 8b bd 10 ea ff ff 	mov    -0x15f0(%rbp),%rdi
   11c9a:	48 89 c6             	mov    %rax,%rsi
   11c9d:	e8 de 9b ff ff       	call   b880 <slipL_create_ListNode>
   11ca2:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11ca9:	e9 d8 0a 00 00       	jmp    12786 <yyparse+0x19e6>
   11cae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11cb2:	48 8b 40 10          	mov    0x10(%rax),%rax
   11cb6:	48 89 85 00 ea ff ff 	mov    %rax,-0x1600(%rbp)
   11cbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11cc1:	48 8b 40 10          	mov    0x10(%rax),%rax
   11cc5:	48 89 85 f8 e9 ff ff 	mov    %rax,-0x1608(%rbp)
   11ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11cd0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11cd4:	48 8d 35 f8 64 00 00 	lea    0x64f8(%rip),%rsi        # 181d3 <_IO_stdin_used+0x1d3>
   11cdb:	e8 50 9b ff ff       	call   b830 <slipL_create_IDNode>
   11ce0:	48 8b bd f8 e9 ff ff 	mov    -0x1608(%rbp),%rdi
   11ce7:	48 89 c2             	mov    %rax,%rdx
   11cea:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11cf1:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11cf5:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11cfc:	4c 8b 00             	mov    (%rax),%r8
   11cff:	be 03 00 00 00       	mov    $0x3,%esi
   11d04:	b0 00                	mov    $0x0,%al
   11d06:	e8 85 9c ff ff       	call   b990 <slipL_makeList>
   11d0b:	48 8b bd 00 ea ff ff 	mov    -0x1600(%rbp),%rdi
   11d12:	48 89 c6             	mov    %rax,%rsi
   11d15:	e8 66 9b ff ff       	call   b880 <slipL_create_ListNode>
   11d1a:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11d21:	e9 60 0a 00 00       	jmp    12786 <yyparse+0x19e6>
   11d26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d2a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11d2e:	48 89 85 f0 e9 ff ff 	mov    %rax,-0x1610(%rbp)
   11d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d39:	48 8b 40 10          	mov    0x10(%rax),%rax
   11d3d:	48 89 85 e8 e9 ff ff 	mov    %rax,-0x1618(%rbp)
   11d44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d48:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11d4c:	48 8d 35 87 64 00 00 	lea    0x6487(%rip),%rsi        # 181da <_IO_stdin_used+0x1da>
   11d53:	e8 d8 9a ff ff       	call   b830 <slipL_create_IDNode>
   11d58:	48 8b bd e8 e9 ff ff 	mov    -0x1618(%rbp),%rdi
   11d5f:	48 89 c2             	mov    %rax,%rdx
   11d62:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11d69:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11d6d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11d74:	4c 8b 00             	mov    (%rax),%r8
   11d77:	be 03 00 00 00       	mov    $0x3,%esi
   11d7c:	b0 00                	mov    $0x0,%al
   11d7e:	e8 0d 9c ff ff       	call   b990 <slipL_makeList>
   11d83:	48 8b bd f0 e9 ff ff 	mov    -0x1610(%rbp),%rdi
   11d8a:	48 89 c6             	mov    %rax,%rsi
   11d8d:	e8 ee 9a ff ff       	call   b880 <slipL_create_ListNode>
   11d92:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11d99:	e9 e8 09 00 00       	jmp    12786 <yyparse+0x19e6>
   11d9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11da2:	48 8b 40 10          	mov    0x10(%rax),%rax
   11da6:	48 89 85 e0 e9 ff ff 	mov    %rax,-0x1620(%rbp)
   11dad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11db1:	48 8b 40 10          	mov    0x10(%rax),%rax
   11db5:	48 89 85 d8 e9 ff ff 	mov    %rax,-0x1628(%rbp)
   11dbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11dc0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11dc4:	48 8d 35 05 64 00 00 	lea    0x6405(%rip),%rsi        # 181d0 <_IO_stdin_used+0x1d0>
   11dcb:	e8 60 9a ff ff       	call   b830 <slipL_create_IDNode>
   11dd0:	48 8b bd d8 e9 ff ff 	mov    -0x1628(%rbp),%rdi
   11dd7:	48 89 c2             	mov    %rax,%rdx
   11dda:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11de1:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11de5:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11dec:	4c 8b 00             	mov    (%rax),%r8
   11def:	be 03 00 00 00       	mov    $0x3,%esi
   11df4:	b0 00                	mov    $0x0,%al
   11df6:	e8 95 9b ff ff       	call   b990 <slipL_makeList>
   11dfb:	48 8b bd e0 e9 ff ff 	mov    -0x1620(%rbp),%rdi
   11e02:	48 89 c6             	mov    %rax,%rsi
   11e05:	e8 76 9a ff ff       	call   b880 <slipL_create_ListNode>
   11e0a:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11e11:	e9 70 09 00 00       	jmp    12786 <yyparse+0x19e6>
   11e16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e1a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11e1e:	48 89 85 d0 e9 ff ff 	mov    %rax,-0x1630(%rbp)
   11e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e29:	48 8b 40 10          	mov    0x10(%rax),%rax
   11e2d:	48 89 85 c8 e9 ff ff 	mov    %rax,-0x1638(%rbp)
   11e34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e38:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11e3c:	48 8d 35 9a 63 00 00 	lea    0x639a(%rip),%rsi        # 181dd <_IO_stdin_used+0x1dd>
   11e43:	e8 e8 99 ff ff       	call   b830 <slipL_create_IDNode>
   11e48:	48 8b bd c8 e9 ff ff 	mov    -0x1638(%rbp),%rdi
   11e4f:	48 89 c2             	mov    %rax,%rdx
   11e52:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11e59:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11e5d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11e64:	4c 8b 00             	mov    (%rax),%r8
   11e67:	be 03 00 00 00       	mov    $0x3,%esi
   11e6c:	b0 00                	mov    $0x0,%al
   11e6e:	e8 1d 9b ff ff       	call   b990 <slipL_makeList>
   11e73:	48 8b bd d0 e9 ff ff 	mov    -0x1630(%rbp),%rdi
   11e7a:	48 89 c6             	mov    %rax,%rsi
   11e7d:	e8 fe 99 ff ff       	call   b880 <slipL_create_ListNode>
   11e82:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11e89:	e9 f8 08 00 00       	jmp    12786 <yyparse+0x19e6>
   11e8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11e92:	48 8b 40 10          	mov    0x10(%rax),%rax
   11e96:	48 89 85 c0 e9 ff ff 	mov    %rax,-0x1640(%rbp)
   11e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11ea1:	48 8b 40 10          	mov    0x10(%rax),%rax
   11ea5:	48 89 85 b8 e9 ff ff 	mov    %rax,-0x1648(%rbp)
   11eac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11eb0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11eb4:	48 8d 35 27 63 00 00 	lea    0x6327(%rip),%rsi        # 181e2 <_IO_stdin_used+0x1e2>
   11ebb:	e8 70 99 ff ff       	call   b830 <slipL_create_IDNode>
   11ec0:	48 8b bd b8 e9 ff ff 	mov    -0x1648(%rbp),%rdi
   11ec7:	48 89 c2             	mov    %rax,%rdx
   11eca:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11ed1:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11ed5:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11edc:	4c 8b 00             	mov    (%rax),%r8
   11edf:	be 03 00 00 00       	mov    $0x3,%esi
   11ee4:	b0 00                	mov    $0x0,%al
   11ee6:	e8 a5 9a ff ff       	call   b990 <slipL_makeList>
   11eeb:	48 8b bd c0 e9 ff ff 	mov    -0x1640(%rbp),%rdi
   11ef2:	48 89 c6             	mov    %rax,%rsi
   11ef5:	e8 86 99 ff ff       	call   b880 <slipL_create_ListNode>
   11efa:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11f01:	e9 80 08 00 00       	jmp    12786 <yyparse+0x19e6>
   11f06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f0a:	48 8b 40 10          	mov    0x10(%rax),%rax
   11f0e:	48 89 85 b0 e9 ff ff 	mov    %rax,-0x1650(%rbp)
   11f15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f19:	48 8b 40 10          	mov    0x10(%rax),%rax
   11f1d:	48 89 85 a8 e9 ff ff 	mov    %rax,-0x1658(%rbp)
   11f24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f28:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11f2c:	48 8d 35 b1 62 00 00 	lea    0x62b1(%rip),%rsi        # 181e4 <_IO_stdin_used+0x1e4>
   11f33:	e8 f8 98 ff ff       	call   b830 <slipL_create_IDNode>
   11f38:	48 8b bd a8 e9 ff ff 	mov    -0x1658(%rbp),%rdi
   11f3f:	48 89 c2             	mov    %rax,%rdx
   11f42:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11f49:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   11f4d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11f54:	4c 8b 00             	mov    (%rax),%r8
   11f57:	be 03 00 00 00       	mov    $0x3,%esi
   11f5c:	b0 00                	mov    $0x0,%al
   11f5e:	e8 2d 9a ff ff       	call   b990 <slipL_makeList>
   11f63:	48 8b bd b0 e9 ff ff 	mov    -0x1650(%rbp),%rdi
   11f6a:	48 89 c6             	mov    %rax,%rsi
   11f6d:	e8 0e 99 ff ff       	call   b880 <slipL_create_ListNode>
   11f72:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   11f79:	e9 08 08 00 00       	jmp    12786 <yyparse+0x19e6>
   11f7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f82:	48 8b 40 10          	mov    0x10(%rax),%rax
   11f86:	48 89 85 a0 e9 ff ff 	mov    %rax,-0x1660(%rbp)
   11f8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11f91:	48 8b 40 10          	mov    0x10(%rax),%rax
   11f95:	48 89 85 88 e9 ff ff 	mov    %rax,-0x1678(%rbp)
   11f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11fa0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11fa4:	48 8d 35 18 62 00 00 	lea    0x6218(%rip),%rsi        # 181c3 <_IO_stdin_used+0x1c3>
   11fab:	e8 80 98 ff ff       	call   b830 <slipL_create_IDNode>
   11fb0:	48 89 85 90 e9 ff ff 	mov    %rax,-0x1670(%rbp)
   11fb7:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11fbe:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   11fc2:	48 89 85 98 e9 ff ff 	mov    %rax,-0x1668(%rbp)
   11fc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11fcd:	48 8b 78 10          	mov    0x10(%rax),%rdi
   11fd1:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   11fd8:	48 8b 30             	mov    (%rax),%rsi
   11fdb:	e8 50 98 ff ff       	call   b830 <slipL_create_IDNode>
   11fe0:	48 8b bd 88 e9 ff ff 	mov    -0x1678(%rbp),%rdi
   11fe7:	48 8b 95 90 e9 ff ff 	mov    -0x1670(%rbp),%rdx
   11fee:	48 8b 8d 98 e9 ff ff 	mov    -0x1668(%rbp),%rcx
   11ff5:	49 89 c0             	mov    %rax,%r8
   11ff8:	be 03 00 00 00       	mov    $0x3,%esi
   11ffd:	b0 00                	mov    $0x0,%al
   11fff:	e8 8c 99 ff ff       	call   b990 <slipL_makeList>
   12004:	48 8b bd a0 e9 ff ff 	mov    -0x1660(%rbp),%rdi
   1200b:	48 89 c6             	mov    %rax,%rsi
   1200e:	e8 6d 98 ff ff       	call   b880 <slipL_create_ListNode>
   12013:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1201a:	e9 67 07 00 00       	jmp    12786 <yyparse+0x19e6>
   1201f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12023:	48 8b 40 10          	mov    0x10(%rax),%rax
   12027:	48 89 85 80 e9 ff ff 	mov    %rax,-0x1680(%rbp)
   1202e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12032:	48 8b 40 10          	mov    0x10(%rax),%rax
   12036:	48 89 85 78 e9 ff ff 	mov    %rax,-0x1688(%rbp)
   1203d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12041:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12045:	48 8d 35 34 67 00 00 	lea    0x6734(%rip),%rsi        # 18780 <_IO_stdin_used+0x780>
   1204c:	e8 df 97 ff ff       	call   b830 <slipL_create_IDNode>
   12051:	48 8b bd 78 e9 ff ff 	mov    -0x1688(%rbp),%rdi
   12058:	48 89 c2             	mov    %rax,%rdx
   1205b:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12062:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
   12066:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1206d:	4c 8b 00             	mov    (%rax),%r8
   12070:	be 03 00 00 00       	mov    $0x3,%esi
   12075:	b0 00                	mov    $0x0,%al
   12077:	e8 14 99 ff ff       	call   b990 <slipL_makeList>
   1207c:	48 8b bd 80 e9 ff ff 	mov    -0x1680(%rbp),%rdi
   12083:	48 89 c6             	mov    %rax,%rsi
   12086:	e8 f5 97 ff ff       	call   b880 <slipL_create_ListNode>
   1208b:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12092:	e9 ef 06 00 00       	jmp    12786 <yyparse+0x19e6>
   12097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1209b:	48 8b 40 10          	mov    0x10(%rax),%rax
   1209f:	48 89 85 70 e9 ff ff 	mov    %rax,-0x1690(%rbp)
   120a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   120aa:	48 8b 40 10          	mov    0x10(%rax),%rax
   120ae:	48 89 85 68 e9 ff ff 	mov    %rax,-0x1698(%rbp)
   120b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   120b9:	48 8b 78 10          	mov    0x10(%rax),%rdi
   120bd:	48 8d 35 1c 61 00 00 	lea    0x611c(%rip),%rsi        # 181e0 <_IO_stdin_used+0x1e0>
   120c4:	e8 67 97 ff ff       	call   b830 <slipL_create_IDNode>
   120c9:	48 8b bd 68 e9 ff ff 	mov    -0x1698(%rbp),%rdi
   120d0:	48 89 c2             	mov    %rax,%rdx
   120d3:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   120da:	48 8b 08             	mov    (%rax),%rcx
   120dd:	be 02 00 00 00       	mov    $0x2,%esi
   120e2:	b0 00                	mov    $0x0,%al
   120e4:	e8 a7 98 ff ff       	call   b990 <slipL_makeList>
   120e9:	48 8b bd 70 e9 ff ff 	mov    -0x1690(%rbp),%rdi
   120f0:	48 89 c6             	mov    %rax,%rsi
   120f3:	e8 88 97 ff ff       	call   b880 <slipL_create_ListNode>
   120f8:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   120ff:	e9 82 06 00 00       	jmp    12786 <yyparse+0x19e6>
   12104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12108:	48 8b 40 10          	mov    0x10(%rax),%rax
   1210c:	48 89 85 60 e9 ff ff 	mov    %rax,-0x16a0(%rbp)
   12113:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12117:	48 8b 40 10          	mov    0x10(%rax),%rax
   1211b:	48 89 85 50 e9 ff ff 	mov    %rax,-0x16b0(%rbp)
   12122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12126:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1212a:	48 8d 35 96 60 00 00 	lea    0x6096(%rip),%rsi        # 181c7 <_IO_stdin_used+0x1c7>
   12131:	e8 fa 96 ff ff       	call   b830 <slipL_create_IDNode>
   12136:	48 89 85 58 e9 ff ff 	mov    %rax,-0x16a8(%rbp)
   1213d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12141:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12145:	48 8d 35 f4 67 00 00 	lea    0x67f4(%rip),%rsi        # 18940 <getFreeElement.b+0x140>
   1214c:	e8 bf 97 ff ff       	call   b910 <slipL_create_IntNodeFromStr>
   12151:	48 8b bd 50 e9 ff ff 	mov    -0x16b0(%rbp),%rdi
   12158:	48 8b 95 58 e9 ff ff 	mov    -0x16a8(%rbp),%rdx
   1215f:	48 89 c1             	mov    %rax,%rcx
   12162:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12169:	4c 8b 00             	mov    (%rax),%r8
   1216c:	be 03 00 00 00       	mov    $0x3,%esi
   12171:	b0 00                	mov    $0x0,%al
   12173:	e8 18 98 ff ff       	call   b990 <slipL_makeList>
   12178:	48 8b bd 60 e9 ff ff 	mov    -0x16a0(%rbp),%rdi
   1217f:	48 89 c6             	mov    %rax,%rsi
   12182:	e8 f9 96 ff ff       	call   b880 <slipL_create_ListNode>
   12187:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1218e:	e9 f3 05 00 00       	jmp    12786 <yyparse+0x19e6>
   12193:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1219a:	48 8b 00             	mov    (%rax),%rax
   1219d:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   121a4:	e9 dd 05 00 00       	jmp    12786 <yyparse+0x19e6>
   121a9:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   121b0:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   121b4:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   121bb:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   121c2:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
   121c6:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   121cd:	48 8b 30             	mov    (%rax),%rsi
   121d0:	e8 3b 99 ff ff       	call   bb10 <slipL_concat>
   121d5:	e9 ac 05 00 00       	jmp    12786 <yyparse+0x19e6>
   121da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   121de:	48 8b 78 10          	mov    0x10(%rax),%rdi
   121e2:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   121e9:	48 8b 30             	mov    (%rax),%rsi
   121ec:	e8 8f 96 ff ff       	call   b880 <slipL_create_ListNode>
   121f1:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   121f8:	e9 89 05 00 00       	jmp    12786 <yyparse+0x19e6>
   121fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12201:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12205:	48 8d 35 91 74 00 00 	lea    0x7491(%rip),%rsi        # 1969d <yyrline+0xbd>
   1220c:	e8 1f 96 ff ff       	call   b830 <slipL_create_IDNode>
   12211:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12218:	e9 69 05 00 00       	jmp    12786 <yyparse+0x19e6>
   1221d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12221:	48 8b 40 10          	mov    0x10(%rax),%rax
   12225:	48 89 85 40 e9 ff ff 	mov    %rax,-0x16c0(%rbp)
   1222c:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12233:	48 8b 40 f8          	mov    -0x8(%rax),%rax
   12237:	48 89 85 48 e9 ff ff 	mov    %rax,-0x16b8(%rbp)
   1223e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12242:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12246:	48 8d 35 50 74 00 00 	lea    0x7450(%rip),%rsi        # 1969d <yyrline+0xbd>
   1224d:	e8 de 95 ff ff       	call   b830 <slipL_create_IDNode>
   12252:	48 8b bd 40 e9 ff ff 	mov    -0x16c0(%rbp),%rdi
   12259:	48 8b 95 48 e9 ff ff 	mov    -0x16b8(%rbp),%rdx
   12260:	48 89 c1             	mov    %rax,%rcx
   12263:	be 02 00 00 00       	mov    $0x2,%esi
   12268:	b0 00                	mov    $0x0,%al
   1226a:	e8 21 97 ff ff       	call   b990 <slipL_makeList>
   1226f:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12276:	e9 0b 05 00 00       	jmp    12786 <yyparse+0x19e6>
   1227b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1227f:	48 8b 40 10          	mov    0x10(%rax),%rax
   12283:	48 89 85 38 e9 ff ff 	mov    %rax,-0x16c8(%rbp)
   1228a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1228e:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12292:	48 8d 35 04 74 00 00 	lea    0x7404(%rip),%rsi        # 1969d <yyrline+0xbd>
   12299:	e8 92 95 ff ff       	call   b830 <slipL_create_IDNode>
   1229e:	48 8b bd 38 e9 ff ff 	mov    -0x16c8(%rbp),%rdi
   122a5:	48 89 c2             	mov    %rax,%rdx
   122a8:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   122af:	48 8b 08             	mov    (%rax),%rcx
   122b2:	be 02 00 00 00       	mov    $0x2,%esi
   122b7:	b0 00                	mov    $0x0,%al
   122b9:	e8 d2 96 ff ff       	call   b990 <slipL_makeList>
   122be:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   122c5:	e9 bc 04 00 00       	jmp    12786 <yyparse+0x19e6>
   122ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   122ce:	48 8b 40 10          	mov    0x10(%rax),%rax
   122d2:	48 89 85 28 e9 ff ff 	mov    %rax,-0x16d8(%rbp)
   122d9:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   122e0:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   122e4:	48 89 85 30 e9 ff ff 	mov    %rax,-0x16d0(%rbp)
   122eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   122ef:	48 8b 78 10          	mov    0x10(%rax),%rdi
   122f3:	48 8d 35 a3 73 00 00 	lea    0x73a3(%rip),%rsi        # 1969d <yyrline+0xbd>
   122fa:	e8 31 95 ff ff       	call   b830 <slipL_create_IDNode>
   122ff:	48 8b bd 28 e9 ff ff 	mov    -0x16d8(%rbp),%rdi
   12306:	48 8b 95 30 e9 ff ff 	mov    -0x16d0(%rbp),%rdx
   1230d:	48 89 c1             	mov    %rax,%rcx
   12310:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12317:	4c 8b 00             	mov    (%rax),%r8
   1231a:	be 03 00 00 00       	mov    $0x3,%esi
   1231f:	b0 00                	mov    $0x0,%al
   12321:	e8 6a 96 ff ff       	call   b990 <slipL_makeList>
   12326:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1232d:	e9 54 04 00 00       	jmp    12786 <yyparse+0x19e6>
   12332:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12339:	48 8b 00             	mov    (%rax),%rax
   1233c:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12343:	e9 3e 04 00 00       	jmp    12786 <yyparse+0x19e6>
   12348:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1234f:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   12353:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1235a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12361:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
   12365:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1236c:	48 8b 30             	mov    (%rax),%rsi
   1236f:	e8 9c 97 ff ff       	call   bb10 <slipL_concat>
   12374:	e9 0d 04 00 00       	jmp    12786 <yyparse+0x19e6>
   12379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1237d:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12381:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12388:	48 8b 70 f8          	mov    -0x8(%rax),%rsi
   1238c:	e8 ef 94 ff ff       	call   b880 <slipL_create_ListNode>
   12391:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12398:	e9 e9 03 00 00       	jmp    12786 <yyparse+0x19e6>
   1239d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123a1:	48 8b 40 10          	mov    0x10(%rax),%rax
   123a5:	48 89 85 20 e9 ff ff 	mov    %rax,-0x16e0(%rbp)
   123ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123b0:	48 8b 78 10          	mov    0x10(%rax),%rdi
   123b4:	e8 17 95 ff ff       	call   b8d0 <slipL_create_NilNode>
   123b9:	48 8b bd 20 e9 ff ff 	mov    -0x16e0(%rbp),%rdi
   123c0:	48 89 c6             	mov    %rax,%rsi
   123c3:	e8 b8 94 ff ff       	call   b880 <slipL_create_ListNode>
   123c8:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   123cf:	e9 b2 03 00 00       	jmp    12786 <yyparse+0x19e6>
   123d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123d8:	48 8b 40 10          	mov    0x10(%rax),%rax
   123dc:	48 89 85 18 e9 ff ff 	mov    %rax,-0x16e8(%rbp)
   123e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123e7:	48 8b 40 10          	mov    0x10(%rax),%rax
   123eb:	48 89 85 10 e9 ff ff 	mov    %rax,-0x16f0(%rbp)
   123f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123f6:	48 8b 78 10          	mov    0x10(%rax),%rdi
   123fa:	48 8d 35 9e 72 00 00 	lea    0x729e(%rip),%rsi        # 1969f <yyrline+0xbf>
   12401:	e8 2a 94 ff ff       	call   b830 <slipL_create_IDNode>
   12406:	48 8b bd 10 e9 ff ff 	mov    -0x16f0(%rbp),%rdi
   1240d:	48 89 c2             	mov    %rax,%rdx
   12410:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12417:	48 8b 48 f8          	mov    -0x8(%rax),%rcx
   1241b:	be 02 00 00 00       	mov    $0x2,%esi
   12420:	b0 00                	mov    $0x0,%al
   12422:	e8 69 95 ff ff       	call   b990 <slipL_makeList>
   12427:	48 8b bd 18 e9 ff ff 	mov    -0x16e8(%rbp),%rdi
   1242e:	48 89 c6             	mov    %rax,%rsi
   12431:	e8 4a 94 ff ff       	call   b880 <slipL_create_ListNode>
   12436:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1243d:	e9 44 03 00 00       	jmp    12786 <yyparse+0x19e6>
   12442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12446:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1244a:	48 8d 35 4e 72 00 00 	lea    0x724e(%rip),%rsi        # 1969f <yyrline+0xbf>
   12451:	e8 da 93 ff ff       	call   b830 <slipL_create_IDNode>
   12456:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1245d:	48 8b bd e8 eb ff ff 	mov    -0x1418(%rbp),%rdi
   12464:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1246b:	48 8b 70 f8          	mov    -0x8(%rax),%rsi
   1246f:	e8 9c 96 ff ff       	call   bb10 <slipL_concat>
   12474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12478:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1247c:	48 8b b5 e8 eb ff ff 	mov    -0x1418(%rbp),%rsi
   12483:	e8 f8 93 ff ff       	call   b880 <slipL_create_ListNode>
   12488:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1248f:	e9 f2 02 00 00       	jmp    12786 <yyparse+0x19e6>
   12494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12498:	48 8b 40 10          	mov    0x10(%rax),%rax
   1249c:	48 89 85 08 e9 ff ff 	mov    %rax,-0x16f8(%rbp)
   124a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   124a7:	48 8b 78 10          	mov    0x10(%rax),%rdi
   124ab:	48 8d 35 ed 71 00 00 	lea    0x71ed(%rip),%rsi        # 1969f <yyrline+0xbf>
   124b2:	e8 79 93 ff ff       	call   b830 <slipL_create_IDNode>
   124b7:	48 8b bd 08 e9 ff ff 	mov    -0x16f8(%rbp),%rdi
   124be:	48 89 c6             	mov    %rax,%rsi
   124c1:	e8 ba 93 ff ff       	call   b880 <slipL_create_ListNode>
   124c6:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   124cd:	e9 b4 02 00 00       	jmp    12786 <yyparse+0x19e6>
   124d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   124d6:	48 8b 40 10          	mov    0x10(%rax),%rax
   124da:	48 89 85 00 e9 ff ff 	mov    %rax,-0x1700(%rbp)
   124e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   124e5:	48 8b 78 10          	mov    0x10(%rax),%rdi
   124e9:	48 8d 35 b8 71 00 00 	lea    0x71b8(%rip),%rsi        # 196a8 <yyrline+0xc8>
   124f0:	e8 3b 93 ff ff       	call   b830 <slipL_create_IDNode>
   124f5:	48 8b bd 00 e9 ff ff 	mov    -0x1700(%rbp),%rdi
   124fc:	48 89 c6             	mov    %rax,%rsi
   124ff:	e8 7c 93 ff ff       	call   b880 <slipL_create_ListNode>
   12504:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1250b:	e9 76 02 00 00       	jmp    12786 <yyparse+0x19e6>
   12510:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12514:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12518:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1251f:	48 8b 70 f8          	mov    -0x8(%rax),%rsi
   12523:	e8 58 93 ff ff       	call   b880 <slipL_create_ListNode>
   12528:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1252f:	e9 52 02 00 00       	jmp    12786 <yyparse+0x19e6>
   12534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12538:	48 8b 78 10          	mov    0x10(%rax),%rdi
   1253c:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12543:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   12547:	e8 34 93 ff ff       	call   b880 <slipL_create_ListNode>
   1254c:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12553:	e9 2e 02 00 00       	jmp    12786 <yyparse+0x19e6>
   12558:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1255c:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12560:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12567:	48 8b 70 f8          	mov    -0x8(%rax),%rsi
   1256b:	e8 10 93 ff ff       	call   b880 <slipL_create_ListNode>
   12570:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12577:	e9 0a 02 00 00       	jmp    12786 <yyparse+0x19e6>
   1257c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12580:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12584:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1258b:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   1258f:	e8 ec 92 ff ff       	call   b880 <slipL_create_ListNode>
   12594:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1259b:	e9 e6 01 00 00       	jmp    12786 <yyparse+0x19e6>
   125a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   125a4:	48 8b 40 10          	mov    0x10(%rax),%rax
   125a8:	48 89 85 f8 e8 ff ff 	mov    %rax,-0x1708(%rbp)
   125af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   125b3:	48 8b 40 10          	mov    0x10(%rax),%rax
   125b7:	48 89 85 f0 e8 ff ff 	mov    %rax,-0x1710(%rbp)
   125be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   125c2:	48 8b 78 10          	mov    0x10(%rax),%rdi
   125c6:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   125cd:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   125d1:	e8 5a 92 ff ff       	call   b830 <slipL_create_IDNode>
   125d6:	48 8b bd f0 e8 ff ff 	mov    -0x1710(%rbp),%rdi
   125dd:	48 89 c2             	mov    %rax,%rdx
   125e0:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   125e7:	48 8b 08             	mov    (%rax),%rcx
   125ea:	be 02 00 00 00       	mov    $0x2,%esi
   125ef:	b0 00                	mov    $0x0,%al
   125f1:	e8 9a 93 ff ff       	call   b990 <slipL_makeList>
   125f6:	48 8b bd f8 e8 ff ff 	mov    -0x1708(%rbp),%rdi
   125fd:	48 89 c6             	mov    %rax,%rsi
   12600:	e8 7b 92 ff ff       	call   b880 <slipL_create_ListNode>
   12605:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1260c:	e9 75 01 00 00       	jmp    12786 <yyparse+0x19e6>
   12611:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12615:	48 8b 40 10          	mov    0x10(%rax),%rax
   12619:	48 89 85 e8 e8 ff ff 	mov    %rax,-0x1718(%rbp)
   12620:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12624:	48 8b 40 10          	mov    0x10(%rax),%rax
   12628:	48 89 85 e0 e8 ff ff 	mov    %rax,-0x1720(%rbp)
   1262f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12633:	48 8b 78 10          	mov    0x10(%rax),%rdi
   12637:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1263e:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   12642:	e8 79 91 ff ff       	call   b7c0 <slipL_create_StringNode>
   12647:	48 8b bd e0 e8 ff ff 	mov    -0x1720(%rbp),%rdi
   1264e:	48 89 c2             	mov    %rax,%rdx
   12651:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12658:	48 8b 08             	mov    (%rax),%rcx
   1265b:	be 02 00 00 00       	mov    $0x2,%esi
   12660:	b0 00                	mov    $0x0,%al
   12662:	e8 29 93 ff ff       	call   b990 <slipL_makeList>
   12667:	48 8b bd e8 e8 ff ff 	mov    -0x1718(%rbp),%rdi
   1266e:	48 89 c6             	mov    %rax,%rsi
   12671:	e8 0a 92 ff ff       	call   b880 <slipL_create_ListNode>
   12676:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1267d:	e9 04 01 00 00       	jmp    12786 <yyparse+0x19e6>
   12682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12686:	48 8b 40 10          	mov    0x10(%rax),%rax
   1268a:	48 89 85 d8 e8 ff ff 	mov    %rax,-0x1728(%rbp)
   12691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   12695:	48 8b 40 10          	mov    0x10(%rax),%rax
   12699:	48 89 85 d0 e8 ff ff 	mov    %rax,-0x1730(%rbp)
   126a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   126a4:	48 8b 78 10          	mov    0x10(%rax),%rdi
   126a8:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   126af:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
   126b3:	e8 58 92 ff ff       	call   b910 <slipL_create_IntNodeFromStr>
   126b8:	48 8b bd d0 e8 ff ff 	mov    -0x1730(%rbp),%rdi
   126bf:	48 89 c2             	mov    %rax,%rdx
   126c2:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   126c9:	48 8b 08             	mov    (%rax),%rcx
   126cc:	be 02 00 00 00       	mov    $0x2,%esi
   126d1:	b0 00                	mov    $0x0,%al
   126d3:	e8 b8 92 ff ff       	call   b990 <slipL_makeList>
   126d8:	48 8b bd d8 e8 ff ff 	mov    -0x1728(%rbp),%rdi
   126df:	48 89 c6             	mov    %rax,%rsi
   126e2:	e8 99 91 ff ff       	call   b880 <slipL_create_ListNode>
   126e7:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   126ee:	e9 93 00 00 00       	jmp    12786 <yyparse+0x19e6>
   126f3:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   126fa:	48 8b 00             	mov    (%rax),%rax
   126fd:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12704:	e9 7d 00 00 00       	jmp    12786 <yyparse+0x19e6>
   12709:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12710:	48 8b 40 f0          	mov    -0x10(%rax),%rax
   12714:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1271b:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12722:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
   12726:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   1272d:	48 8b 30             	mov    (%rax),%rsi
   12730:	e8 db 93 ff ff       	call   bb10 <slipL_concat>
   12735:	e9 4c 00 00 00       	jmp    12786 <yyparse+0x19e6>
   1273a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12741:	48 8b 00             	mov    (%rax),%rax
   12744:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   1274b:	e9 36 00 00 00       	jmp    12786 <yyparse+0x19e6>
   12750:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12757:	48 8b 40 f8          	mov    -0x8(%rax),%rax
   1275b:	48 89 85 e8 eb ff ff 	mov    %rax,-0x1418(%rbp)
   12762:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12769:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
   1276d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12774:	48 8b 30             	mov    (%rax),%rsi
   12777:	e8 94 93 ff ff       	call   bb10 <slipL_concat>
   1277c:	e9 05 00 00 00       	jmp    12786 <yyparse+0x19e6>
   12781:	e9 00 00 00 00       	jmp    12786 <yyparse+0x19e6>
   12786:	e9 00 00 00 00       	jmp    1278b <yyparse+0x19eb>
   1278b:	83 3d b6 dc 00 00 00 	cmpl   $0x0,0xdcb6(%rip)        # 20448 <yydebug>
   12792:	0f 84 6e 00 00 00    	je     12806 <yyparse+0x1a66>
   12798:	48 8b 05 51 d8 00 00 	mov    0xd851(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1279f:	48 8b 38             	mov    (%rax),%rdi
   127a2:	48 8d 35 9d 5a 00 00 	lea    0x5a9d(%rip),%rsi        # 18246 <_IO_stdin_used+0x246>
   127a9:	48 8d 15 fe 6e 00 00 	lea    0x6efe(%rip),%rdx        # 196ae <yyrline+0xce>
   127b0:	b0 00                	mov    $0x0,%al
   127b2:	e8 79 09 ff ff       	call   3130 <fprintf@plt>
   127b7:	48 8b 05 32 d8 00 00 	mov    0xd832(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   127be:	48 8b 38             	mov    (%rax),%rdi
   127c1:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   127c8:	48 8d 05 41 6d 00 00 	lea    0x6d41(%rip),%rax        # 19510 <yyr1>
   127cf:	0f be 34 08          	movsbl (%rax,%rcx,1),%esi
   127d3:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   127d7:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   127db:	48 8d 95 e8 eb ff ff 	lea    -0x1418(%rbp),%rdx
   127e2:	48 8d 8d d8 eb ff ff 	lea    -0x1428(%rbp),%rcx
   127e9:	e8 32 09 00 00       	call   13120 <yy_symbol_print>
   127ee:	48 8b 05 fb d7 00 00 	mov    0xd7fb(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   127f5:	48 8b 38             	mov    (%rax),%rdi
   127f8:	48 8d 35 2c 59 00 00 	lea    0x592c(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   127ff:	b0 00                	mov    $0x0,%al
   12801:	e8 2a 09 ff ff       	call   3130 <fprintf@plt>
   12806:	e9 00 00 00 00       	jmp    1280b <yyparse+0x1a6b>
   1280b:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12811:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12818:	48 63 d1             	movslq %ecx,%rdx
   1281b:	31 c9                	xor    %ecx,%ecx
   1281d:	48 29 d1             	sub    %rdx,%rcx
   12820:	48 c1 e1 03          	shl    $0x3,%rcx
   12824:	48 01 c8             	add    %rcx,%rax
   12827:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   1282e:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12834:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   1283b:	48 63 d1             	movslq %ecx,%rdx
   1283e:	31 c9                	xor    %ecx,%ecx
   12840:	48 29 d1             	sub    %rdx,%rcx
   12843:	48 01 c8             	add    %rcx,%rax
   12846:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   1284d:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12853:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   1285a:	48 63 d1             	movslq %ecx,%rdx
   1285d:	31 c9                	xor    %ecx,%ecx
   1285f:	48 29 d1             	sub    %rdx,%rcx
   12862:	48 c1 e1 04          	shl    $0x4,%rcx
   12866:	48 01 c8             	add    %rcx,%rax
   12869:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   12870:	c7 85 0c eb ff ff 00 	movl   $0x0,-0x14f4(%rbp)
   12877:	00 00 00 
   1287a:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12881:	48 89 c1             	mov    %rax,%rcx
   12884:	48 83 c1 08          	add    $0x8,%rcx
   12888:	48 89 8d 90 f8 ff ff 	mov    %rcx,-0x770(%rbp)
   1288f:	48 8b 8d e8 eb ff ff 	mov    -0x1418(%rbp),%rcx
   12896:	48 89 48 08          	mov    %rcx,0x8(%rax)
   1289a:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   128a1:	48 89 c1             	mov    %rax,%rcx
   128a4:	48 83 c1 10          	add    $0x10,%rcx
   128a8:	48 89 8d 00 ec ff ff 	mov    %rcx,-0x1400(%rbp)
   128af:	48 8b 8d d8 eb ff ff 	mov    -0x1428(%rbp),%rcx
   128b6:	48 89 48 10          	mov    %rcx,0x10(%rax)
   128ba:	48 8b 8d e0 eb ff ff 	mov    -0x1420(%rbp),%rcx
   128c1:	48 89 48 18          	mov    %rcx,0x18(%rax)
   128c5:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   128cc:	48 8d 05 3d 6c 00 00 	lea    0x6c3d(%rip),%rax        # 19510 <yyr1>
   128d3:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   128d7:	83 e8 24             	sub    $0x24,%eax
   128da:	89 85 d4 ea ff ff    	mov    %eax,-0x152c(%rbp)
   128e0:	48 63 8d d4 ea ff ff 	movslq -0x152c(%rbp),%rcx
   128e7:	48 8d 05 62 6c 00 00 	lea    0x6c62(%rip),%rax        # 19550 <yypgoto>
   128ee:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   128f2:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
   128f9:	0f be 09             	movsbl (%rcx),%ecx
   128fc:	01 c8                	add    %ecx,%eax
   128fe:	89 85 d0 ea ff ff    	mov    %eax,-0x1530(%rbp)
   12904:	31 c0                	xor    %eax,%eax
   12906:	3b 85 d0 ea ff ff    	cmp    -0x1530(%rbp),%eax
   1290c:	0f 8f 51 00 00 00    	jg     12963 <yyparse+0x1bc3>
   12912:	81 bd d0 ea ff ff 69 	cmpl   $0x169,-0x1530(%rbp)
   12919:	01 00 00 
   1291c:	0f 8f 41 00 00 00    	jg     12963 <yyparse+0x1bc3>
   12922:	48 63 8d d0 ea ff ff 	movslq -0x1530(%rbp),%rcx
   12929:	48 8d 05 50 68 00 00 	lea    0x6850(%rip),%rax        # 19180 <yycheck>
   12930:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12934:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
   1293b:	0f be 09             	movsbl (%rcx),%ecx
   1293e:	39 c8                	cmp    %ecx,%eax
   12940:	0f 85 1d 00 00 00    	jne    12963 <yyparse+0x1bc3>
   12946:	48 63 8d d0 ea ff ff 	movslq -0x1530(%rbp),%rcx
   1294d:	48 8d 05 9c 69 00 00 	lea    0x699c(%rip),%rax        # 192f0 <yytable>
   12954:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12958:	89 85 cc e8 ff ff    	mov    %eax,-0x1734(%rbp)
   1295e:	e9 18 00 00 00       	jmp    1297b <yyparse+0x1bdb>
   12963:	48 63 8d d4 ea ff ff 	movslq -0x152c(%rbp),%rcx
   1296a:	48 8d 05 ef 6b 00 00 	lea    0x6bef(%rip),%rax        # 19560 <yydefgoto>
   12971:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12975:	89 85 cc e8 ff ff    	mov    %eax,-0x1734(%rbp)
   1297b:	8b 85 cc e8 ff ff    	mov    -0x1734(%rbp),%eax
   12981:	89 45 c8             	mov    %eax,-0x38(%rbp)
   12984:	e9 35 e5 ff ff       	jmp    10ebe <yyparse+0x11e>
   12989:	83 7d ec fe          	cmpl   $0xfffffffe,-0x14(%rbp)
   1298d:	0f 85 10 00 00 00    	jne    129a3 <yyparse+0x1c03>
   12993:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   12998:	89 85 c8 e8 ff ff    	mov    %eax,-0x1738(%rbp)
   1299e:	e9 4e 00 00 00       	jmp    129f1 <yyparse+0x1c51>
   129a3:	31 c0                	xor    %eax,%eax
   129a5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   129a8:	0f 8f 27 00 00 00    	jg     129d5 <yyparse+0x1c35>
   129ae:	81 7d ec 0e 01 00 00 	cmpl   $0x10e,-0x14(%rbp)
   129b5:	0f 8f 1a 00 00 00    	jg     129d5 <yyparse+0x1c35>
   129bb:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   129bf:	48 8d 05 aa 66 00 00 	lea    0x66aa(%rip),%rax        # 19070 <yytranslate>
   129c6:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   129ca:	89 85 c4 e8 ff ff    	mov    %eax,-0x173c(%rbp)
   129d0:	e9 10 00 00 00       	jmp    129e5 <yyparse+0x1c45>
   129d5:	b8 02 00 00 00       	mov    $0x2,%eax
   129da:	89 85 c4 e8 ff ff    	mov    %eax,-0x173c(%rbp)
   129e0:	e9 00 00 00 00       	jmp    129e5 <yyparse+0x1c45>
   129e5:	8b 85 c4 e8 ff ff    	mov    -0x173c(%rbp),%eax
   129eb:	89 85 c8 e8 ff ff    	mov    %eax,-0x1738(%rbp)
   129f1:	8b 85 c8 e8 ff ff    	mov    -0x1738(%rbp),%eax
   129f7:	89 85 f4 eb ff ff    	mov    %eax,-0x140c(%rbp)
   129fd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
   12a01:	0f 85 5c 01 00 00    	jne    12b63 <yyparse+0x1dc3>
   12a07:	8b 45 cc             	mov    -0x34(%rbp),%eax
   12a0a:	83 c0 01             	add    $0x1,%eax
   12a0d:	89 45 cc             	mov    %eax,-0x34(%rbp)
   12a10:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12a17:	48 89 85 b8 ea ff ff 	mov    %rax,-0x1548(%rbp)
   12a1e:	8b 85 f4 eb ff ff    	mov    -0x140c(%rbp),%eax
   12a24:	89 85 c0 ea ff ff    	mov    %eax,-0x1540(%rbp)
   12a2a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   12a2e:	48 89 85 c8 ea ff ff 	mov    %rax,-0x1538(%rbp)
   12a35:	48 8d 05 7a 6c 00 00 	lea    0x6c7a(%rip),%rax        # 196b6 <yyrline+0xd6>
   12a3c:	48 89 85 b0 ea ff ff 	mov    %rax,-0x1550(%rbp)
   12a43:	48 8d bd 10 eb ff ff 	lea    -0x14f0(%rbp),%rdi
   12a4a:	48 8d b5 18 eb ff ff 	lea    -0x14e8(%rbp),%rsi
   12a51:	48 8d 95 b8 ea ff ff 	lea    -0x1548(%rbp),%rdx
   12a58:	e8 b3 08 00 00       	call   13310 <yysyntax_error>
   12a5d:	89 85 ac ea ff ff    	mov    %eax,-0x1554(%rbp)
   12a63:	83 bd ac ea ff ff 00 	cmpl   $0x0,-0x1554(%rbp)
   12a6a:	0f 85 13 00 00 00    	jne    12a83 <yyparse+0x1ce3>
   12a70:	48 8b 85 18 eb ff ff 	mov    -0x14e8(%rbp),%rax
   12a77:	48 89 85 b0 ea ff ff 	mov    %rax,-0x1550(%rbp)
   12a7e:	e9 b1 00 00 00       	jmp    12b34 <yyparse+0x1d94>
   12a83:	83 bd ac ea ff ff ff 	cmpl   $0xffffffff,-0x1554(%rbp)
   12a8a:	0f 85 9f 00 00 00    	jne    12b2f <yyparse+0x1d8f>
   12a90:	48 8b 85 18 eb ff ff 	mov    -0x14e8(%rbp),%rax
   12a97:	48 8d 8d 20 eb ff ff 	lea    -0x14e0(%rbp),%rcx
   12a9e:	48 39 c8             	cmp    %rcx,%rax
   12aa1:	0f 84 0c 00 00 00    	je     12ab3 <yyparse+0x1d13>
   12aa7:	48 8b bd 18 eb ff ff 	mov    -0x14e8(%rbp),%rdi
   12aae:	e8 7d 05 ff ff       	call   3030 <free@plt>
   12ab3:	48 8b bd 10 eb ff ff 	mov    -0x14f0(%rbp),%rdi
   12aba:	e8 d1 06 ff ff       	call   3190 <malloc@plt>
   12abf:	48 89 85 18 eb ff ff 	mov    %rax,-0x14e8(%rbp)
   12ac6:	48 83 bd 18 eb ff ff 	cmpq   $0x0,-0x14e8(%rbp)
   12acd:	00 
   12ace:	0f 84 33 00 00 00    	je     12b07 <yyparse+0x1d67>
   12ad4:	48 8d bd 10 eb ff ff 	lea    -0x14f0(%rbp),%rdi
   12adb:	48 8d b5 18 eb ff ff 	lea    -0x14e8(%rbp),%rsi
   12ae2:	48 8d 95 b8 ea ff ff 	lea    -0x1548(%rbp),%rdx
   12ae9:	e8 22 08 00 00       	call   13310 <yysyntax_error>
   12aee:	89 85 ac ea ff ff    	mov    %eax,-0x1554(%rbp)
   12af4:	48 8b 85 18 eb ff ff 	mov    -0x14e8(%rbp),%rax
   12afb:	48 89 85 b0 ea ff ff 	mov    %rax,-0x1550(%rbp)
   12b02:	e9 23 00 00 00       	jmp    12b2a <yyparse+0x1d8a>
   12b07:	48 8d 85 20 eb ff ff 	lea    -0x14e0(%rbp),%rax
   12b0e:	48 89 85 18 eb ff ff 	mov    %rax,-0x14e8(%rbp)
   12b15:	48 c7 85 10 eb ff ff 	movq   $0x80,-0x14f0(%rbp)
   12b1c:	80 00 00 00 
   12b20:	c7 85 ac ea ff ff fe 	movl   $0xfffffffe,-0x1554(%rbp)
   12b27:	ff ff ff 
   12b2a:	e9 00 00 00 00       	jmp    12b2f <yyparse+0x1d8f>
   12b2f:	e9 00 00 00 00       	jmp    12b34 <yyparse+0x1d94>
   12b34:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   12b38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12b3c:	48 8b 8d b0 ea ff ff 	mov    -0x1550(%rbp),%rcx
   12b43:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   12b47:	e8 84 0a 00 00       	call   135d0 <yyerror>
   12b4c:	83 bd ac ea ff ff fe 	cmpl   $0xfffffffe,-0x1554(%rbp)
   12b53:	0f 85 05 00 00 00    	jne    12b5e <yyparse+0x1dbe>
   12b59:	e9 24 03 00 00       	jmp    12e82 <yyparse+0x20e2>
   12b5e:	e9 00 00 00 00       	jmp    12b63 <yyparse+0x1dc3>
   12b63:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12b67:	48 89 85 b0 eb ff ff 	mov    %rax,-0x1450(%rbp)
   12b6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12b72:	48 89 85 b8 eb ff ff 	mov    %rax,-0x1448(%rbp)
   12b79:	83 7d c4 03          	cmpl   $0x3,-0x3c(%rbp)
   12b7d:	0f 85 4c 00 00 00    	jne    12bcf <yyparse+0x1e2f>
   12b83:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   12b87:	0f 8f 14 00 00 00    	jg     12ba1 <yyparse+0x1e01>
   12b8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   12b91:	0f 85 05 00 00 00    	jne    12b9c <yyparse+0x1dfc>
   12b97:	e9 d7 02 00 00       	jmp    12e73 <yyparse+0x20d3>
   12b9c:	e9 29 00 00 00       	jmp    12bca <yyparse+0x1e2a>
   12ba1:	8b b5 f4 eb ff ff    	mov    -0x140c(%rbp),%esi
   12ba7:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   12bab:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   12baf:	48 8d 3d 0d 6b 00 00 	lea    0x6b0d(%rip),%rdi        # 196c3 <yyrline+0xe3>
   12bb6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   12bba:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   12bbe:	e8 8d 0b 00 00       	call   13750 <yydestruct>
   12bc3:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
   12bca:	e9 00 00 00 00       	jmp    12bcf <yyparse+0x1e2f>
   12bcf:	e9 00 00 00 00       	jmp    12bd4 <yyparse+0x1e34>
   12bd4:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%rbp)
   12bdb:	48 63 4d c8          	movslq -0x38(%rbp),%rcx
   12bdf:	48 8d 05 aa 63 00 00 	lea    0x63aa(%rip),%rax        # 18f90 <yypact>
   12be6:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   12bea:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   12bf0:	83 bd fc eb ff ff da 	cmpl   $0xffffffda,-0x1404(%rbp)
   12bf7:	0f 84 7d 00 00 00    	je     12c7a <yyparse+0x1eda>
   12bfd:	8b 85 fc eb ff ff    	mov    -0x1404(%rbp),%eax
   12c03:	83 c0 01             	add    $0x1,%eax
   12c06:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   12c0c:	31 c0                	xor    %eax,%eax
   12c0e:	3b 85 fc eb ff ff    	cmp    -0x1404(%rbp),%eax
   12c14:	0f 8f 5b 00 00 00    	jg     12c75 <yyparse+0x1ed5>
   12c1a:	81 bd fc eb ff ff 69 	cmpl   $0x169,-0x1404(%rbp)
   12c21:	01 00 00 
   12c24:	0f 8f 4b 00 00 00    	jg     12c75 <yyparse+0x1ed5>
   12c2a:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   12c31:	48 8d 05 48 65 00 00 	lea    0x6548(%rip),%rax        # 19180 <yycheck>
   12c38:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12c3c:	83 f8 01             	cmp    $0x1,%eax
   12c3f:	0f 85 30 00 00 00    	jne    12c75 <yyparse+0x1ed5>
   12c45:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   12c4c:	48 8d 05 9d 66 00 00 	lea    0x669d(%rip),%rax        # 192f0 <yytable>
   12c53:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12c57:	89 85 fc eb ff ff    	mov    %eax,-0x1404(%rbp)
   12c5d:	31 c0                	xor    %eax,%eax
   12c5f:	3b 85 fc eb ff ff    	cmp    -0x1404(%rbp),%eax
   12c65:	0f 8d 05 00 00 00    	jge    12c70 <yyparse+0x1ed0>
   12c6b:	e9 dd 00 00 00       	jmp    12d4d <yyparse+0x1fad>
   12c70:	e9 00 00 00 00       	jmp    12c75 <yyparse+0x1ed5>
   12c75:	e9 00 00 00 00       	jmp    12c7a <yyparse+0x1eda>
   12c7a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12c81:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
   12c88:	0f 85 05 00 00 00    	jne    12c93 <yyparse+0x1ef3>
   12c8e:	e9 e0 01 00 00       	jmp    12e73 <yyparse+0x20d3>
   12c93:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12c9a:	48 8b 08             	mov    (%rax),%rcx
   12c9d:	48 89 8d b0 eb ff ff 	mov    %rcx,-0x1450(%rbp)
   12ca4:	48 8b 40 08          	mov    0x8(%rax),%rax
   12ca8:	48 89 85 b8 eb ff ff 	mov    %rax,-0x1448(%rbp)
   12caf:	48 63 4d c8          	movslq -0x38(%rbp),%rcx
   12cb3:	48 8d 05 b6 68 00 00 	lea    0x68b6(%rip),%rax        # 19570 <yystos>
   12cba:	0f be 34 08          	movsbl (%rax,%rcx,1),%esi
   12cbe:	48 8b 95 90 f8 ff ff 	mov    -0x770(%rbp),%rdx
   12cc5:	48 8b 8d 00 ec ff ff 	mov    -0x1400(%rbp),%rcx
   12ccc:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   12cd0:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   12cd4:	48 8d 3d fa 69 00 00 	lea    0x69fa(%rip),%rdi        # 196d5 <yyrline+0xf5>
   12cdb:	e8 70 0a 00 00       	call   13750 <yydestruct>
   12ce0:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12ce7:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   12ceb:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   12cf2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12cf9:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   12cfd:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   12d04:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12d0b:	48 83 c0 f0          	add    $0xfffffffffffffff0,%rax
   12d0f:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   12d16:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12d1d:	0f be 00             	movsbl (%rax),%eax
   12d20:	89 45 c8             	mov    %eax,-0x38(%rbp)
   12d23:	83 3d 1e d7 00 00 00 	cmpl   $0x0,0xd71e(%rip)        # 20448 <yydebug>
   12d2a:	0f 84 13 00 00 00    	je     12d43 <yyparse+0x1fa3>
   12d30:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   12d37:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
   12d3e:	e8 4d 03 00 00       	call   13090 <yy_stack_print>
   12d43:	e9 00 00 00 00       	jmp    12d48 <yyparse+0x1fa8>
   12d48:	e9 8e fe ff ff       	jmp    12bdb <yyparse+0x1e3b>
   12d4d:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12d54:	48 89 c1             	mov    %rax,%rcx
   12d57:	48 83 c1 08          	add    $0x8,%rcx
   12d5b:	48 89 8d 90 f8 ff ff 	mov    %rcx,-0x770(%rbp)
   12d62:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   12d66:	48 89 48 08          	mov    %rcx,0x8(%rax)
   12d6a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12d6e:	48 89 85 c0 eb ff ff 	mov    %rax,-0x1440(%rbp)
   12d75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12d79:	48 89 85 c8 eb ff ff 	mov    %rax,-0x1438(%rbp)
   12d80:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12d87:	48 83 c0 10          	add    $0x10,%rax
   12d8b:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   12d92:	8b 8d b0 eb ff ff    	mov    -0x1450(%rbp),%ecx
   12d98:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12d9f:	89 08                	mov    %ecx,(%rax)
   12da1:	8b 8d b4 eb ff ff    	mov    -0x144c(%rbp),%ecx
   12da7:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12dae:	89 48 04             	mov    %ecx,0x4(%rax)
   12db1:	8b 8d c8 eb ff ff    	mov    -0x1438(%rbp),%ecx
   12db7:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12dbe:	89 48 08             	mov    %ecx,0x8(%rax)
   12dc1:	8b 8d cc eb ff ff    	mov    -0x1434(%rbp),%ecx
   12dc7:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12dce:	89 48 0c             	mov    %ecx,0xc(%rax)
   12dd1:	e9 00 00 00 00       	jmp    12dd6 <yyparse+0x2036>
   12dd6:	83 3d 6b d6 00 00 00 	cmpl   $0x0,0xd66b(%rip)        # 20448 <yydebug>
   12ddd:	0f 84 6e 00 00 00    	je     12e51 <yyparse+0x20b1>
   12de3:	48 8b 05 06 d2 00 00 	mov    0xd206(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   12dea:	48 8b 38             	mov    (%rax),%rdi
   12ded:	48 8d 35 52 54 00 00 	lea    0x5452(%rip),%rsi        # 18246 <_IO_stdin_used+0x246>
   12df4:	48 8d 15 99 68 00 00 	lea    0x6899(%rip),%rdx        # 19694 <yyrline+0xb4>
   12dfb:	b0 00                	mov    $0x0,%al
   12dfd:	e8 2e 03 ff ff       	call   3130 <fprintf@plt>
   12e02:	48 8b 05 e7 d1 00 00 	mov    0xd1e7(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   12e09:	48 8b 38             	mov    (%rax),%rdi
   12e0c:	48 63 8d fc eb ff ff 	movslq -0x1404(%rbp),%rcx
   12e13:	48 8d 05 56 67 00 00 	lea    0x6756(%rip),%rax        # 19570 <yystos>
   12e1a:	0f be 34 08          	movsbl (%rax,%rcx,1),%esi
   12e1e:	48 8b 95 90 f8 ff ff 	mov    -0x770(%rbp),%rdx
   12e25:	48 8b 8d 00 ec ff ff 	mov    -0x1400(%rbp),%rcx
   12e2c:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   12e30:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   12e34:	e8 e7 02 00 00       	call   13120 <yy_symbol_print>
   12e39:	48 8b 05 b0 d1 00 00 	mov    0xd1b0(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   12e40:	48 8b 38             	mov    (%rax),%rdi
   12e43:	48 8d 35 e1 52 00 00 	lea    0x52e1(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   12e4a:	b0 00                	mov    $0x0,%al
   12e4c:	e8 df 02 ff ff       	call   3130 <fprintf@plt>
   12e51:	e9 00 00 00 00       	jmp    12e56 <yyparse+0x20b6>
   12e56:	8b 85 fc eb ff ff    	mov    -0x1404(%rbp),%eax
   12e5c:	89 45 c8             	mov    %eax,-0x38(%rbp)
   12e5f:	e9 5a e0 ff ff       	jmp    10ebe <yyparse+0x11e>
   12e64:	c7 85 f8 eb ff ff 00 	movl   $0x0,-0x1408(%rbp)
   12e6b:	00 00 00 
   12e6e:	e9 31 00 00 00       	jmp    12ea4 <yyparse+0x2104>
   12e73:	c7 85 f8 eb ff ff 01 	movl   $0x1,-0x1408(%rbp)
   12e7a:	00 00 00 
   12e7d:	e9 22 00 00 00       	jmp    12ea4 <yyparse+0x2104>
   12e82:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   12e86:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12e8a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
   12e8e:	48 8d 0d 4f 68 00 00 	lea    0x684f(%rip),%rcx        # 196e4 <yyrline+0x104>
   12e95:	e8 36 07 00 00       	call   135d0 <yyerror>
   12e9a:	c7 85 f8 eb ff ff 02 	movl   $0x2,-0x1408(%rbp)
   12ea1:	00 00 00 
   12ea4:	83 7d ec fe          	cmpl   $0xfffffffe,-0x14(%rbp)
   12ea8:	0f 84 70 00 00 00    	je     12f1e <yyparse+0x217e>
   12eae:	31 c0                	xor    %eax,%eax
   12eb0:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   12eb3:	0f 8f 27 00 00 00    	jg     12ee0 <yyparse+0x2140>
   12eb9:	81 7d ec 0e 01 00 00 	cmpl   $0x10e,-0x14(%rbp)
   12ec0:	0f 8f 1a 00 00 00    	jg     12ee0 <yyparse+0x2140>
   12ec6:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
   12eca:	48 8d 05 9f 61 00 00 	lea    0x619f(%rip),%rax        # 19070 <yytranslate>
   12ed1:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   12ed5:	89 85 c0 e8 ff ff    	mov    %eax,-0x1740(%rbp)
   12edb:	e9 10 00 00 00       	jmp    12ef0 <yyparse+0x2150>
   12ee0:	b8 02 00 00 00       	mov    $0x2,%eax
   12ee5:	89 85 c0 e8 ff ff    	mov    %eax,-0x1740(%rbp)
   12eeb:	e9 00 00 00 00       	jmp    12ef0 <yyparse+0x2150>
   12ef0:	8b 85 c0 e8 ff ff    	mov    -0x1740(%rbp),%eax
   12ef6:	89 85 f4 eb ff ff    	mov    %eax,-0x140c(%rbp)
   12efc:	8b b5 f4 eb ff ff    	mov    -0x140c(%rbp),%esi
   12f02:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   12f06:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   12f0a:	48 8d 3d e4 67 00 00 	lea    0x67e4(%rip),%rdi        # 196f5 <yyrline+0x115>
   12f11:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   12f15:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   12f19:	e8 32 08 00 00       	call   13750 <yydestruct>
   12f1e:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12f24:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   12f2b:	48 63 d1             	movslq %ecx,%rdx
   12f2e:	31 c9                	xor    %ecx,%ecx
   12f30:	48 29 d1             	sub    %rdx,%rcx
   12f33:	48 c1 e1 03          	shl    $0x3,%rcx
   12f37:	48 01 c8             	add    %rcx,%rax
   12f3a:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   12f41:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12f47:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12f4e:	48 63 d1             	movslq %ecx,%rdx
   12f51:	31 c9                	xor    %ecx,%ecx
   12f53:	48 29 d1             	sub    %rdx,%rcx
   12f56:	48 01 c8             	add    %rcx,%rax
   12f59:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   12f60:	8b 8d 0c eb ff ff    	mov    -0x14f4(%rbp),%ecx
   12f66:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   12f6d:	48 63 d1             	movslq %ecx,%rdx
   12f70:	31 c9                	xor    %ecx,%ecx
   12f72:	48 29 d1             	sub    %rdx,%rcx
   12f75:	48 c1 e1 04          	shl    $0x4,%rcx
   12f79:	48 01 c8             	add    %rcx,%rax
   12f7c:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   12f83:	83 3d be d4 00 00 00 	cmpl   $0x0,0xd4be(%rip)        # 20448 <yydebug>
   12f8a:	0f 84 13 00 00 00    	je     12fa3 <yyparse+0x2203>
   12f90:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   12f97:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
   12f9e:	e8 ed 00 00 00       	call   13090 <yy_stack_print>
   12fa3:	e9 00 00 00 00       	jmp    12fa8 <yyparse+0x2208>
   12fa8:	e9 00 00 00 00       	jmp    12fad <yyparse+0x220d>
   12fad:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12fb4:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
   12fbb:	0f 84 75 00 00 00    	je     13036 <yyparse+0x2296>
   12fc1:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   12fc8:	0f be 00             	movsbl (%rax),%eax
   12fcb:	48 63 c8             	movslq %eax,%rcx
   12fce:	48 8d 05 9b 65 00 00 	lea    0x659b(%rip),%rax        # 19570 <yystos>
   12fd5:	0f be 34 08          	movsbl (%rax,%rcx,1),%esi
   12fd9:	48 8b 95 90 f8 ff ff 	mov    -0x770(%rbp),%rdx
   12fe0:	48 8b 8d 00 ec ff ff 	mov    -0x1400(%rbp),%rcx
   12fe7:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   12feb:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
   12fef:	48 8d 3d 1d 67 00 00 	lea    0x671d(%rip),%rdi        # 19713 <yyrline+0x133>
   12ff6:	e8 55 07 00 00       	call   13750 <yydestruct>
   12ffb:	48 8b 85 90 f8 ff ff 	mov    -0x770(%rbp),%rax
   13002:	48 83 c0 f8          	add    $0xfffffffffffffff8,%rax
   13006:	48 89 85 90 f8 ff ff 	mov    %rax,-0x770(%rbp)
   1300d:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   13014:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   13018:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   1301f:	48 8b 85 00 ec ff ff 	mov    -0x1400(%rbp),%rax
   13026:	48 83 c0 f0          	add    $0xfffffffffffffff0,%rax
   1302a:	48 89 85 00 ec ff ff 	mov    %rax,-0x1400(%rbp)
   13031:	e9 77 ff ff ff       	jmp    12fad <yyparse+0x220d>
   13036:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1303d:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
   13044:	48 39 c8             	cmp    %rcx,%rax
   13047:	0f 84 0c 00 00 00    	je     13059 <yyparse+0x22b9>
   1304d:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
   13054:	e8 d7 ff fe ff       	call   3030 <free@plt>
   13059:	48 8b 85 18 eb ff ff 	mov    -0x14e8(%rbp),%rax
   13060:	48 8d 8d 20 eb ff ff 	lea    -0x14e0(%rbp),%rcx
   13067:	48 39 c8             	cmp    %rcx,%rax
   1306a:	0f 84 0c 00 00 00    	je     1307c <yyparse+0x22dc>
   13070:	48 8b bd 18 eb ff ff 	mov    -0x14e8(%rbp),%rdi
   13077:	e8 b4 ff fe ff       	call   3030 <free@plt>
   1307c:	8b 85 f8 eb ff ff    	mov    -0x1408(%rbp),%eax
   13082:	48 81 c4 40 17 00 00 	add    $0x1740,%rsp
   13089:	5d                   	pop    %rbp
   1308a:	c3                   	ret
   1308b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013090 <yy_stack_print>:
   13090:	55                   	push   %rbp
   13091:	48 89 e5             	mov    %rsp,%rbp
   13094:	48 83 ec 20          	sub    $0x20,%rsp
   13098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1309c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   130a0:	48 8b 05 49 cf 00 00 	mov    0xcf49(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   130a7:	48 8b 38             	mov    (%rax),%rdi
   130aa:	48 8d 35 80 66 00 00 	lea    0x6680(%rip),%rsi        # 19731 <yyrline+0x151>
   130b1:	b0 00                	mov    $0x0,%al
   130b3:	e8 78 00 ff ff       	call   3130 <fprintf@plt>
   130b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130bc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   130c0:	0f 87 36 00 00 00    	ja     130fc <yy_stack_print+0x6c>
   130c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130ca:	0f be 00             	movsbl (%rax),%eax
   130cd:	89 45 ec             	mov    %eax,-0x14(%rbp)
   130d0:	48 8b 05 19 cf 00 00 	mov    0xcf19(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   130d7:	48 8b 38             	mov    (%rax),%rdi
   130da:	8b 55 ec             	mov    -0x14(%rbp),%edx
   130dd:	48 8d 35 81 71 00 00 	lea    0x7181(%rip),%rsi        # 1a265 <yy_rule_can_match_eol+0x305>
   130e4:	b0 00                	mov    $0x0,%al
   130e6:	e8 45 00 ff ff       	call   3130 <fprintf@plt>
   130eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130ef:	48 83 c0 01          	add    $0x1,%rax
   130f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   130f7:	e9 bc ff ff ff       	jmp    130b8 <yy_stack_print+0x28>
   130fc:	48 8b 05 ed ce 00 00 	mov    0xceed(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   13103:	48 8b 38             	mov    (%rax),%rdi
   13106:	48 8d 35 1e 50 00 00 	lea    0x501e(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   1310d:	b0 00                	mov    $0x0,%al
   1310f:	e8 1c 00 ff ff       	call   3130 <fprintf@plt>
   13114:	48 83 c4 20          	add    $0x20,%rsp
   13118:	5d                   	pop    %rbp
   13119:	c3                   	ret
   1311a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000013120 <yy_symbol_print>:
   13120:	55                   	push   %rbp
   13121:	48 89 e5             	mov    %rsp,%rbp
   13124:	48 83 ec 40          	sub    $0x40,%rsp
   13128:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1312c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1312f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13133:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   13137:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   1313b:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   1313f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13143:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   13147:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1314a:	48 8d 05 f8 65 00 00 	lea    0x65f8(%rip),%rax        # 19749 <yyrline+0x169>
   13151:	48 8d 0d eb 65 00 00 	lea    0x65eb(%rip),%rcx        # 19743 <yyrline+0x163>
   13158:	83 fa 24             	cmp    $0x24,%edx
   1315b:	48 0f 4c c1          	cmovl  %rcx,%rax
   1315f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   13163:	8b 7d f4             	mov    -0xc(%rbp),%edi
   13166:	e8 85 07 00 00       	call   138f0 <yysymbol_name>
   1316b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
   1316f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   13173:	48 89 c1             	mov    %rax,%rcx
   13176:	48 8d 35 be 65 00 00 	lea    0x65be(%rip),%rsi        # 1973b <yyrline+0x15b>
   1317d:	b0 00                	mov    $0x0,%al
   1317f:	e8 ac ff fe ff       	call   3130 <fprintf@plt>
   13184:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13188:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1318c:	e8 7f 07 00 00       	call   13910 <yy_location_print_>
   13191:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13195:	48 8d 35 8f 65 00 00 	lea    0x658f(%rip),%rsi        # 1972b <yyrline+0x14b>
   1319c:	b0 00                	mov    $0x0,%al
   1319e:	e8 8d ff fe ff       	call   3130 <fprintf@plt>
   131a3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   131a7:	8b 75 f4             	mov    -0xc(%rbp),%esi
   131aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   131ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   131b2:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   131b6:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   131ba:	e8 b1 08 00 00       	call   13a70 <yy_symbol_value_print>
   131bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   131c3:	48 8d 35 fb 6f 00 00 	lea    0x6ffb(%rip),%rsi        # 1a1c5 <yy_rule_can_match_eol+0x265>
   131ca:	b0 00                	mov    $0x0,%al
   131cc:	e8 5f ff fe ff       	call   3130 <fprintf@plt>
   131d1:	48 83 c4 40          	add    $0x40,%rsp
   131d5:	5d                   	pop    %rbp
   131d6:	c3                   	ret
   131d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   131de:	00 00 

00000000000131e0 <yy_reduce_print>:
   131e0:	55                   	push   %rbp
   131e1:	48 89 e5             	mov    %rsp,%rbp
   131e4:	48 83 ec 40          	sub    $0x40,%rsp
   131e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   131ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   131f0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   131f4:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
   131f7:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   131fb:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   131ff:	48 63 4d e4          	movslq -0x1c(%rbp),%rcx
   13203:	48 8d 05 d6 63 00 00 	lea    0x63d6(%rip),%rax        # 195e0 <yyrline>
   1320a:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
   1320e:	89 45 cc             	mov    %eax,-0x34(%rbp)
   13211:	48 63 4d e4          	movslq -0x1c(%rbp),%rcx
   13215:	48 8d 05 b4 62 00 00 	lea    0x62b4(%rip),%rax        # 194d0 <yyr2>
   1321c:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   13220:	89 45 c8             	mov    %eax,-0x38(%rbp)
   13223:	48 8b 05 c6 cd 00 00 	mov    0xcdc6(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1322a:	48 8b 38             	mov    (%rax),%rdi
   1322d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   13230:	83 ea 01             	sub    $0x1,%edx
   13233:	8b 4d cc             	mov    -0x34(%rbp),%ecx
   13236:	48 8d 35 44 66 00 00 	lea    0x6644(%rip),%rsi        # 19881 <yyrline+0x2a1>
   1323d:	b0 00                	mov    $0x0,%al
   1323f:	e8 ec fe fe ff       	call   3130 <fprintf@plt>
   13244:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
   1324b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   1324e:	3b 45 c8             	cmp    -0x38(%rbp),%eax
   13251:	0f 8d a9 00 00 00    	jge    13300 <yy_reduce_print+0x120>
   13257:	48 8b 05 92 cd 00 00 	mov    0xcd92(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1325e:	48 8b 38             	mov    (%rax),%rdi
   13261:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   13264:	83 c2 01             	add    $0x1,%edx
   13267:	48 8d 35 39 66 00 00 	lea    0x6639(%rip),%rsi        # 198a7 <yyrline+0x2c7>
   1326e:	b0 00                	mov    $0x0,%al
   13270:	e8 bb fe fe ff       	call   3130 <fprintf@plt>
   13275:	48 8b 05 74 cd 00 00 	mov    0xcd74(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1327c:	48 8b 38             	mov    (%rax),%rdi
   1327f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13283:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
   13286:	83 c1 01             	add    $0x1,%ecx
   13289:	2b 4d c8             	sub    -0x38(%rbp),%ecx
   1328c:	48 63 c9             	movslq %ecx,%rcx
   1328f:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   13293:	48 63 c8             	movslq %eax,%rcx
   13296:	48 8d 05 d3 62 00 00 	lea    0x62d3(%rip),%rax        # 19570 <yystos>
   1329d:	0f be 34 08          	movsbl (%rax,%rcx,1),%esi
   132a1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   132a5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   132a8:	83 c0 01             	add    $0x1,%eax
   132ab:	2b 45 c8             	sub    -0x38(%rbp),%eax
   132ae:	48 98                	cltq
   132b0:	48 c1 e0 03          	shl    $0x3,%rax
   132b4:	48 01 c2             	add    %rax,%rdx
   132b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   132bb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   132be:	83 c0 01             	add    $0x1,%eax
   132c1:	2b 45 c8             	sub    -0x38(%rbp),%eax
   132c4:	48 98                	cltq
   132c6:	48 c1 e0 04          	shl    $0x4,%rax
   132ca:	48 01 c1             	add    %rax,%rcx
   132cd:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   132d1:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   132d5:	e8 46 fe ff ff       	call   13120 <yy_symbol_print>
   132da:	48 8b 05 0f cd 00 00 	mov    0xcd0f(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   132e1:	48 8b 38             	mov    (%rax),%rdi
   132e4:	48 8d 35 40 4e 00 00 	lea    0x4e40(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   132eb:	b0 00                	mov    $0x0,%al
   132ed:	e8 3e fe fe ff       	call   3130 <fprintf@plt>
   132f2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   132f5:	83 c0 01             	add    $0x1,%eax
   132f8:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   132fb:	e9 4b ff ff ff       	jmp    1324b <yy_reduce_print+0x6b>
   13300:	48 83 c4 40          	add    $0x40,%rsp
   13304:	5d                   	pop    %rbp
   13305:	c3                   	ret
   13306:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1330d:	00 00 00 

0000000000013310 <yysyntax_error>:
   13310:	55                   	push   %rbp
   13311:	48 89 e5             	mov    %rsp,%rbp
   13314:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
   1331b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1331f:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13323:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   13327:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1332e:	00 
   1332f:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   13336:	00 
   13337:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   1333b:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   1333f:	ba 05 00 00 00       	mov    $0x5,%edx
   13344:	e8 67 07 00 00       	call   13ab0 <yy_syntax_error_arguments>
   13349:	89 45 b4             	mov    %eax,-0x4c(%rbp)
   1334c:	83 7d b4 fe          	cmpl   $0xfffffffe,-0x4c(%rbp)
   13350:	0f 85 0c 00 00 00    	jne    13362 <yysyntax_error+0x52>
   13356:	c7 45 fc fe ff ff ff 	movl   $0xfffffffe,-0x4(%rbp)
   1335d:	e9 55 02 00 00       	jmp    135b7 <yysyntax_error+0x2a7>
   13362:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   13365:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   13369:	48 83 e8 05          	sub    $0x5,%rax
   1336d:	0f 87 14 00 00 00    	ja     13387 <yysyntax_error+0x77>
   13373:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   13377:	48 8d 0d f6 5b 00 00 	lea    0x5bf6(%rip),%rcx        # 18f74 <getFreeElement.b+0x774>
   1337e:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   13382:	48 01 c8             	add    %rcx,%rax
   13385:	ff e0                	jmp    *%rax
   13387:	e9 00 00 00 00       	jmp    1338c <yysyntax_error+0x7c>
   1338c:	48 8d 05 23 63 00 00 	lea    0x6323(%rip),%rax        # 196b6 <yyrline+0xd6>
   13393:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   13397:	e9 4b 00 00 00       	jmp    133e7 <yysyntax_error+0xd7>
   1339c:	48 8d 05 0e 65 00 00 	lea    0x650e(%rip),%rax        # 198b1 <yyrline+0x2d1>
   133a3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133a7:	e9 3b 00 00 00       	jmp    133e7 <yysyntax_error+0xd7>
   133ac:	48 8d 05 1a 65 00 00 	lea    0x651a(%rip),%rax        # 198cd <yyrline+0x2ed>
   133b3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133b7:	e9 2b 00 00 00       	jmp    133e7 <yysyntax_error+0xd7>
   133bc:	48 8d 05 34 65 00 00 	lea    0x6534(%rip),%rax        # 198f7 <yyrline+0x317>
   133c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133c7:	e9 1b 00 00 00       	jmp    133e7 <yysyntax_error+0xd7>
   133cc:	48 8d 05 54 65 00 00 	lea    0x6554(%rip),%rax        # 19927 <yyrline+0x347>
   133d3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133d7:	e9 0b 00 00 00       	jmp    133e7 <yysyntax_error+0xd7>
   133dc:	48 8d 05 7a 65 00 00 	lea    0x657a(%rip),%rax        # 1995d <yyrline+0x37d>
   133e3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   133e7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   133eb:	e8 d0 fc fe ff       	call   30c0 <strlen@plt>
   133f0:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
   133f3:	c1 e1 01             	shl    $0x1,%ecx
   133f6:	48 63 c9             	movslq %ecx,%rcx
   133f9:	48 29 c8             	sub    %rcx,%rax
   133fc:	48 83 c0 01          	add    $0x1,%rax
   13400:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   13404:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   1340b:	8b 45 b0             	mov    -0x50(%rbp),%eax
   1340e:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
   13411:	0f 8d 81 00 00 00    	jge    13498 <yysyntax_error+0x188>
   13417:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1341b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1341f:	48 63 45 b0          	movslq -0x50(%rbp),%rax
   13423:	48 63 4c 85 c0       	movslq -0x40(%rbp,%rax,4),%rcx
   13428:	48 8d 05 01 c8 00 00 	lea    0xc801(%rip),%rax        # 1fc30 <yytname>
   1342f:	48 8b 34 c8          	mov    (%rax,%rcx,8),%rsi
   13433:	31 c0                	xor    %eax,%eax
   13435:	89 c7                	mov    %eax,%edi
   13437:	e8 44 07 00 00       	call   13b80 <yytnamerr>
   1343c:	48 89 c1             	mov    %rax,%rcx
   1343f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   13443:	48 01 c8             	add    %rcx,%rax
   13446:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1344a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1344e:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   13452:	0f 8f 21 00 00 00    	jg     13479 <yysyntax_error+0x169>
   13458:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
   1345f:	ff ff 7f 
   13462:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
   13466:	0f 8f 0d 00 00 00    	jg     13479 <yysyntax_error+0x169>
   1346c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   13470:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   13474:	e9 0c 00 00 00       	jmp    13485 <yysyntax_error+0x175>
   13479:	c7 45 fc fe ff ff ff 	movl   $0xfffffffe,-0x4(%rbp)
   13480:	e9 32 01 00 00       	jmp    135b7 <yysyntax_error+0x2a7>
   13485:	e9 00 00 00 00       	jmp    1348a <yysyntax_error+0x17a>
   1348a:	8b 45 b0             	mov    -0x50(%rbp),%eax
   1348d:	83 c0 01             	add    $0x1,%eax
   13490:	89 45 b0             	mov    %eax,-0x50(%rbp)
   13493:	e9 73 ff ff ff       	jmp    1340b <yysyntax_error+0xfb>
   13498:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1349c:	48 8b 00             	mov    (%rax),%rax
   1349f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
   134a3:	0f 8d 54 00 00 00    	jge    134fd <yysyntax_error+0x1ed>
   134a9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   134ad:	48 c1 e1 01          	shl    $0x1,%rcx
   134b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   134b5:	48 89 08             	mov    %rcx,(%rax)
   134b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   134bc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   134c0:	48 3b 01             	cmp    (%rcx),%rax
   134c3:	0f 8f 17 00 00 00    	jg     134e0 <yysyntax_error+0x1d0>
   134c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   134cd:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
   134d4:	ff ff 7f 
   134d7:	48 39 08             	cmp    %rcx,(%rax)
   134da:	0f 8e 11 00 00 00    	jle    134f1 <yysyntax_error+0x1e1>
   134e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   134e4:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
   134eb:	ff ff 7f 
   134ee:	48 89 08             	mov    %rcx,(%rax)
   134f1:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
   134f8:	e9 ba 00 00 00       	jmp    135b7 <yysyntax_error+0x2a7>
   134fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13501:	48 8b 00             	mov    (%rax),%rax
   13504:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13508:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
   1350f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13513:	8a 00                	mov    (%rax),%al
   13515:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   13519:	88 01                	mov    %al,(%rcx)
   1351b:	0f be c0             	movsbl %al,%eax
   1351e:	83 f8 00             	cmp    $0x0,%eax
   13521:	0f 84 89 00 00 00    	je     135b0 <yysyntax_error+0x2a0>
   13527:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1352b:	0f be 00             	movsbl (%rax),%eax
   1352e:	83 f8 25             	cmp    $0x25,%eax
   13531:	0f 85 5c 00 00 00    	jne    13593 <yysyntax_error+0x283>
   13537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1353b:	0f be 40 01          	movsbl 0x1(%rax),%eax
   1353f:	83 f8 73             	cmp    $0x73,%eax
   13542:	0f 85 4b 00 00 00    	jne    13593 <yysyntax_error+0x283>
   13548:	8b 45 9c             	mov    -0x64(%rbp),%eax
   1354b:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
   1354e:	0f 8d 3f 00 00 00    	jge    13593 <yysyntax_error+0x283>
   13554:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
   13558:	8b 45 9c             	mov    -0x64(%rbp),%eax
   1355b:	89 c1                	mov    %eax,%ecx
   1355d:	83 c1 01             	add    $0x1,%ecx
   13560:	89 4d 9c             	mov    %ecx,-0x64(%rbp)
   13563:	48 98                	cltq
   13565:	48 63 4c 85 c0       	movslq -0x40(%rbp,%rax,4),%rcx
   1356a:	48 8d 05 bf c6 00 00 	lea    0xc6bf(%rip),%rax        # 1fc30 <yytname>
   13571:	48 8b 34 c8          	mov    (%rax,%rcx,8),%rsi
   13575:	e8 06 06 00 00       	call   13b80 <yytnamerr>
   1357a:	48 03 45 a0          	add    -0x60(%rbp),%rax
   1357e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13582:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13586:	48 83 c0 02          	add    $0x2,%rax
   1358a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1358e:	e9 18 00 00 00       	jmp    135ab <yysyntax_error+0x29b>
   13593:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13597:	48 83 c0 01          	add    $0x1,%rax
   1359b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1359f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   135a3:	48 83 c0 01          	add    $0x1,%rax
   135a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   135ab:	e9 5f ff ff ff       	jmp    1350f <yysyntax_error+0x1ff>
   135b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   135b7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   135ba:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
   135c1:	5d                   	pop    %rbp
   135c2:	c3                   	ret
   135c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   135ca:	00 00 00 
   135cd:	0f 1f 00             	nopl   (%rax)

00000000000135d0 <yyerror>:
   135d0:	55                   	push   %rbp
   135d1:	48 89 e5             	mov    %rsp,%rbp
   135d4:	48 83 ec 40          	sub    $0x40,%rsp
   135d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   135dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   135e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   135e4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   135e8:	48 8b 05 01 ca 00 00 	mov    0xca01(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   135ef:	48 8b 38             	mov    (%rax),%rdi
   135f2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   135f6:	48 8d 35 6f 4d 00 00 	lea    0x4d6f(%rip),%rsi        # 1836c <_IO_stdin_used+0x36c>
   135fd:	b0 00                	mov    $0x0,%al
   135ff:	e8 2c fb fe ff       	call   3130 <fprintf@plt>
   13604:	48 8b 05 e5 c9 00 00 	mov    0xc9e5(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1360b:	48 8b 38             	mov    (%rax),%rdi
   1360e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13612:	8b 10                	mov    (%rax),%edx
   13614:	48 8d 35 09 61 00 00 	lea    0x6109(%rip),%rsi        # 19724 <yyrline+0x144>
   1361b:	b0 00                	mov    $0x0,%al
   1361d:	e8 0e fb fe ff       	call   3130 <fprintf@plt>
   13622:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13626:	48 8b 40 08          	mov    0x8(%rax),%rax
   1362a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1362e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
   13635:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   13638:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1363c:	8b 09                	mov    (%rcx),%ecx
   1363e:	83 e9 01             	sub    $0x1,%ecx
   13641:	39 c8                	cmp    %ecx,%eax
   13643:	0f 8d 6a 00 00 00    	jge    136b3 <yyerror+0xe3>
   13649:	e9 00 00 00 00       	jmp    1364e <yyerror+0x7e>
   1364e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13652:	0f be 08             	movsbl (%rax),%ecx
   13655:	31 c0                	xor    %eax,%eax
   13657:	83 f9 0a             	cmp    $0xa,%ecx
   1365a:	88 45 c7             	mov    %al,-0x39(%rbp)
   1365d:	0f 84 10 00 00 00    	je     13673 <yyerror+0xa3>
   13663:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13667:	0f be 00             	movsbl (%rax),%eax
   1366a:	83 f8 00             	cmp    $0x0,%eax
   1366d:	0f 95 c0             	setne  %al
   13670:	88 45 c7             	mov    %al,-0x39(%rbp)
   13673:	8a 45 c7             	mov    -0x39(%rbp),%al
   13676:	a8 01                	test   $0x1,%al
   13678:	0f 85 05 00 00 00    	jne    13683 <yyerror+0xb3>
   1367e:	e9 11 00 00 00       	jmp    13694 <yyerror+0xc4>
   13683:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13687:	48 83 c0 01          	add    $0x1,%rax
   1368b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1368f:	e9 ba ff ff ff       	jmp    1364e <yyerror+0x7e>
   13694:	e9 00 00 00 00       	jmp    13699 <yyerror+0xc9>
   13699:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   1369c:	83 c0 01             	add    $0x1,%eax
   1369f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   136a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136a6:	48 83 c0 01          	add    $0x1,%rax
   136aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   136ae:	e9 82 ff ff ff       	jmp    13635 <yyerror+0x65>
   136b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136b7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   136bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136bf:	0f be 08             	movsbl (%rax),%ecx
   136c2:	31 c0                	xor    %eax,%eax
   136c4:	83 f9 0a             	cmp    $0xa,%ecx
   136c7:	88 45 c6             	mov    %al,-0x3a(%rbp)
   136ca:	0f 84 10 00 00 00    	je     136e0 <yyerror+0x110>
   136d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136d4:	0f be 00             	movsbl (%rax),%eax
   136d7:	83 f8 00             	cmp    $0x0,%eax
   136da:	0f 95 c0             	setne  %al
   136dd:	88 45 c6             	mov    %al,-0x3a(%rbp)
   136e0:	8a 45 c6             	mov    -0x3a(%rbp),%al
   136e3:	a8 01                	test   $0x1,%al
   136e5:	0f 85 05 00 00 00    	jne    136f0 <yyerror+0x120>
   136eb:	e9 30 00 00 00       	jmp    13720 <yyerror+0x150>
   136f0:	48 8b 05 f9 c8 00 00 	mov    0xc8f9(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   136f7:	48 8b 38             	mov    (%rax),%rdi
   136fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   136fe:	0f be 10             	movsbl (%rax),%edx
   13701:	48 8d 35 26 60 00 00 	lea    0x6026(%rip),%rsi        # 1972e <yyrline+0x14e>
   13708:	b0 00                	mov    $0x0,%al
   1370a:	e8 21 fa fe ff       	call   3130 <fprintf@plt>
   1370f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13713:	48 83 c0 01          	add    $0x1,%rax
   13717:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1371b:	e9 9b ff ff ff       	jmp    136bb <yyerror+0xeb>
   13720:	48 8b 05 c9 c8 00 00 	mov    0xc8c9(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   13727:	48 8b 38             	mov    (%rax),%rdi
   1372a:	48 8d 35 fa 49 00 00 	lea    0x49fa(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   13731:	b0 00                	mov    $0x0,%al
   13733:	e8 f8 f9 fe ff       	call   3130 <fprintf@plt>
   13738:	bf 01 00 00 00       	mov    $0x1,%edi
   1373d:	e8 ae fa fe ff       	call   31f0 <exit@plt>
   13742:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13749:	00 00 00 
   1374c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013750 <yydestruct>:
   13750:	55                   	push   %rbp
   13751:	48 89 e5             	mov    %rsp,%rbp
   13754:	48 83 ec 30          	sub    $0x30,%rsp
   13758:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1375c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1375f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13763:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   13767:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   1376b:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   1376f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13774:	0f 85 0b 00 00 00    	jne    13785 <yydestruct+0x35>
   1377a:	48 8d 05 18 62 00 00 	lea    0x6218(%rip),%rax        # 19999 <yyrline+0x3b9>
   13781:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13785:	e9 00 00 00 00       	jmp    1378a <yydestruct+0x3a>
   1378a:	83 3d b7 cc 00 00 00 	cmpl   $0x0,0xccb7(%rip)        # 20448 <yydebug>
   13791:	0f 84 56 00 00 00    	je     137ed <yydestruct+0x9d>
   13797:	48 8b 05 52 c8 00 00 	mov    0xc852(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1379e:	48 8b 38             	mov    (%rax),%rdi
   137a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137a5:	48 8d 35 9a 4a 00 00 	lea    0x4a9a(%rip),%rsi        # 18246 <_IO_stdin_used+0x246>
   137ac:	b0 00                	mov    $0x0,%al
   137ae:	e8 7d f9 fe ff       	call   3130 <fprintf@plt>
   137b3:	48 8b 05 36 c8 00 00 	mov    0xc836(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   137ba:	48 8b 38             	mov    (%rax),%rdi
   137bd:	8b 75 f4             	mov    -0xc(%rbp),%esi
   137c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   137c4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   137c8:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
   137cc:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
   137d0:	e8 4b f9 ff ff       	call   13120 <yy_symbol_print>
   137d5:	48 8b 05 14 c8 00 00 	mov    0xc814(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   137dc:	48 8b 38             	mov    (%rax),%rdi
   137df:	48 8d 35 45 49 00 00 	lea    0x4945(%rip),%rsi        # 1812b <_IO_stdin_used+0x12b>
   137e6:	b0 00                	mov    $0x0,%al
   137e8:	e8 43 f9 fe ff       	call   3130 <fprintf@plt>
   137ed:	e9 00 00 00 00       	jmp    137f2 <yydestruct+0xa2>
   137f2:	48 83 c4 30          	add    $0x30,%rsp
   137f6:	5d                   	pop    %rbp
   137f7:	c3                   	ret
   137f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   137ff:	00 

0000000000013800 <slipL_createParser>:
   13800:	55                   	push   %rbp
   13801:	48 89 e5             	mov    %rsp,%rbp
   13804:	48 83 ec 20          	sub    $0x20,%rsp
   13808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1380c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13810:	bf 20 00 00 00       	mov    $0x20,%edi
   13815:	e8 16 69 ff ff       	call   a130 <slipM_malloc>
   1381a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1381e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   13822:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13826:	48 89 48 08          	mov    %rcx,0x8(%rax)
   1382a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1382e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13832:	48 89 48 10          	mov    %rcx,0x10(%rax)
   13836:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   1383a:	e8 21 3f 00 00       	call   17760 <yylex_init>
   1383f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13843:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   1384a:	00 
   1384b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1384f:	48 83 c4 20          	add    $0x20,%rsp
   13853:	5d                   	pop    %rbp
   13854:	c3                   	ret
   13855:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1385c:	00 00 00 
   1385f:	90                   	nop

0000000000013860 <slipL_destroyParser>:
   13860:	55                   	push   %rbp
   13861:	48 89 e5             	mov    %rsp,%rbp
   13864:	48 83 ec 10          	sub    $0x10,%rsp
   13868:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1386c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13870:	48 8b 38             	mov    (%rax),%rdi
   13873:	e8 f8 40 00 00       	call   17970 <yylex_destroy>
   13878:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1387c:	e8 2f 69 ff ff       	call   a1b0 <slipM_free>
   13881:	48 83 c4 10          	add    $0x10,%rsp
   13885:	5d                   	pop    %rbp
   13886:	c3                   	ret
   13887:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1388e:	00 00 

0000000000013890 <slipL_parseString>:
   13890:	55                   	push   %rbp
   13891:	48 89 e5             	mov    %rsp,%rbp
   13894:	48 83 ec 20          	sub    $0x20,%rsp
   13898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1389c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   138a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   138a4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   138a8:	e8 53 ff ff ff       	call   13800 <slipL_createParser>
   138ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   138b1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   138b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138b9:	48 8b 30             	mov    (%rax),%rsi
   138bc:	e8 3f 39 00 00       	call   17200 <yy_scan_string>
   138c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138c5:	48 8b 38             	mov    (%rax),%rdi
   138c8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   138cc:	e8 cf d4 ff ff       	call   10da0 <yyparse>
   138d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138d5:	48 8b 40 18          	mov    0x18(%rax),%rax
   138d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   138dd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   138e1:	e8 7a ff ff ff       	call   13860 <slipL_destroyParser>
   138e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   138ea:	48 83 c4 20          	add    $0x20,%rsp
   138ee:	5d                   	pop    %rbp
   138ef:	c3                   	ret

00000000000138f0 <yysymbol_name>:
   138f0:	55                   	push   %rbp
   138f1:	48 89 e5             	mov    %rsp,%rbp
   138f4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   138f7:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
   138fb:	48 8d 05 2e c3 00 00 	lea    0xc32e(%rip),%rax        # 1fc30 <yytname>
   13902:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   13906:	5d                   	pop    %rbp
   13907:	c3                   	ret
   13908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1390f:	00 

0000000000013910 <yy_location_print_>:
   13910:	55                   	push   %rbp
   13911:	48 89 e5             	mov    %rsp,%rbp
   13914:	48 83 ec 20          	sub    $0x20,%rsp
   13918:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1391c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13920:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   13927:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1392b:	31 c0                	xor    %eax,%eax
   1392d:	3b 41 0c             	cmp    0xc(%rcx),%eax
   13930:	0f 84 12 00 00 00    	je     13948 <yy_location_print_+0x38>
   13936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1393a:	8b 40 0c             	mov    0xc(%rax),%eax
   1393d:	83 e8 01             	sub    $0x1,%eax
   13940:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   13943:	e9 0a 00 00 00       	jmp    13952 <yy_location_print_+0x42>
   13948:	31 c0                	xor    %eax,%eax
   1394a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1394d:	e9 00 00 00 00       	jmp    13952 <yy_location_print_+0x42>
   13952:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   13955:	89 45 e8             	mov    %eax,-0x18(%rbp)
   13958:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1395c:	31 c0                	xor    %eax,%eax
   1395e:	3b 01                	cmp    (%rcx),%eax
   13960:	0f 8f 51 00 00 00    	jg     139b7 <yy_location_print_+0xa7>
   13966:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1396a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1396e:	8b 10                	mov    (%rax),%edx
   13970:	48 8d 35 ef 68 00 00 	lea    0x68ef(%rip),%rsi        # 1a266 <yy_rule_can_match_eol+0x306>
   13977:	b0 00                	mov    $0x0,%al
   13979:	e8 b2 f7 fe ff       	call   3130 <fprintf@plt>
   1397e:	03 45 ec             	add    -0x14(%rbp),%eax
   13981:	89 45 ec             	mov    %eax,-0x14(%rbp)
   13984:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   13988:	31 c0                	xor    %eax,%eax
   1398a:	3b 41 04             	cmp    0x4(%rcx),%eax
   1398d:	0f 8f 1f 00 00 00    	jg     139b2 <yy_location_print_+0xa2>
   13993:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1399b:	8b 50 04             	mov    0x4(%rax),%edx
   1399e:	48 8d 35 d4 5e 00 00 	lea    0x5ed4(%rip),%rsi        # 19879 <yyrline+0x299>
   139a5:	b0 00                	mov    $0x0,%al
   139a7:	e8 84 f7 fe ff       	call   3130 <fprintf@plt>
   139ac:	03 45 ec             	add    -0x14(%rbp),%eax
   139af:	89 45 ec             	mov    %eax,-0x14(%rbp)
   139b2:	e9 00 00 00 00       	jmp    139b7 <yy_location_print_+0xa7>
   139b7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   139bb:	31 c0                	xor    %eax,%eax
   139bd:	3b 41 08             	cmp    0x8(%rcx),%eax
   139c0:	0f 8f 9d 00 00 00    	jg     13a63 <yy_location_print_+0x153>
   139c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   139ca:	8b 00                	mov    (%rax),%eax
   139cc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   139d0:	3b 41 08             	cmp    0x8(%rcx),%eax
   139d3:	0f 8d 4a 00 00 00    	jge    13a23 <yy_location_print_+0x113>
   139d9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   139dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   139e1:	8b 50 08             	mov    0x8(%rax),%edx
   139e4:	48 8d 35 92 5e 00 00 	lea    0x5e92(%rip),%rsi        # 1987d <yyrline+0x29d>
   139eb:	b0 00                	mov    $0x0,%al
   139ed:	e8 3e f7 fe ff       	call   3130 <fprintf@plt>
   139f2:	03 45 ec             	add    -0x14(%rbp),%eax
   139f5:	89 45 ec             	mov    %eax,-0x14(%rbp)
   139f8:	31 c0                	xor    %eax,%eax
   139fa:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   139fd:	0f 8f 1b 00 00 00    	jg     13a1e <yy_location_print_+0x10e>
   13a03:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13a07:	8b 55 e8             	mov    -0x18(%rbp),%edx
   13a0a:	48 8d 35 68 5e 00 00 	lea    0x5e68(%rip),%rsi        # 19879 <yyrline+0x299>
   13a11:	b0 00                	mov    $0x0,%al
   13a13:	e8 18 f7 fe ff       	call   3130 <fprintf@plt>
   13a18:	03 45 ec             	add    -0x14(%rbp),%eax
   13a1b:	89 45 ec             	mov    %eax,-0x14(%rbp)
   13a1e:	e9 3b 00 00 00       	jmp    13a5e <yy_location_print_+0x14e>
   13a23:	31 c0                	xor    %eax,%eax
   13a25:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   13a28:	0f 8f 2b 00 00 00    	jg     13a59 <yy_location_print_+0x149>
   13a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13a32:	8b 40 04             	mov    0x4(%rax),%eax
   13a35:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   13a38:	0f 8d 1b 00 00 00    	jge    13a59 <yy_location_print_+0x149>
   13a3e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   13a42:	8b 55 e8             	mov    -0x18(%rbp),%edx
   13a45:	48 8d 35 31 5e 00 00 	lea    0x5e31(%rip),%rsi        # 1987d <yyrline+0x29d>
   13a4c:	b0 00                	mov    $0x0,%al
   13a4e:	e8 dd f6 fe ff       	call   3130 <fprintf@plt>
   13a53:	03 45 ec             	add    -0x14(%rbp),%eax
   13a56:	89 45 ec             	mov    %eax,-0x14(%rbp)
   13a59:	e9 00 00 00 00       	jmp    13a5e <yy_location_print_+0x14e>
   13a5e:	e9 00 00 00 00       	jmp    13a63 <yy_location_print_+0x153>
   13a63:	8b 45 ec             	mov    -0x14(%rbp),%eax
   13a66:	48 83 c4 20          	add    $0x20,%rsp
   13a6a:	5d                   	pop    %rbp
   13a6b:	c3                   	ret
   13a6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000013a70 <yy_symbol_value_print>:
   13a70:	55                   	push   %rbp
   13a71:	48 89 e5             	mov    %rsp,%rbp
   13a74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13a78:	89 75 f4             	mov    %esi,-0xc(%rbp)
   13a7b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13a7f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   13a83:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   13a87:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   13a8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a8f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   13a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13a98:	0f 85 05 00 00 00    	jne    13aa3 <yy_symbol_value_print+0x33>
   13a9e:	e9 00 00 00 00       	jmp    13aa3 <yy_symbol_value_print+0x33>
   13aa3:	5d                   	pop    %rbp
   13aa4:	c3                   	ret
   13aa5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13aac:	00 00 00 
   13aaf:	90                   	nop

0000000000013ab0 <yy_syntax_error_arguments>:
   13ab0:	55                   	push   %rbp
   13ab1:	48 89 e5             	mov    %rsp,%rbp
   13ab4:	48 83 ec 40          	sub    $0x40,%rsp
   13ab8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13abc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13ac0:	89 55 e4             	mov    %edx,-0x1c(%rbp)
   13ac3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
   13aca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13ace:	83 78 08 fe          	cmpl   $0xfffffffe,0x8(%rax)
   13ad2:	0f 84 8c 00 00 00    	je     13b64 <yy_syntax_error_arguments+0xb4>
   13ad8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13add:	0f 84 12 00 00 00    	je     13af5 <yy_syntax_error_arguments+0x45>
   13ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13ae7:	8b 50 08             	mov    0x8(%rax),%edx
   13aea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13aee:	48 63 4d e0          	movslq -0x20(%rbp),%rcx
   13af2:	89 14 88             	mov    %edx,(%rax,%rcx,4)
   13af5:	8b 45 e0             	mov    -0x20(%rbp),%eax
   13af8:	83 c0 01             	add    $0x1,%eax
   13afb:	89 45 e0             	mov    %eax,-0x20(%rbp)
   13afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13b02:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   13b06:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13b0b:	0f 84 11 00 00 00    	je     13b22 <yy_syntax_error_arguments+0x72>
   13b11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b15:	48 83 c0 04          	add    $0x4,%rax
   13b19:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   13b1d:	e9 08 00 00 00       	jmp    13b2a <yy_syntax_error_arguments+0x7a>
   13b22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b26:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   13b2a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   13b2e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   13b32:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   13b35:	83 ea 01             	sub    $0x1,%edx
   13b38:	e8 a3 01 00 00       	call   13ce0 <yypcontext_expected_tokens>
   13b3d:	89 45 dc             	mov    %eax,-0x24(%rbp)
   13b40:	83 7d dc fe          	cmpl   $0xfffffffe,-0x24(%rbp)
   13b44:	0f 85 0c 00 00 00    	jne    13b56 <yy_syntax_error_arguments+0xa6>
   13b4a:	c7 45 fc fe ff ff ff 	movl   $0xfffffffe,-0x4(%rbp)
   13b51:	e9 14 00 00 00       	jmp    13b6a <yy_syntax_error_arguments+0xba>
   13b56:	8b 45 dc             	mov    -0x24(%rbp),%eax
   13b59:	03 45 e0             	add    -0x20(%rbp),%eax
   13b5c:	89 45 e0             	mov    %eax,-0x20(%rbp)
   13b5f:	e9 00 00 00 00       	jmp    13b64 <yy_syntax_error_arguments+0xb4>
   13b64:	8b 45 e0             	mov    -0x20(%rbp),%eax
   13b67:	89 45 fc             	mov    %eax,-0x4(%rbp)
   13b6a:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13b6d:	48 83 c4 40          	add    $0x40,%rsp
   13b71:	5d                   	pop    %rbp
   13b72:	c3                   	ret
   13b73:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13b7a:	00 00 00 
   13b7d:	0f 1f 00             	nopl   (%rax)

0000000000013b80 <yytnamerr>:
   13b80:	55                   	push   %rbp
   13b81:	48 89 e5             	mov    %rsp,%rbp
   13b84:	48 83 ec 30          	sub    $0x30,%rsp
   13b88:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13b8c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13b90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b94:	0f be 00             	movsbl (%rax),%eax
   13b97:	83 f8 22             	cmp    $0x22,%eax
   13b9a:	0f 85 f2 00 00 00    	jne    13c92 <yytnamerr+0x112>
   13ba0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   13ba7:	00 
   13ba8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   13bb0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13bb4:	48 89 c1             	mov    %rax,%rcx
   13bb7:	48 83 c1 01          	add    $0x1,%rcx
   13bbb:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   13bbf:	0f be 40 01          	movsbl 0x1(%rax),%eax
   13bc3:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   13bc6:	83 e8 22             	sub    $0x22,%eax
   13bc9:	0f 84 95 00 00 00    	je     13c64 <yytnamerr+0xe4>
   13bcf:	e9 00 00 00 00       	jmp    13bd4 <yytnamerr+0x54>
   13bd4:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   13bd7:	83 e8 27             	sub    $0x27,%eax
   13bda:	0f 84 27 00 00 00    	je     13c07 <yytnamerr+0x87>
   13be0:	e9 00 00 00 00       	jmp    13be5 <yytnamerr+0x65>
   13be5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   13be8:	83 e8 2c             	sub    $0x2c,%eax
   13beb:	0f 84 16 00 00 00    	je     13c07 <yytnamerr+0x87>
   13bf1:	e9 00 00 00 00       	jmp    13bf6 <yytnamerr+0x76>
   13bf6:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   13bf9:	83 e8 5c             	sub    $0x5c,%eax
   13bfc:	0f 84 0a 00 00 00    	je     13c0c <yytnamerr+0x8c>
   13c02:	e9 30 00 00 00       	jmp    13c37 <yytnamerr+0xb7>
   13c07:	e9 81 00 00 00       	jmp    13c8d <yytnamerr+0x10d>
   13c0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13c10:	48 89 c1             	mov    %rax,%rcx
   13c13:	48 83 c1 01          	add    $0x1,%rcx
   13c17:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   13c1b:	0f be 40 01          	movsbl 0x1(%rax),%eax
   13c1f:	83 f8 5c             	cmp    $0x5c,%eax
   13c22:	0f 84 05 00 00 00    	je     13c2d <yytnamerr+0xad>
   13c28:	e9 60 00 00 00       	jmp    13c8d <yytnamerr+0x10d>
   13c2d:	e9 00 00 00 00       	jmp    13c32 <yytnamerr+0xb2>
   13c32:	e9 00 00 00 00       	jmp    13c37 <yytnamerr+0xb7>
   13c37:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   13c3c:	0f 84 11 00 00 00    	je     13c53 <yytnamerr+0xd3>
   13c42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13c46:	8a 10                	mov    (%rax),%dl
   13c48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13c4c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   13c50:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   13c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13c57:	48 83 c0 01          	add    $0x1,%rax
   13c5b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13c5f:	e9 24 00 00 00       	jmp    13c88 <yytnamerr+0x108>
   13c64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   13c69:	0f 84 0c 00 00 00    	je     13c7b <yytnamerr+0xfb>
   13c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13c73:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   13c77:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   13c7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13c7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13c83:	e9 3f 00 00 00       	jmp    13cc7 <yytnamerr+0x147>
   13c88:	e9 23 ff ff ff       	jmp    13bb0 <yytnamerr+0x30>
   13c8d:	e9 00 00 00 00       	jmp    13c92 <yytnamerr+0x112>
   13c92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   13c97:	0f 84 1d 00 00 00    	je     13cba <yytnamerr+0x13a>
   13c9d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   13ca1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   13ca5:	e8 c6 01 00 00       	call   13e70 <yystpcpy>
   13caa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   13cae:	48 29 c8             	sub    %rcx,%rax
   13cb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13cb5:	e9 0d 00 00 00       	jmp    13cc7 <yytnamerr+0x147>
   13cba:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   13cbe:	e8 fd f3 fe ff       	call   30c0 <strlen@plt>
   13cc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ccb:	48 83 c4 30          	add    $0x30,%rsp
   13ccf:	5d                   	pop    %rbp
   13cd0:	c3                   	ret
   13cd1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   13cd8:	00 00 00 
   13cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000013ce0 <yypcontext_expected_tokens>:
   13ce0:	55                   	push   %rbp
   13ce1:	48 89 e5             	mov    %rsp,%rbp
   13ce4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13ce8:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13cec:	89 55 e4             	mov    %edx,-0x1c(%rbp)
   13cef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
   13cf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13cfa:	48 8b 00             	mov    (%rax),%rax
   13cfd:	0f be 00             	movsbl (%rax),%eax
   13d00:	48 63 c8             	movslq %eax,%rcx
   13d03:	48 8d 05 86 52 00 00 	lea    0x5286(%rip),%rax        # 18f90 <yypact>
   13d0a:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   13d0e:	89 45 dc             	mov    %eax,-0x24(%rbp)
   13d11:	83 7d dc da          	cmpl   $0xffffffda,-0x24(%rbp)
   13d15:	0f 84 1e 01 00 00    	je     13e39 <yypcontext_expected_tokens+0x159>
   13d1b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   13d1f:	0f 8d 0d 00 00 00    	jge    13d32 <yypcontext_expected_tokens+0x52>
   13d25:	31 c0                	xor    %eax,%eax
   13d27:	2b 45 dc             	sub    -0x24(%rbp),%eax
   13d2a:	89 45 c8             	mov    %eax,-0x38(%rbp)
   13d2d:	e9 0a 00 00 00       	jmp    13d3c <yypcontext_expected_tokens+0x5c>
   13d32:	31 c0                	xor    %eax,%eax
   13d34:	89 45 c8             	mov    %eax,-0x38(%rbp)
   13d37:	e9 00 00 00 00       	jmp    13d3c <yypcontext_expected_tokens+0x5c>
   13d3c:	8b 45 c8             	mov    -0x38(%rbp),%eax
   13d3f:	89 45 d8             	mov    %eax,-0x28(%rbp)
   13d42:	b8 69 01 00 00       	mov    $0x169,%eax
   13d47:	2b 45 dc             	sub    -0x24(%rbp),%eax
   13d4a:	83 c0 01             	add    $0x1,%eax
   13d4d:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   13d50:	83 7d d4 24          	cmpl   $0x24,-0x2c(%rbp)
   13d54:	0f 8d 0b 00 00 00    	jge    13d65 <yypcontext_expected_tokens+0x85>
   13d5a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   13d5d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   13d60:	e9 0d 00 00 00       	jmp    13d72 <yypcontext_expected_tokens+0x92>
   13d65:	b8 24 00 00 00       	mov    $0x24,%eax
   13d6a:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   13d6d:	e9 00 00 00 00       	jmp    13d72 <yypcontext_expected_tokens+0x92>
   13d72:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   13d75:	89 45 d0             	mov    %eax,-0x30(%rbp)
   13d78:	8b 45 d8             	mov    -0x28(%rbp),%eax
   13d7b:	89 45 cc             	mov    %eax,-0x34(%rbp)
   13d7e:	8b 45 cc             	mov    -0x34(%rbp),%eax
   13d81:	3b 45 d0             	cmp    -0x30(%rbp),%eax
   13d84:	0f 8d aa 00 00 00    	jge    13e34 <yypcontext_expected_tokens+0x154>
   13d8a:	8b 45 cc             	mov    -0x34(%rbp),%eax
   13d8d:	03 45 dc             	add    -0x24(%rbp),%eax
   13d90:	48 63 c8             	movslq %eax,%rcx
   13d93:	48 8d 05 e6 53 00 00 	lea    0x53e6(%rip),%rax        # 19180 <yycheck>
   13d9a:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   13d9e:	3b 45 cc             	cmp    -0x34(%rbp),%eax
   13da1:	0f 85 7a 00 00 00    	jne    13e21 <yypcontext_expected_tokens+0x141>
   13da7:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
   13dab:	0f 84 70 00 00 00    	je     13e21 <yypcontext_expected_tokens+0x141>
   13db1:	8b 45 cc             	mov    -0x34(%rbp),%eax
   13db4:	03 45 dc             	add    -0x24(%rbp),%eax
   13db7:	48 63 c8             	movslq %eax,%rcx
   13dba:	48 8d 05 2f 55 00 00 	lea    0x552f(%rip),%rax        # 192f0 <yytable>
   13dc1:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   13dc5:	83 f8 d7             	cmp    $0xffffffd7,%eax
   13dc8:	0f 84 53 00 00 00    	je     13e21 <yypcontext_expected_tokens+0x141>
   13dce:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13dd3:	0f 85 0e 00 00 00    	jne    13de7 <yypcontext_expected_tokens+0x107>
   13dd9:	8b 45 e0             	mov    -0x20(%rbp),%eax
   13ddc:	83 c0 01             	add    $0x1,%eax
   13ddf:	89 45 e0             	mov    %eax,-0x20(%rbp)
   13de2:	e9 35 00 00 00       	jmp    13e1c <yypcontext_expected_tokens+0x13c>
   13de7:	8b 45 e0             	mov    -0x20(%rbp),%eax
   13dea:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
   13ded:	0f 85 0c 00 00 00    	jne    13dff <yypcontext_expected_tokens+0x11f>
   13df3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   13dfa:	e9 6a 00 00 00       	jmp    13e69 <yypcontext_expected_tokens+0x189>
   13dff:	8b 55 cc             	mov    -0x34(%rbp),%edx
   13e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e06:	8b 4d e0             	mov    -0x20(%rbp),%ecx
   13e09:	89 ce                	mov    %ecx,%esi
   13e0b:	83 c6 01             	add    $0x1,%esi
   13e0e:	89 75 e0             	mov    %esi,-0x20(%rbp)
   13e11:	48 63 c9             	movslq %ecx,%rcx
   13e14:	89 14 88             	mov    %edx,(%rax,%rcx,4)
   13e17:	e9 00 00 00 00       	jmp    13e1c <yypcontext_expected_tokens+0x13c>
   13e1c:	e9 00 00 00 00       	jmp    13e21 <yypcontext_expected_tokens+0x141>
   13e21:	e9 00 00 00 00       	jmp    13e26 <yypcontext_expected_tokens+0x146>
   13e26:	8b 45 cc             	mov    -0x34(%rbp),%eax
   13e29:	83 c0 01             	add    $0x1,%eax
   13e2c:	89 45 cc             	mov    %eax,-0x34(%rbp)
   13e2f:	e9 4a ff ff ff       	jmp    13d7e <yypcontext_expected_tokens+0x9e>
   13e34:	e9 00 00 00 00       	jmp    13e39 <yypcontext_expected_tokens+0x159>
   13e39:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13e3e:	0f 84 1f 00 00 00    	je     13e63 <yypcontext_expected_tokens+0x183>
   13e44:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
   13e48:	0f 85 15 00 00 00    	jne    13e63 <yypcontext_expected_tokens+0x183>
   13e4e:	31 c0                	xor    %eax,%eax
   13e50:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
   13e53:	0f 8d 0a 00 00 00    	jge    13e63 <yypcontext_expected_tokens+0x183>
   13e59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e5d:	c7 00 fe ff ff ff    	movl   $0xfffffffe,(%rax)
   13e63:	8b 45 e0             	mov    -0x20(%rbp),%eax
   13e66:	89 45 fc             	mov    %eax,-0x4(%rbp)
   13e69:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13e6c:	5d                   	pop    %rbp
   13e6d:	c3                   	ret
   13e6e:	66 90                	xchg   %ax,%ax

0000000000013e70 <yystpcpy>:
   13e70:	55                   	push   %rbp
   13e71:	48 89 e5             	mov    %rsp,%rbp
   13e74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13e78:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13e88:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13e8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13e90:	48 89 c1             	mov    %rax,%rcx
   13e93:	48 83 c1 01          	add    $0x1,%rcx
   13e97:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   13e9b:	8a 00                	mov    (%rax),%al
   13e9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   13ea1:	48 89 ca             	mov    %rcx,%rdx
   13ea4:	48 83 c2 01          	add    $0x1,%rdx
   13ea8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   13eac:	88 01                	mov    %al,(%rcx)
   13eae:	0f be c0             	movsbl %al,%eax
   13eb1:	83 f8 00             	cmp    $0x0,%eax
   13eb4:	0f 84 05 00 00 00    	je     13ebf <yystpcpy+0x4f>
   13eba:	e9 cd ff ff ff       	jmp    13e8c <yystpcpy+0x1c>
   13ebf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ec3:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
   13ec7:	5d                   	pop    %rbp
   13ec8:	c3                   	ret
   13ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000013ed0 <yylex>:
   13ed0:	55                   	push   %rbp
   13ed1:	48 89 e5             	mov    %rsp,%rbp
   13ed4:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
   13edb:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   13edf:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   13ee3:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   13ee7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13eeb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   13eef:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   13ef3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13ef7:	48 89 88 90 00 00 00 	mov    %rcx,0x90(%rax)
   13efe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   13f02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f06:	48 89 88 98 00 00 00 	mov    %rcx,0x98(%rax)
   13f0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f11:	83 78 48 00          	cmpl   $0x0,0x48(%rax)
   13f15:	0f 85 e3 00 00 00    	jne    13ffe <yylex+0x12e>
   13f1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f1f:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%rax)
   13f26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f2a:	83 78 4c 00          	cmpl   $0x0,0x4c(%rax)
   13f2e:	0f 85 0b 00 00 00    	jne    13f3f <yylex+0x6f>
   13f34:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f38:	c7 40 4c 01 00 00 00 	movl   $0x1,0x4c(%rax)
   13f3f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f43:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   13f48:	0f 85 12 00 00 00    	jne    13f60 <yylex+0x90>
   13f4e:	48 8b 05 7b c0 00 00 	mov    0xc07b(%rip),%rax        # 1ffd0 <stdin@GLIBC_2.2.5>
   13f55:	48 8b 08             	mov    (%rax),%rcx
   13f58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f5c:	48 89 48 08          	mov    %rcx,0x8(%rax)
   13f60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f64:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
   13f69:	0f 85 12 00 00 00    	jne    13f81 <yylex+0xb1>
   13f6f:	48 8b 05 52 c0 00 00 	mov    0xc052(%rip),%rax        # 1ffc8 <stdout@GLIBC_2.2.5>
   13f76:	48 8b 08             	mov    (%rax),%rcx
   13f79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f7d:	48 89 48 10          	mov    %rcx,0x10(%rax)
   13f81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f85:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   13f8a:	0f 84 20 00 00 00    	je     13fb0 <yylex+0xe0>
   13f90:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13f94:	48 8b 40 28          	mov    0x28(%rax),%rax
   13f98:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   13f9c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   13fa0:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   13fa5:	0f 85 4a 00 00 00    	jne    13ff5 <yylex+0x125>
   13fab:	e9 0f 00 00 00       	jmp    13fbf <yylex+0xef>
   13fb0:	31 c0                	xor    %eax,%eax
   13fb2:	a8 01                	test   $0x1,%al
   13fb4:	0f 85 3b 00 00 00    	jne    13ff5 <yylex+0x125>
   13fba:	e9 00 00 00 00       	jmp    13fbf <yylex+0xef>
   13fbf:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   13fc3:	e8 b8 1c 00 00       	call   15c80 <yyensure_buffer_stack>
   13fc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13fcc:	48 8b 78 08          	mov    0x8(%rax),%rdi
   13fd0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   13fd4:	be 00 40 00 00       	mov    $0x4000,%esi
   13fd9:	e8 f2 1d 00 00       	call   15dd0 <yy_create_buffer>
   13fde:	48 89 c2             	mov    %rax,%rdx
   13fe1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   13fe5:	48 8b 40 28          	mov    0x28(%rax),%rax
   13fe9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   13fed:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   13ff1:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
   13ff5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   13ff9:	e8 82 1e 00 00       	call   15e80 <yy_load_buffer_state>
   13ffe:	e9 00 00 00 00       	jmp    14003 <yylex+0x133>
   14003:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14007:	48 8b 40 40          	mov    0x40(%rax),%rax
   1400b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1400f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14013:	8a 48 30             	mov    0x30(%rax),%cl
   14016:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1401a:	88 08                	mov    %cl,(%rax)
   1401c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14020:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   14024:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14028:	8b 40 4c             	mov    0x4c(%rax),%eax
   1402b:	89 45 dc             	mov    %eax,-0x24(%rbp)
   1402e:	e9 00 00 00 00       	jmp    14033 <yylex+0x163>
   14033:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14037:	0f b6 00             	movzbl (%rax),%eax
   1403a:	89 c1                	mov    %eax,%ecx
   1403c:	48 8d 05 dd 59 00 00 	lea    0x59dd(%rip),%rax        # 19a20 <yy_ec>
   14043:	8a 04 08             	mov    (%rax,%rcx,1),%al
   14046:	88 45 b7             	mov    %al,-0x49(%rbp)
   14049:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   1404d:	48 8d 05 cc 5a 00 00 	lea    0x5acc(%rip),%rax        # 19b20 <yy_accept>
   14054:	66 83 3c 48 00       	cmpw   $0x0,(%rax,%rcx,2)
   14059:	0f 84 16 00 00 00    	je     14075 <yylex+0x1a5>
   1405f:	8b 4d dc             	mov    -0x24(%rbp),%ecx
   14062:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14066:	89 48 68             	mov    %ecx,0x68(%rax)
   14069:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1406d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14071:	48 89 48 70          	mov    %rcx,0x70(%rax)
   14075:	e9 00 00 00 00       	jmp    1407a <yylex+0x1aa>
   1407a:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   1407e:	48 8d 05 5b 5c 00 00 	lea    0x5c5b(%rip),%rax        # 19ce0 <yy_base>
   14085:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   14089:	0f b6 4d b7          	movzbl -0x49(%rbp),%ecx
   1408d:	01 c8                	add    %ecx,%eax
   1408f:	48 63 c8             	movslq %eax,%rcx
   14092:	48 8d 05 07 5b 00 00 	lea    0x5b07(%rip),%rax        # 19ba0 <yy_chk>
   14099:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   1409d:	3b 45 dc             	cmp    -0x24(%rbp),%eax
   140a0:	0f 84 34 00 00 00    	je     140da <yylex+0x20a>
   140a6:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   140aa:	48 8d 05 bf 5c 00 00 	lea    0x5cbf(%rip),%rax        # 19d70 <yy_def>
   140b1:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   140b5:	89 45 dc             	mov    %eax,-0x24(%rbp)
   140b8:	83 7d dc 3d          	cmpl   $0x3d,-0x24(%rbp)
   140bc:	0f 8c 13 00 00 00    	jl     140d5 <yylex+0x205>
   140c2:	0f b6 45 b7          	movzbl -0x49(%rbp),%eax
   140c6:	89 c1                	mov    %eax,%ecx
   140c8:	48 8d 05 31 5d 00 00 	lea    0x5d31(%rip),%rax        # 19e00 <yy_meta>
   140cf:	8a 04 08             	mov    (%rax,%rcx,1),%al
   140d2:	88 45 b7             	mov    %al,-0x49(%rbp)
   140d5:	e9 a0 ff ff ff       	jmp    1407a <yylex+0x1aa>
   140da:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   140de:	48 8d 05 fb 5b 00 00 	lea    0x5bfb(%rip),%rax        # 19ce0 <yy_base>
   140e5:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   140e9:	0f b6 4d b7          	movzbl -0x49(%rbp),%ecx
   140ed:	01 c8                	add    %ecx,%eax
   140ef:	48 63 c8             	movslq %eax,%rcx
   140f2:	48 8d 05 27 5d 00 00 	lea    0x5d27(%rip),%rax        # 19e20 <yy_nxt>
   140f9:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   140fd:	89 45 dc             	mov    %eax,-0x24(%rbp)
   14100:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14104:	48 83 c0 01          	add    $0x1,%rax
   14108:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1410c:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   14110:	48 8d 05 c9 5b 00 00 	lea    0x5bc9(%rip),%rax        # 19ce0 <yy_base>
   14117:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   1411b:	83 f8 7b             	cmp    $0x7b,%eax
   1411e:	0f 85 0f ff ff ff    	jne    14033 <yylex+0x163>
   14124:	e9 00 00 00 00       	jmp    14129 <yylex+0x259>
   14129:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   1412d:	48 8d 05 ec 59 00 00 	lea    0x59ec(%rip),%rax        # 19b20 <yy_accept>
   14134:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   14138:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   1413b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
   1413f:	0f 85 28 00 00 00    	jne    1416d <yylex+0x29d>
   14145:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14149:	48 8b 40 70          	mov    0x70(%rax),%rax
   1414d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14151:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14155:	8b 40 68             	mov    0x68(%rax),%eax
   14158:	89 45 dc             	mov    %eax,-0x24(%rbp)
   1415b:	48 63 4d dc          	movslq -0x24(%rbp),%rcx
   1415f:	48 8d 05 ba 59 00 00 	lea    0x59ba(%rip),%rax        # 19b20 <yy_accept>
   14166:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   1416a:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   1416d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   14171:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14175:	48 89 88 80 00 00 00 	mov    %rcx,0x80(%rax)
   1417c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14180:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   14184:	48 29 c8             	sub    %rcx,%rax
   14187:	89 c1                	mov    %eax,%ecx
   14189:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1418d:	89 48 38             	mov    %ecx,0x38(%rax)
   14190:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14194:	8a 08                	mov    (%rax),%cl
   14196:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1419a:	88 48 30             	mov    %cl,0x30(%rax)
   1419d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   141a1:	c6 00 00             	movb   $0x0,(%rax)
   141a4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   141a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   141ac:	48 89 48 40          	mov    %rcx,0x40(%rax)
   141b0:	83 7d c4 17          	cmpl   $0x17,-0x3c(%rbp)
   141b4:	0f 84 a2 00 00 00    	je     1425c <yylex+0x38c>
   141ba:	48 63 4d c4          	movslq -0x3c(%rbp),%rcx
   141be:	48 8d 05 9b 5d 00 00 	lea    0x5d9b(%rip),%rax        # 19f60 <yy_rule_can_match_eol>
   141c5:	83 3c 88 00          	cmpl   $0x0,(%rax,%rcx,4)
   141c9:	0f 84 8d 00 00 00    	je     1425c <yylex+0x38c>
   141cf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   141d6:	8b 45 b0             	mov    -0x50(%rbp),%eax
   141d9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   141dd:	3b 41 38             	cmp    0x38(%rcx),%eax
   141e0:	0f 8d 71 00 00 00    	jge    14257 <yylex+0x387>
   141e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   141ea:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   141f1:	48 63 4d b0          	movslq -0x50(%rbp),%rcx
   141f5:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   141f9:	83 f8 0a             	cmp    $0xa,%eax
   141fc:	0f 85 42 00 00 00    	jne    14244 <yylex+0x374>
   14202:	e9 00 00 00 00       	jmp    14207 <yylex+0x337>
   14207:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1420b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1420f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14213:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14217:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1421b:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1421e:	83 c1 01             	add    $0x1,%ecx
   14221:	89 48 2c             	mov    %ecx,0x2c(%rax)
   14224:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14228:	48 8b 40 28          	mov    0x28(%rax),%rax
   1422c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14230:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14234:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14238:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
   1423f:	e9 00 00 00 00       	jmp    14244 <yylex+0x374>
   14244:	e9 00 00 00 00       	jmp    14249 <yylex+0x379>
   14249:	8b 45 b0             	mov    -0x50(%rbp),%eax
   1424c:	83 c0 01             	add    $0x1,%eax
   1424f:	89 45 b0             	mov    %eax,-0x50(%rbp)
   14252:	e9 7f ff ff ff       	jmp    141d6 <yylex+0x306>
   14257:	e9 00 00 00 00       	jmp    1425c <yylex+0x38c>
   1425c:	e9 00 00 00 00       	jmp    14261 <yylex+0x391>
   14261:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   14264:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   14268:	48 83 e8 18          	sub    $0x18,%rax
   1426c:	0f 87 e8 19 00 00    	ja     15c5a <yylex+0x1d8a>
   14272:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   14276:	48 8d 0d 33 57 00 00 	lea    0x5733(%rip),%rcx        # 199b0 <yyrline+0x3d0>
   1427d:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   14281:	48 01 c8             	add    %rcx,%rax
   14284:	ff e0                	jmp    *%rax
   14286:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1428a:	8a 48 30             	mov    0x30(%rax),%cl
   1428d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14291:	88 08                	mov    %cl,(%rax)
   14293:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14297:	48 8b 40 70          	mov    0x70(%rax),%rax
   1429b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1429f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142a3:	8b 40 68             	mov    0x68(%rax),%eax
   142a6:	89 45 dc             	mov    %eax,-0x24(%rbp)
   142a9:	e9 7b fe ff ff       	jmp    14129 <yylex+0x259>
   142ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142b2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   142b9:	8b 48 08             	mov    0x8(%rax),%ecx
   142bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142c0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   142c7:	89 08                	mov    %ecx,(%rax)
   142c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142cd:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   142d4:	8b 48 0c             	mov    0xc(%rax),%ecx
   142d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142db:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   142e2:	89 48 04             	mov    %ecx,0x4(%rax)
   142e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   142e9:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   142f0:	8b 40 08             	mov    0x8(%rax),%eax
   142f3:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   142f7:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   142fb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   142ff:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14303:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14307:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   1430a:	0f 85 1d 00 00 00    	jne    1432d <yylex+0x45d>
   14310:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14314:	8b 48 38             	mov    0x38(%rax),%ecx
   14317:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1431b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14322:	03 48 0c             	add    0xc(%rax),%ecx
   14325:	89 48 0c             	mov    %ecx,0xc(%rax)
   14328:	e9 6e 00 00 00       	jmp    1439b <yylex+0x4cb>
   1432d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14331:	48 8b 40 28          	mov    0x28(%rax),%rax
   14335:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14339:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1433d:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14341:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14344:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14348:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1434f:	89 48 08             	mov    %ecx,0x8(%rax)
   14352:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14356:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1435d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14361:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14365:	48 01 c8             	add    %rcx,%rax
   14368:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1436c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14370:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14377:	be 0a 00 00 00       	mov    $0xa,%esi
   1437c:	e8 5f ed fe ff       	call   30e0 <strrchr@plt>
   14381:	48 89 c1             	mov    %rax,%rcx
   14384:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   14388:	48 29 c8             	sub    %rcx,%rax
   1438b:	89 c1                	mov    %eax,%ecx
   1438d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14391:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14398:	89 48 0c             	mov    %ecx,0xc(%rax)
   1439b:	e9 ca 18 00 00       	jmp    15c6a <yylex+0x1d9a>
   143a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   143a4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   143ab:	8b 48 08             	mov    0x8(%rax),%ecx
   143ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   143b2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   143b9:	89 08                	mov    %ecx,(%rax)
   143bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   143bf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   143c6:	8b 48 0c             	mov    0xc(%rax),%ecx
   143c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   143cd:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   143d4:	89 48 04             	mov    %ecx,0x4(%rax)
   143d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   143db:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   143e2:	8b 40 08             	mov    0x8(%rax),%eax
   143e5:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   143e9:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   143ed:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   143f1:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   143f5:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   143f9:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   143fc:	0f 85 1d 00 00 00    	jne    1441f <yylex+0x54f>
   14402:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14406:	8b 48 38             	mov    0x38(%rax),%ecx
   14409:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1440d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14414:	03 48 0c             	add    0xc(%rax),%ecx
   14417:	89 48 0c             	mov    %ecx,0xc(%rax)
   1441a:	e9 6e 00 00 00       	jmp    1448d <yylex+0x5bd>
   1441f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14423:	48 8b 40 28          	mov    0x28(%rax),%rax
   14427:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1442b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1442f:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14433:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14436:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1443a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14441:	89 48 08             	mov    %ecx,0x8(%rax)
   14444:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14448:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1444f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14453:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14457:	48 01 c8             	add    %rcx,%rax
   1445a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1445e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14462:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14469:	be 0a 00 00 00       	mov    $0xa,%esi
   1446e:	e8 6d ec fe ff       	call   30e0 <strrchr@plt>
   14473:	48 89 c1             	mov    %rax,%rcx
   14476:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1447a:	48 29 c8             	sub    %rcx,%rax
   1447d:	89 c1                	mov    %eax,%ecx
   1447f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14483:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1448a:	89 48 0c             	mov    %ecx,0xc(%rax)
   1448d:	e9 d8 17 00 00       	jmp    15c6a <yylex+0x1d9a>
   14492:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14496:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1449d:	8b 48 08             	mov    0x8(%rax),%ecx
   144a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144a4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   144ab:	89 08                	mov    %ecx,(%rax)
   144ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144b1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   144b8:	8b 48 0c             	mov    0xc(%rax),%ecx
   144bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144bf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   144c6:	89 48 04             	mov    %ecx,0x4(%rax)
   144c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144cd:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   144d4:	8b 40 08             	mov    0x8(%rax),%eax
   144d7:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   144db:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   144df:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   144e3:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   144e7:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   144eb:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   144ee:	0f 85 1d 00 00 00    	jne    14511 <yylex+0x641>
   144f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144f8:	8b 48 38             	mov    0x38(%rax),%ecx
   144fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   144ff:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14506:	03 48 0c             	add    0xc(%rax),%ecx
   14509:	89 48 0c             	mov    %ecx,0xc(%rax)
   1450c:	e9 6e 00 00 00       	jmp    1457f <yylex+0x6af>
   14511:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14515:	48 8b 40 28          	mov    0x28(%rax),%rax
   14519:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1451d:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14521:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14525:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14528:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1452c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14533:	89 48 08             	mov    %ecx,0x8(%rax)
   14536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1453a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14541:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14545:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14549:	48 01 c8             	add    %rcx,%rax
   1454c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   14550:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14554:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1455b:	be 0a 00 00 00       	mov    $0xa,%esi
   14560:	e8 7b eb fe ff       	call   30e0 <strrchr@plt>
   14565:	48 89 c1             	mov    %rax,%rcx
   14568:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1456c:	48 29 c8             	sub    %rcx,%rax
   1456f:	89 c1                	mov    %eax,%ecx
   14571:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14575:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1457c:	89 48 0c             	mov    %ecx,0xc(%rax)
   1457f:	e9 e6 16 00 00       	jmp    15c6a <yylex+0x1d9a>
   14584:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14588:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1458f:	8b 48 08             	mov    0x8(%rax),%ecx
   14592:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14596:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1459d:	89 08                	mov    %ecx,(%rax)
   1459f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145a3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   145aa:	8b 48 0c             	mov    0xc(%rax),%ecx
   145ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145b1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   145b8:	89 48 04             	mov    %ecx,0x4(%rax)
   145bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145bf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   145c6:	8b 40 08             	mov    0x8(%rax),%eax
   145c9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   145cd:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   145d1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   145d5:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   145d9:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   145dd:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   145e0:	0f 85 1d 00 00 00    	jne    14603 <yylex+0x733>
   145e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145ea:	8b 48 38             	mov    0x38(%rax),%ecx
   145ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   145f1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   145f8:	03 48 0c             	add    0xc(%rax),%ecx
   145fb:	89 48 0c             	mov    %ecx,0xc(%rax)
   145fe:	e9 6e 00 00 00       	jmp    14671 <yylex+0x7a1>
   14603:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14607:	48 8b 40 28          	mov    0x28(%rax),%rax
   1460b:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1460f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14613:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14617:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1461a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1461e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14625:	89 48 08             	mov    %ecx,0x8(%rax)
   14628:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1462c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14633:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14637:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   1463b:	48 01 c8             	add    %rcx,%rax
   1463e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   14642:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14646:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1464d:	be 0a 00 00 00       	mov    $0xa,%esi
   14652:	e8 89 ea fe ff       	call   30e0 <strrchr@plt>
   14657:	48 89 c1             	mov    %rax,%rcx
   1465a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1465e:	48 29 c8             	sub    %rcx,%rax
   14661:	89 c1                	mov    %eax,%ecx
   14663:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14667:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1466e:	89 48 0c             	mov    %ecx,0xc(%rax)
   14671:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%rbp)
   14678:	e9 f2 15 00 00       	jmp    15c6f <yylex+0x1d9f>
   1467d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14681:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14688:	8b 48 08             	mov    0x8(%rax),%ecx
   1468b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1468f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14696:	89 08                	mov    %ecx,(%rax)
   14698:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1469c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   146a3:	8b 48 0c             	mov    0xc(%rax),%ecx
   146a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   146aa:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   146b1:	89 48 04             	mov    %ecx,0x4(%rax)
   146b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   146b8:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   146bf:	8b 40 08             	mov    0x8(%rax),%eax
   146c2:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   146c6:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   146ca:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   146ce:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   146d2:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   146d6:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   146d9:	0f 85 1d 00 00 00    	jne    146fc <yylex+0x82c>
   146df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   146e3:	8b 48 38             	mov    0x38(%rax),%ecx
   146e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   146ea:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   146f1:	03 48 0c             	add    0xc(%rax),%ecx
   146f4:	89 48 0c             	mov    %ecx,0xc(%rax)
   146f7:	e9 74 00 00 00       	jmp    14770 <yylex+0x8a0>
   146fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14700:	48 8b 40 28          	mov    0x28(%rax),%rax
   14704:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14708:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1470c:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14710:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14713:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14717:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1471e:	89 48 08             	mov    %ecx,0x8(%rax)
   14721:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14725:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1472c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14730:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14734:	48 01 c8             	add    %rcx,%rax
   14737:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
   1473e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14742:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14749:	be 0a 00 00 00       	mov    $0xa,%esi
   1474e:	e8 8d e9 fe ff       	call   30e0 <strrchr@plt>
   14753:	48 89 c1             	mov    %rax,%rcx
   14756:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1475d:	48 29 c8             	sub    %rcx,%rax
   14760:	89 c1                	mov    %eax,%ecx
   14762:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14766:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1476d:	89 48 0c             	mov    %ecx,0xc(%rax)
   14770:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14774:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1477b:	0f be 00             	movsbl (%rax),%eax
   1477e:	89 45 fc             	mov    %eax,-0x4(%rbp)
   14781:	e9 e9 14 00 00       	jmp    15c6f <yylex+0x1d9f>
   14786:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1478a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14791:	8b 48 08             	mov    0x8(%rax),%ecx
   14794:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14798:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1479f:	89 08                	mov    %ecx,(%rax)
   147a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   147a5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   147ac:	8b 48 0c             	mov    0xc(%rax),%ecx
   147af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   147b3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   147ba:	89 48 04             	mov    %ecx,0x4(%rax)
   147bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   147c1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   147c8:	8b 40 08             	mov    0x8(%rax),%eax
   147cb:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   147cf:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   147d3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   147d7:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   147db:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   147df:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   147e2:	0f 85 1d 00 00 00    	jne    14805 <yylex+0x935>
   147e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   147ec:	8b 48 38             	mov    0x38(%rax),%ecx
   147ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   147f3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   147fa:	03 48 0c             	add    0xc(%rax),%ecx
   147fd:	89 48 0c             	mov    %ecx,0xc(%rax)
   14800:	e9 74 00 00 00       	jmp    14879 <yylex+0x9a9>
   14805:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14809:	48 8b 40 28          	mov    0x28(%rax),%rax
   1480d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14811:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14815:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14819:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1481c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14820:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14827:	89 48 08             	mov    %ecx,0x8(%rax)
   1482a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1482e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14835:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14839:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   1483d:	48 01 c8             	add    %rcx,%rax
   14840:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   14847:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1484b:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14852:	be 0a 00 00 00       	mov    $0xa,%esi
   14857:	e8 84 e8 fe ff       	call   30e0 <strrchr@plt>
   1485c:	48 89 c1             	mov    %rax,%rcx
   1485f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   14866:	48 29 c8             	sub    %rcx,%rax
   14869:	89 c1                	mov    %eax,%ecx
   1486b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1486f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14876:	89 48 0c             	mov    %ecx,0xc(%rax)
   14879:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1487d:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14884:	0f be 00             	movsbl (%rax),%eax
   14887:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1488a:	e9 e0 13 00 00       	jmp    15c6f <yylex+0x1d9f>
   1488f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14893:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1489a:	8b 48 08             	mov    0x8(%rax),%ecx
   1489d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148a1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   148a8:	89 08                	mov    %ecx,(%rax)
   148aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148ae:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   148b5:	8b 48 0c             	mov    0xc(%rax),%ecx
   148b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148bc:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   148c3:	89 48 04             	mov    %ecx,0x4(%rax)
   148c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148ca:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   148d1:	8b 40 08             	mov    0x8(%rax),%eax
   148d4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   148d8:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   148dc:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   148e0:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   148e4:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   148e8:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   148eb:	0f 85 1d 00 00 00    	jne    1490e <yylex+0xa3e>
   148f1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148f5:	8b 48 38             	mov    0x38(%rax),%ecx
   148f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   148fc:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14903:	03 48 0c             	add    0xc(%rax),%ecx
   14906:	89 48 0c             	mov    %ecx,0xc(%rax)
   14909:	e9 74 00 00 00       	jmp    14982 <yylex+0xab2>
   1490e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14912:	48 8b 40 28          	mov    0x28(%rax),%rax
   14916:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1491a:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1491e:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14922:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14925:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14929:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14930:	89 48 08             	mov    %ecx,0x8(%rax)
   14933:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14937:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1493e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14942:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14946:	48 01 c8             	add    %rcx,%rax
   14949:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
   14950:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14954:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1495b:	be 0a 00 00 00       	mov    $0xa,%esi
   14960:	e8 7b e7 fe ff       	call   30e0 <strrchr@plt>
   14965:	48 89 c1             	mov    %rax,%rcx
   14968:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1496f:	48 29 c8             	sub    %rcx,%rax
   14972:	89 c1                	mov    %eax,%ecx
   14974:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14978:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1497f:	89 48 0c             	mov    %ecx,0xc(%rax)
   14982:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14986:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1498d:	0f be 00             	movsbl (%rax),%eax
   14990:	89 45 fc             	mov    %eax,-0x4(%rbp)
   14993:	e9 d7 12 00 00       	jmp    15c6f <yylex+0x1d9f>
   14998:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1499c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   149a3:	8b 48 08             	mov    0x8(%rax),%ecx
   149a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   149aa:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   149b1:	89 08                	mov    %ecx,(%rax)
   149b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   149b7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   149be:	8b 48 0c             	mov    0xc(%rax),%ecx
   149c1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   149c5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   149cc:	89 48 04             	mov    %ecx,0x4(%rax)
   149cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   149d3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   149da:	8b 40 08             	mov    0x8(%rax),%eax
   149dd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   149e1:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   149e5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   149e9:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   149ed:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   149f1:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   149f4:	0f 85 1d 00 00 00    	jne    14a17 <yylex+0xb47>
   149fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   149fe:	8b 48 38             	mov    0x38(%rax),%ecx
   14a01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a05:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14a0c:	03 48 0c             	add    0xc(%rax),%ecx
   14a0f:	89 48 0c             	mov    %ecx,0xc(%rax)
   14a12:	e9 74 00 00 00       	jmp    14a8b <yylex+0xbbb>
   14a17:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a1b:	48 8b 40 28          	mov    0x28(%rax),%rax
   14a1f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14a23:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14a27:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14a2b:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14a2e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a32:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14a39:	89 48 08             	mov    %ecx,0x8(%rax)
   14a3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a40:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14a47:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14a4b:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14a4f:	48 01 c8             	add    %rcx,%rax
   14a52:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   14a59:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a5d:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14a64:	be 0a 00 00 00       	mov    $0xa,%esi
   14a69:	e8 72 e6 fe ff       	call   30e0 <strrchr@plt>
   14a6e:	48 89 c1             	mov    %rax,%rcx
   14a71:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   14a78:	48 29 c8             	sub    %rcx,%rax
   14a7b:	89 c1                	mov    %eax,%ecx
   14a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a81:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14a88:	89 48 0c             	mov    %ecx,0xc(%rax)
   14a8b:	c7 45 fc 06 01 00 00 	movl   $0x106,-0x4(%rbp)
   14a92:	e9 d8 11 00 00       	jmp    15c6f <yylex+0x1d9f>
   14a97:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14a9b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14aa2:	8b 48 08             	mov    0x8(%rax),%ecx
   14aa5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14aa9:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ab0:	89 08                	mov    %ecx,(%rax)
   14ab2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ab6:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14abd:	8b 48 0c             	mov    0xc(%rax),%ecx
   14ac0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ac4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14acb:	89 48 04             	mov    %ecx,0x4(%rax)
   14ace:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ad2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ad9:	8b 40 08             	mov    0x8(%rax),%eax
   14adc:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14ae0:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14ae4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14ae8:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14aec:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14af0:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14af3:	0f 85 1d 00 00 00    	jne    14b16 <yylex+0xc46>
   14af9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14afd:	8b 48 38             	mov    0x38(%rax),%ecx
   14b00:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b04:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14b0b:	03 48 0c             	add    0xc(%rax),%ecx
   14b0e:	89 48 0c             	mov    %ecx,0xc(%rax)
   14b11:	e9 74 00 00 00       	jmp    14b8a <yylex+0xcba>
   14b16:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b1a:	48 8b 40 28          	mov    0x28(%rax),%rax
   14b1e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14b22:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14b26:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14b2a:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14b2d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b31:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14b38:	89 48 08             	mov    %ecx,0x8(%rax)
   14b3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b3f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14b46:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14b4a:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14b4e:	48 01 c8             	add    %rcx,%rax
   14b51:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
   14b58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b5c:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14b63:	be 0a 00 00 00       	mov    $0xa,%esi
   14b68:	e8 73 e5 fe ff       	call   30e0 <strrchr@plt>
   14b6d:	48 89 c1             	mov    %rax,%rcx
   14b70:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   14b77:	48 29 c8             	sub    %rcx,%rax
   14b7a:	89 c1                	mov    %eax,%ecx
   14b7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b80:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14b87:	89 48 0c             	mov    %ecx,0xc(%rax)
   14b8a:	c7 45 fc 07 01 00 00 	movl   $0x107,-0x4(%rbp)
   14b91:	e9 d9 10 00 00       	jmp    15c6f <yylex+0x1d9f>
   14b96:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b9a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ba1:	8b 48 08             	mov    0x8(%rax),%ecx
   14ba4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ba8:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14baf:	89 08                	mov    %ecx,(%rax)
   14bb1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14bb5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14bbc:	8b 48 0c             	mov    0xc(%rax),%ecx
   14bbf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14bc3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14bca:	89 48 04             	mov    %ecx,0x4(%rax)
   14bcd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14bd1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14bd8:	8b 40 08             	mov    0x8(%rax),%eax
   14bdb:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14bdf:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14be3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14be7:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14beb:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14bef:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14bf2:	0f 85 1d 00 00 00    	jne    14c15 <yylex+0xd45>
   14bf8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14bfc:	8b 48 38             	mov    0x38(%rax),%ecx
   14bff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c03:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14c0a:	03 48 0c             	add    0xc(%rax),%ecx
   14c0d:	89 48 0c             	mov    %ecx,0xc(%rax)
   14c10:	e9 74 00 00 00       	jmp    14c89 <yylex+0xdb9>
   14c15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c19:	48 8b 40 28          	mov    0x28(%rax),%rax
   14c1d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14c21:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14c25:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14c29:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14c2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c30:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14c37:	89 48 08             	mov    %ecx,0x8(%rax)
   14c3a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c3e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14c45:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14c49:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14c4d:	48 01 c8             	add    %rcx,%rax
   14c50:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   14c57:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c5b:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14c62:	be 0a 00 00 00       	mov    $0xa,%esi
   14c67:	e8 74 e4 fe ff       	call   30e0 <strrchr@plt>
   14c6c:	48 89 c1             	mov    %rax,%rcx
   14c6f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   14c76:	48 29 c8             	sub    %rcx,%rax
   14c79:	89 c1                	mov    %eax,%ecx
   14c7b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c7f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14c86:	89 48 0c             	mov    %ecx,0xc(%rax)
   14c89:	c7 45 fc 09 01 00 00 	movl   $0x109,-0x4(%rbp)
   14c90:	e9 da 0f 00 00       	jmp    15c6f <yylex+0x1d9f>
   14c95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14c99:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ca0:	8b 48 08             	mov    0x8(%rax),%ecx
   14ca3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ca7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14cae:	89 08                	mov    %ecx,(%rax)
   14cb0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14cb4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14cbb:	8b 48 0c             	mov    0xc(%rax),%ecx
   14cbe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14cc2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14cc9:	89 48 04             	mov    %ecx,0x4(%rax)
   14ccc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14cd0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14cd7:	8b 40 08             	mov    0x8(%rax),%eax
   14cda:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14cde:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14ce2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14ce6:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14cea:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14cee:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14cf1:	0f 85 1d 00 00 00    	jne    14d14 <yylex+0xe44>
   14cf7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14cfb:	8b 48 38             	mov    0x38(%rax),%ecx
   14cfe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d02:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14d09:	03 48 0c             	add    0xc(%rax),%ecx
   14d0c:	89 48 0c             	mov    %ecx,0xc(%rax)
   14d0f:	e9 74 00 00 00       	jmp    14d88 <yylex+0xeb8>
   14d14:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d18:	48 8b 40 28          	mov    0x28(%rax),%rax
   14d1c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14d20:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14d24:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14d28:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14d2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d2f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14d36:	89 48 08             	mov    %ecx,0x8(%rax)
   14d39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d3d:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14d44:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14d48:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14d4c:	48 01 c8             	add    %rcx,%rax
   14d4f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   14d56:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d5a:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14d61:	be 0a 00 00 00       	mov    $0xa,%esi
   14d66:	e8 75 e3 fe ff       	call   30e0 <strrchr@plt>
   14d6b:	48 89 c1             	mov    %rax,%rcx
   14d6e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   14d75:	48 29 c8             	sub    %rcx,%rax
   14d78:	89 c1                	mov    %eax,%ecx
   14d7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d7e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14d85:	89 48 0c             	mov    %ecx,0xc(%rax)
   14d88:	c7 45 fc 08 01 00 00 	movl   $0x108,-0x4(%rbp)
   14d8f:	e9 db 0e 00 00       	jmp    15c6f <yylex+0x1d9f>
   14d94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14d98:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14d9f:	8b 48 08             	mov    0x8(%rax),%ecx
   14da2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14da6:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14dad:	89 08                	mov    %ecx,(%rax)
   14daf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14db3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14dba:	8b 48 0c             	mov    0xc(%rax),%ecx
   14dbd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14dc1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14dc8:	89 48 04             	mov    %ecx,0x4(%rax)
   14dcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14dcf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14dd6:	8b 40 08             	mov    0x8(%rax),%eax
   14dd9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14ddd:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14de1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14de5:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14de9:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14ded:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14df0:	0f 85 1d 00 00 00    	jne    14e13 <yylex+0xf43>
   14df6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14dfa:	8b 48 38             	mov    0x38(%rax),%ecx
   14dfd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e01:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14e08:	03 48 0c             	add    0xc(%rax),%ecx
   14e0b:	89 48 0c             	mov    %ecx,0xc(%rax)
   14e0e:	e9 74 00 00 00       	jmp    14e87 <yylex+0xfb7>
   14e13:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e17:	48 8b 40 28          	mov    0x28(%rax),%rax
   14e1b:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14e1f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14e23:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14e27:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14e2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e2e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14e35:	89 48 08             	mov    %ecx,0x8(%rax)
   14e38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e3c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14e43:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14e47:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14e4b:	48 01 c8             	add    %rcx,%rax
   14e4e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   14e55:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e59:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14e60:	be 0a 00 00 00       	mov    $0xa,%esi
   14e65:	e8 76 e2 fe ff       	call   30e0 <strrchr@plt>
   14e6a:	48 89 c1             	mov    %rax,%rcx
   14e6d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   14e74:	48 29 c8             	sub    %rcx,%rax
   14e77:	89 c1                	mov    %eax,%ecx
   14e79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e7d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14e84:	89 48 0c             	mov    %ecx,0xc(%rax)
   14e87:	c7 45 fc 0b 01 00 00 	movl   $0x10b,-0x4(%rbp)
   14e8e:	e9 dc 0d 00 00       	jmp    15c6f <yylex+0x1d9f>
   14e93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14e97:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14e9e:	8b 48 08             	mov    0x8(%rax),%ecx
   14ea1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ea5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14eac:	89 08                	mov    %ecx,(%rax)
   14eae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14eb2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14eb9:	8b 48 0c             	mov    0xc(%rax),%ecx
   14ebc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ec0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ec7:	89 48 04             	mov    %ecx,0x4(%rax)
   14eca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ece:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14ed5:	8b 40 08             	mov    0x8(%rax),%eax
   14ed8:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14edc:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14ee0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14ee4:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14ee8:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14eec:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14eef:	0f 85 1d 00 00 00    	jne    14f12 <yylex+0x1042>
   14ef5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ef9:	8b 48 38             	mov    0x38(%rax),%ecx
   14efc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f00:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14f07:	03 48 0c             	add    0xc(%rax),%ecx
   14f0a:	89 48 0c             	mov    %ecx,0xc(%rax)
   14f0d:	e9 74 00 00 00       	jmp    14f86 <yylex+0x10b6>
   14f12:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f16:	48 8b 40 28          	mov    0x28(%rax),%rax
   14f1a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14f1e:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   14f22:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   14f26:	8b 48 2c             	mov    0x2c(%rax),%ecx
   14f29:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f2d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14f34:	89 48 08             	mov    %ecx,0x8(%rax)
   14f37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f3b:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   14f42:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14f46:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   14f4a:	48 01 c8             	add    %rcx,%rax
   14f4d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   14f54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f58:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   14f5f:	be 0a 00 00 00       	mov    $0xa,%esi
   14f64:	e8 77 e1 fe ff       	call   30e0 <strrchr@plt>
   14f69:	48 89 c1             	mov    %rax,%rcx
   14f6c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   14f73:	48 29 c8             	sub    %rcx,%rax
   14f76:	89 c1                	mov    %eax,%ecx
   14f78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f7c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14f83:	89 48 0c             	mov    %ecx,0xc(%rax)
   14f86:	c7 45 fc 0c 01 00 00 	movl   $0x10c,-0x4(%rbp)
   14f8d:	e9 dd 0c 00 00       	jmp    15c6f <yylex+0x1d9f>
   14f92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14f96:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14f9d:	8b 48 08             	mov    0x8(%rax),%ecx
   14fa0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14fa4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14fab:	89 08                	mov    %ecx,(%rax)
   14fad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14fb1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14fb8:	8b 48 0c             	mov    0xc(%rax),%ecx
   14fbb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14fbf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14fc6:	89 48 04             	mov    %ecx,0x4(%rax)
   14fc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14fcd:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   14fd4:	8b 40 08             	mov    0x8(%rax),%eax
   14fd7:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   14fdb:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   14fdf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14fe3:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   14fe7:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   14feb:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   14fee:	0f 85 1d 00 00 00    	jne    15011 <yylex+0x1141>
   14ff4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ff8:	8b 48 38             	mov    0x38(%rax),%ecx
   14ffb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14fff:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15006:	03 48 0c             	add    0xc(%rax),%ecx
   15009:	89 48 0c             	mov    %ecx,0xc(%rax)
   1500c:	e9 74 00 00 00       	jmp    15085 <yylex+0x11b5>
   15011:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15015:	48 8b 40 28          	mov    0x28(%rax),%rax
   15019:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1501d:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15021:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15025:	8b 48 2c             	mov    0x2c(%rax),%ecx
   15028:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1502c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15033:	89 48 08             	mov    %ecx,0x8(%rax)
   15036:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1503a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15041:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15045:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   15049:	48 01 c8             	add    %rcx,%rax
   1504c:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   15053:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15057:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1505e:	be 0a 00 00 00       	mov    $0xa,%esi
   15063:	e8 78 e0 fe ff       	call   30e0 <strrchr@plt>
   15068:	48 89 c1             	mov    %rax,%rcx
   1506b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   15072:	48 29 c8             	sub    %rcx,%rax
   15075:	89 c1                	mov    %eax,%ecx
   15077:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1507b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15082:	89 48 0c             	mov    %ecx,0xc(%rax)
   15085:	c7 45 fc 0d 01 00 00 	movl   $0x10d,-0x4(%rbp)
   1508c:	e9 de 0b 00 00       	jmp    15c6f <yylex+0x1d9f>
   15091:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15095:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1509c:	8b 48 08             	mov    0x8(%rax),%ecx
   1509f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150a3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   150aa:	89 08                	mov    %ecx,(%rax)
   150ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150b0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   150b7:	8b 48 0c             	mov    0xc(%rax),%ecx
   150ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150be:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   150c5:	89 48 04             	mov    %ecx,0x4(%rax)
   150c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150cc:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   150d3:	8b 40 08             	mov    0x8(%rax),%eax
   150d6:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   150da:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   150de:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   150e2:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   150e6:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   150ea:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   150ed:	0f 85 1d 00 00 00    	jne    15110 <yylex+0x1240>
   150f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150f7:	8b 48 38             	mov    0x38(%rax),%ecx
   150fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   150fe:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15105:	03 48 0c             	add    0xc(%rax),%ecx
   15108:	89 48 0c             	mov    %ecx,0xc(%rax)
   1510b:	e9 74 00 00 00       	jmp    15184 <yylex+0x12b4>
   15110:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15114:	48 8b 40 28          	mov    0x28(%rax),%rax
   15118:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1511c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15120:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15124:	8b 48 2c             	mov    0x2c(%rax),%ecx
   15127:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1512b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15132:	89 48 08             	mov    %ecx,0x8(%rax)
   15135:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15139:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15140:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15144:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   15148:	48 01 c8             	add    %rcx,%rax
   1514b:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
   15152:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15156:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1515d:	be 0a 00 00 00       	mov    $0xa,%esi
   15162:	e8 79 df fe ff       	call   30e0 <strrchr@plt>
   15167:	48 89 c1             	mov    %rax,%rcx
   1516a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
   15171:	48 29 c8             	sub    %rcx,%rax
   15174:	89 c1                	mov    %eax,%ecx
   15176:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1517a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15181:	89 48 0c             	mov    %ecx,0xc(%rax)
   15184:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15188:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1518f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15193:	8b 70 38             	mov    0x38(%rax),%esi
   15196:	e8 75 0d 00 00       	call   15f10 <maketoken>
   1519b:	48 89 c1             	mov    %rax,%rcx
   1519e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151a2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   151a9:	48 89 08             	mov    %rcx,(%rax)
   151ac:	c7 45 fc 02 01 00 00 	movl   $0x102,-0x4(%rbp)
   151b3:	e9 b7 0a 00 00       	jmp    15c6f <yylex+0x1d9f>
   151b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151bc:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   151c3:	8b 48 08             	mov    0x8(%rax),%ecx
   151c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151ca:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   151d1:	89 08                	mov    %ecx,(%rax)
   151d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151d7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   151de:	8b 48 0c             	mov    0xc(%rax),%ecx
   151e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151e5:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   151ec:	89 48 04             	mov    %ecx,0x4(%rax)
   151ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   151f3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   151fa:	8b 40 08             	mov    0x8(%rax),%eax
   151fd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15201:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   15205:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15209:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   1520d:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   15211:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   15214:	0f 85 1d 00 00 00    	jne    15237 <yylex+0x1367>
   1521a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1521e:	8b 48 38             	mov    0x38(%rax),%ecx
   15221:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15225:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1522c:	03 48 0c             	add    0xc(%rax),%ecx
   1522f:	89 48 0c             	mov    %ecx,0xc(%rax)
   15232:	e9 74 00 00 00       	jmp    152ab <yylex+0x13db>
   15237:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1523b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1523f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15243:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15247:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1524b:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1524e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15252:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15259:	89 48 08             	mov    %ecx,0x8(%rax)
   1525c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15260:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15267:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1526b:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   1526f:	48 01 c8             	add    %rcx,%rax
   15272:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   15279:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1527d:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   15284:	be 0a 00 00 00       	mov    $0xa,%esi
   15289:	e8 52 de fe ff       	call   30e0 <strrchr@plt>
   1528e:	48 89 c1             	mov    %rax,%rcx
   15291:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   15298:	48 29 c8             	sub    %rcx,%rax
   1529b:	89 c1                	mov    %eax,%ecx
   1529d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152a1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   152a8:	89 48 0c             	mov    %ecx,0xc(%rax)
   152ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152af:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   152b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152ba:	8b 70 38             	mov    0x38(%rax),%esi
   152bd:	e8 4e 0c 00 00       	call   15f10 <maketoken>
   152c2:	48 89 c1             	mov    %rax,%rcx
   152c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152c9:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   152d0:	48 89 08             	mov    %rcx,(%rax)
   152d3:	c7 45 fc 04 01 00 00 	movl   $0x104,-0x4(%rbp)
   152da:	e9 90 09 00 00       	jmp    15c6f <yylex+0x1d9f>
   152df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152e3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   152ea:	8b 48 08             	mov    0x8(%rax),%ecx
   152ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152f1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   152f8:	89 08                	mov    %ecx,(%rax)
   152fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   152fe:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15305:	8b 48 0c             	mov    0xc(%rax),%ecx
   15308:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1530c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15313:	89 48 04             	mov    %ecx,0x4(%rax)
   15316:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1531a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15321:	8b 40 08             	mov    0x8(%rax),%eax
   15324:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15328:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   1532c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15330:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   15334:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   15338:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   1533b:	0f 85 1d 00 00 00    	jne    1535e <yylex+0x148e>
   15341:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15345:	8b 48 38             	mov    0x38(%rax),%ecx
   15348:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1534c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15353:	03 48 0c             	add    0xc(%rax),%ecx
   15356:	89 48 0c             	mov    %ecx,0xc(%rax)
   15359:	e9 74 00 00 00       	jmp    153d2 <yylex+0x1502>
   1535e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15362:	48 8b 40 28          	mov    0x28(%rax),%rax
   15366:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1536a:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1536e:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15372:	8b 48 2c             	mov    0x2c(%rax),%ecx
   15375:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15379:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15380:	89 48 08             	mov    %ecx,0x8(%rax)
   15383:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15387:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1538e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15392:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   15396:	48 01 c8             	add    %rcx,%rax
   15399:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
   153a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   153a4:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   153ab:	be 0a 00 00 00       	mov    $0xa,%esi
   153b0:	e8 2b dd fe ff       	call   30e0 <strrchr@plt>
   153b5:	48 89 c1             	mov    %rax,%rcx
   153b8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   153bf:	48 29 c8             	sub    %rcx,%rax
   153c2:	89 c1                	mov    %eax,%ecx
   153c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   153c8:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   153cf:	89 48 0c             	mov    %ecx,0xc(%rax)
   153d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   153d6:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   153dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   153e1:	8b 70 38             	mov    0x38(%rax),%esi
   153e4:	e8 27 0b 00 00       	call   15f10 <maketoken>
   153e9:	48 89 c1             	mov    %rax,%rcx
   153ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   153f0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   153f7:	48 89 08             	mov    %rcx,(%rax)
   153fa:	c7 45 fc 03 01 00 00 	movl   $0x103,-0x4(%rbp)
   15401:	e9 69 08 00 00       	jmp    15c6f <yylex+0x1d9f>
   15406:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1540a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15411:	8b 48 08             	mov    0x8(%rax),%ecx
   15414:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15418:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1541f:	89 08                	mov    %ecx,(%rax)
   15421:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15425:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1542c:	8b 48 0c             	mov    0xc(%rax),%ecx
   1542f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15433:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1543a:	89 48 04             	mov    %ecx,0x4(%rax)
   1543d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15441:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15448:	8b 40 08             	mov    0x8(%rax),%eax
   1544b:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1544f:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   15453:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15457:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   1545b:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   1545f:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   15462:	0f 85 1d 00 00 00    	jne    15485 <yylex+0x15b5>
   15468:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1546c:	8b 48 38             	mov    0x38(%rax),%ecx
   1546f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15473:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1547a:	03 48 0c             	add    0xc(%rax),%ecx
   1547d:	89 48 0c             	mov    %ecx,0xc(%rax)
   15480:	e9 74 00 00 00       	jmp    154f9 <yylex+0x1629>
   15485:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15489:	48 8b 40 28          	mov    0x28(%rax),%rax
   1548d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15491:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15495:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15499:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1549c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   154a0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   154a7:	89 48 08             	mov    %ecx,0x8(%rax)
   154aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   154ae:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   154b5:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   154b9:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   154bd:	48 01 c8             	add    %rcx,%rax
   154c0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   154c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   154cb:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   154d2:	be 0a 00 00 00       	mov    $0xa,%esi
   154d7:	e8 04 dc fe ff       	call   30e0 <strrchr@plt>
   154dc:	48 89 c1             	mov    %rax,%rcx
   154df:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   154e6:	48 29 c8             	sub    %rcx,%rax
   154e9:	89 c1                	mov    %eax,%ecx
   154eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   154ef:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   154f6:	89 48 0c             	mov    %ecx,0xc(%rax)
   154f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   154fd:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   15504:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15508:	8b 70 38             	mov    0x38(%rax),%esi
   1550b:	e8 00 0a 00 00       	call   15f10 <maketoken>
   15510:	48 89 c1             	mov    %rax,%rcx
   15513:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15517:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   1551e:	48 89 08             	mov    %rcx,(%rax)
   15521:	c7 45 fc 03 01 00 00 	movl   $0x103,-0x4(%rbp)
   15528:	e9 42 07 00 00       	jmp    15c6f <yylex+0x1d9f>
   1552d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15531:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15538:	8b 48 08             	mov    0x8(%rax),%ecx
   1553b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1553f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15546:	89 08                	mov    %ecx,(%rax)
   15548:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1554c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15553:	8b 48 0c             	mov    0xc(%rax),%ecx
   15556:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1555a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15561:	89 48 04             	mov    %ecx,0x4(%rax)
   15564:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15568:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1556f:	8b 40 08             	mov    0x8(%rax),%eax
   15572:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15576:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   1557a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1557e:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   15582:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   15586:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   15589:	0f 85 1d 00 00 00    	jne    155ac <yylex+0x16dc>
   1558f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15593:	8b 48 38             	mov    0x38(%rax),%ecx
   15596:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1559a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   155a1:	03 48 0c             	add    0xc(%rax),%ecx
   155a4:	89 48 0c             	mov    %ecx,0xc(%rax)
   155a7:	e9 74 00 00 00       	jmp    15620 <yylex+0x1750>
   155ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   155b0:	48 8b 40 28          	mov    0x28(%rax),%rax
   155b4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   155b8:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   155bc:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   155c0:	8b 48 2c             	mov    0x2c(%rax),%ecx
   155c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   155c7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   155ce:	89 48 08             	mov    %ecx,0x8(%rax)
   155d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   155d5:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   155dc:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   155e0:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   155e4:	48 01 c8             	add    %rcx,%rax
   155e7:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
   155ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   155f2:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   155f9:	be 0a 00 00 00       	mov    $0xa,%esi
   155fe:	e8 dd da fe ff       	call   30e0 <strrchr@plt>
   15603:	48 89 c1             	mov    %rax,%rcx
   15606:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   1560d:	48 29 c8             	sub    %rcx,%rax
   15610:	89 c1                	mov    %eax,%ecx
   15612:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15616:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1561d:	89 48 0c             	mov    %ecx,0xc(%rax)
   15620:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15624:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1562b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1562f:	8b 70 38             	mov    0x38(%rax),%esi
   15632:	ba 02 00 00 00       	mov    $0x2,%edx
   15637:	e8 24 09 00 00       	call   15f60 <makestring>
   1563c:	48 89 c1             	mov    %rax,%rcx
   1563f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15643:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   1564a:	48 89 08             	mov    %rcx,(%rax)
   1564d:	c7 45 fc 05 01 00 00 	movl   $0x105,-0x4(%rbp)
   15654:	e9 16 06 00 00       	jmp    15c6f <yylex+0x1d9f>
   15659:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1565d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15664:	8b 48 08             	mov    0x8(%rax),%ecx
   15667:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1566b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15672:	89 08                	mov    %ecx,(%rax)
   15674:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15678:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1567f:	8b 48 0c             	mov    0xc(%rax),%ecx
   15682:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15686:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1568d:	89 48 04             	mov    %ecx,0x4(%rax)
   15690:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15694:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1569b:	8b 40 08             	mov    0x8(%rax),%eax
   1569e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   156a2:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   156a6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   156aa:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   156ae:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   156b2:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   156b5:	0f 85 1d 00 00 00    	jne    156d8 <yylex+0x1808>
   156bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   156bf:	8b 48 38             	mov    0x38(%rax),%ecx
   156c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   156c6:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   156cd:	03 48 0c             	add    0xc(%rax),%ecx
   156d0:	89 48 0c             	mov    %ecx,0xc(%rax)
   156d3:	e9 74 00 00 00       	jmp    1574c <yylex+0x187c>
   156d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   156dc:	48 8b 40 28          	mov    0x28(%rax),%rax
   156e0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   156e4:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   156e8:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   156ec:	8b 48 2c             	mov    0x2c(%rax),%ecx
   156ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   156f3:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   156fa:	89 48 08             	mov    %ecx,0x8(%rax)
   156fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15701:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15708:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1570c:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   15710:	48 01 c8             	add    %rcx,%rax
   15713:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   1571a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1571e:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   15725:	be 0a 00 00 00       	mov    $0xa,%esi
   1572a:	e8 b1 d9 fe ff       	call   30e0 <strrchr@plt>
   1572f:	48 89 c1             	mov    %rax,%rcx
   15732:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   15739:	48 29 c8             	sub    %rcx,%rax
   1573c:	89 c1                	mov    %eax,%ecx
   1573e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15742:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15749:	89 48 0c             	mov    %ecx,0xc(%rax)
   1574c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15750:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   15757:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1575b:	8b 70 38             	mov    0x38(%rax),%esi
   1575e:	ba 03 00 00 00       	mov    $0x3,%edx
   15763:	e8 f8 07 00 00       	call   15f60 <makestring>
   15768:	48 89 c1             	mov    %rax,%rcx
   1576b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1576f:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   15776:	48 89 08             	mov    %rcx,(%rax)
   15779:	c7 45 fc 05 01 00 00 	movl   $0x105,-0x4(%rbp)
   15780:	e9 ea 04 00 00       	jmp    15c6f <yylex+0x1d9f>
   15785:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15789:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15790:	8b 48 08             	mov    0x8(%rax),%ecx
   15793:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15797:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1579e:	89 08                	mov    %ecx,(%rax)
   157a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   157a4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   157ab:	8b 48 0c             	mov    0xc(%rax),%ecx
   157ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   157b2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   157b9:	89 48 04             	mov    %ecx,0x4(%rax)
   157bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   157c0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   157c7:	8b 40 08             	mov    0x8(%rax),%eax
   157ca:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   157ce:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   157d2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   157d6:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   157da:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   157de:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   157e1:	0f 85 1d 00 00 00    	jne    15804 <yylex+0x1934>
   157e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   157eb:	8b 48 38             	mov    0x38(%rax),%ecx
   157ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   157f2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   157f9:	03 48 0c             	add    0xc(%rax),%ecx
   157fc:	89 48 0c             	mov    %ecx,0xc(%rax)
   157ff:	e9 74 00 00 00       	jmp    15878 <yylex+0x19a8>
   15804:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15808:	48 8b 40 28          	mov    0x28(%rax),%rax
   1580c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15810:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15814:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15818:	8b 48 2c             	mov    0x2c(%rax),%ecx
   1581b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1581f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15826:	89 48 08             	mov    %ecx,0x8(%rax)
   15829:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1582d:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15834:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15838:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   1583c:	48 01 c8             	add    %rcx,%rax
   1583f:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   15846:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1584a:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   15851:	be 0a 00 00 00       	mov    $0xa,%esi
   15856:	e8 85 d8 fe ff       	call   30e0 <strrchr@plt>
   1585b:	48 89 c1             	mov    %rax,%rcx
   1585e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   15865:	48 29 c8             	sub    %rcx,%rax
   15868:	89 c1                	mov    %eax,%ecx
   1586a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1586e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15875:	89 48 0c             	mov    %ecx,0xc(%rax)
   15878:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1587c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15883:	0f be 30             	movsbl (%rax),%esi
   15886:	48 8d 3d 2f 47 00 00 	lea    0x472f(%rip),%rdi        # 19fbc <yy_rule_can_match_eol+0x5c>
   1588d:	b0 00                	mov    $0x0,%al
   1588f:	e8 3c d8 fe ff       	call   30d0 <printf@plt>
   15894:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   1589b:	e9 cf 03 00 00       	jmp    15c6f <yylex+0x1d9f>
   158a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   158a4:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   158ab:	8b 48 08             	mov    0x8(%rax),%ecx
   158ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   158b2:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   158b9:	89 08                	mov    %ecx,(%rax)
   158bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   158bf:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   158c6:	8b 48 0c             	mov    0xc(%rax),%ecx
   158c9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   158cd:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   158d4:	89 48 04             	mov    %ecx,0x4(%rax)
   158d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   158db:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   158e2:	8b 40 08             	mov    0x8(%rax),%eax
   158e5:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   158e9:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   158ed:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   158f1:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   158f5:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   158f9:	3b 41 2c             	cmp    0x2c(%rcx),%eax
   158fc:	0f 85 1d 00 00 00    	jne    1591f <yylex+0x1a4f>
   15902:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15906:	8b 48 38             	mov    0x38(%rax),%ecx
   15909:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1590d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15914:	03 48 0c             	add    0xc(%rax),%ecx
   15917:	89 48 0c             	mov    %ecx,0xc(%rax)
   1591a:	e9 74 00 00 00       	jmp    15993 <yylex+0x1ac3>
   1591f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15923:	48 8b 40 28          	mov    0x28(%rax),%rax
   15927:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1592b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1592f:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15933:	8b 48 2c             	mov    0x2c(%rax),%ecx
   15936:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1593a:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15941:	89 48 08             	mov    %ecx,0x8(%rax)
   15944:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15948:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1594f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15953:	48 63 49 38          	movslq 0x38(%rcx),%rcx
   15957:	48 01 c8             	add    %rcx,%rax
   1595a:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   15961:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15965:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   1596c:	be 0a 00 00 00       	mov    $0xa,%esi
   15971:	e8 6a d7 fe ff       	call   30e0 <strrchr@plt>
   15976:	48 89 c1             	mov    %rax,%rcx
   15979:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   15980:	48 29 c8             	sub    %rcx,%rax
   15983:	89 c1                	mov    %eax,%ecx
   15985:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15989:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   15990:	89 48 0c             	mov    %ecx,0xc(%rax)
   15993:	e9 00 00 00 00       	jmp    15998 <yylex+0x1ac8>
   15998:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1599c:	48 8b b8 80 00 00 00 	mov    0x80(%rax),%rdi
   159a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   159a7:	48 63 70 38          	movslq 0x38(%rax),%rsi
   159ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   159af:	48 8b 48 10          	mov    0x10(%rax),%rcx
   159b3:	ba 01 00 00 00       	mov    $0x1,%edx
   159b8:	e8 43 d8 fe ff       	call   3200 <fwrite@plt>
   159bd:	48 83 f8 00          	cmp    $0x0,%rax
   159c1:	0f 84 05 00 00 00    	je     159cc <yylex+0x1afc>
   159c7:	e9 00 00 00 00       	jmp    159cc <yylex+0x1afc>
   159cc:	e9 00 00 00 00       	jmp    159d1 <yylex+0x1b01>
   159d1:	e9 94 02 00 00       	jmp    15c6a <yylex+0x1d9a>
   159d6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   159dd:	e9 8d 02 00 00       	jmp    15c6f <yylex+0x1d9f>
   159e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   159e6:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   159ea:	48 8b 89 80 00 00 00 	mov    0x80(%rcx),%rcx
   159f1:	48 29 c8             	sub    %rcx,%rax
   159f4:	83 e8 01             	sub    $0x1,%eax
   159f7:	89 45 ac             	mov    %eax,-0x54(%rbp)
   159fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   159fe:	8a 48 30             	mov    0x30(%rax),%cl
   15a01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   15a05:	88 08                	mov    %cl,(%rax)
   15a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a0b:	48 8b 40 28          	mov    0x28(%rax),%rax
   15a0f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15a13:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15a17:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15a1b:	83 78 38 00          	cmpl   $0x0,0x38(%rax)
   15a1f:	0f 85 58 00 00 00    	jne    15a7d <yylex+0x1bad>
   15a25:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a29:	48 8b 40 28          	mov    0x28(%rax),%rax
   15a2d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15a31:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15a35:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15a39:	8b 48 1c             	mov    0x1c(%rax),%ecx
   15a3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a40:	89 48 34             	mov    %ecx,0x34(%rax)
   15a43:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a47:	48 8b 48 08          	mov    0x8(%rax),%rcx
   15a4b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a4f:	48 8b 40 28          	mov    0x28(%rax),%rax
   15a53:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15a57:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   15a5b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   15a5f:	48 89 08             	mov    %rcx,(%rax)
   15a62:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a66:	48 8b 40 28          	mov    0x28(%rax),%rax
   15a6a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15a6e:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15a72:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15a76:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%rax)
   15a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15a81:	48 8b 40 40          	mov    0x40(%rax),%rax
   15a85:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15a89:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   15a8d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15a91:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   15a95:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   15a99:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   15a9d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   15aa1:	48 63 52 34          	movslq 0x34(%rdx),%rdx
   15aa5:	48 01 d1             	add    %rdx,%rcx
   15aa8:	48 39 c8             	cmp    %rcx,%rax
   15aab:	0f 87 7e 00 00 00    	ja     15b2f <yylex+0x1c5f>
   15ab1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15ab5:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx
   15abc:	48 63 45 ac          	movslq -0x54(%rbp),%rax
   15ac0:	48 01 c1             	add    %rax,%rcx
   15ac3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15ac7:	48 89 48 40          	mov    %rcx,0x40(%rax)
   15acb:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15acf:	e8 1c 05 00 00       	call   15ff0 <yy_get_previous_state>
   15ad4:	89 45 dc             	mov    %eax,-0x24(%rbp)
   15ad7:	8b 7d dc             	mov    -0x24(%rbp),%edi
   15ada:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   15ade:	e8 5d 06 00 00       	call   16140 <yy_try_NUL_trans>
   15ae3:	89 45 a8             	mov    %eax,-0x58(%rbp)
   15ae6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15aea:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15af1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15af5:	83 7d a8 00          	cmpl   $0x0,-0x58(%rbp)
   15af9:	0f 84 1f 00 00 00    	je     15b1e <yylex+0x1c4e>
   15aff:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15b03:	48 8b 41 40          	mov    0x40(%rcx),%rax
   15b07:	48 83 c0 01          	add    $0x1,%rax
   15b0b:	48 89 41 40          	mov    %rax,0x40(%rcx)
   15b0f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15b13:	8b 45 a8             	mov    -0x58(%rbp),%eax
   15b16:	89 45 dc             	mov    %eax,-0x24(%rbp)
   15b19:	e9 10 e5 ff ff       	jmp    1402e <yylex+0x15e>
   15b1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15b22:	48 8b 40 40          	mov    0x40(%rax),%rax
   15b26:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15b2a:	e9 fa e5 ff ff       	jmp    14129 <yylex+0x259>
   15b2f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15b33:	e8 18 07 00 00       	call   16250 <yy_get_next_buffer>
   15b38:	89 c1                	mov    %eax,%ecx
   15b3a:	89 8d ec fe ff ff    	mov    %ecx,-0x114(%rbp)
   15b40:	85 c0                	test   %eax,%eax
   15b42:	0f 84 6b 00 00 00    	je     15bb3 <yylex+0x1ce3>
   15b48:	e9 00 00 00 00       	jmp    15b4d <yylex+0x1c7d>
   15b4d:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
   15b53:	83 e8 01             	sub    $0x1,%eax
   15b56:	0f 84 19 00 00 00    	je     15b75 <yylex+0x1ca5>
   15b5c:	e9 00 00 00 00       	jmp    15b61 <yylex+0x1c91>
   15b61:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
   15b67:	83 e8 02             	sub    $0x2,%eax
   15b6a:	0f 84 89 00 00 00    	je     15bf9 <yylex+0x1d29>
   15b70:	e9 db 00 00 00       	jmp    15c50 <yylex+0x1d80>
   15b75:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15b79:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%rax)
   15b80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15b84:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx
   15b8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15b8f:	48 89 48 40          	mov    %rcx,0x40(%rax)
   15b93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15b97:	8b 40 4c             	mov    0x4c(%rax),%eax
   15b9a:	83 e8 01             	sub    $0x1,%eax
   15b9d:	b9 02 00 00 00       	mov    $0x2,%ecx
   15ba2:	99                   	cltd
   15ba3:	f7 f9                	idiv   %ecx
   15ba5:	83 c0 17             	add    $0x17,%eax
   15ba8:	83 c0 01             	add    $0x1,%eax
   15bab:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   15bae:	e9 ae e6 ff ff       	jmp    14261 <yylex+0x391>
   15bb3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15bb7:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx
   15bbe:	48 63 45 ac          	movslq -0x54(%rbp),%rax
   15bc2:	48 01 c1             	add    %rax,%rcx
   15bc5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15bc9:	48 89 48 40          	mov    %rcx,0x40(%rax)
   15bcd:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15bd1:	e8 1a 04 00 00       	call   15ff0 <yy_get_previous_state>
   15bd6:	89 45 dc             	mov    %eax,-0x24(%rbp)
   15bd9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15bdd:	48 8b 40 40          	mov    0x40(%rax),%rax
   15be1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15be5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15be9:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15bf0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15bf4:	e9 35 e4 ff ff       	jmp    1402e <yylex+0x15e>
   15bf9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15bfd:	48 8b 40 28          	mov    0x28(%rax),%rax
   15c01:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   15c05:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15c09:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15c0d:	48 8b 48 08          	mov    0x8(%rax),%rcx
   15c11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15c15:	48 63 40 34          	movslq 0x34(%rax),%rax
   15c19:	48 01 c1             	add    %rax,%rcx
   15c1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15c20:	48 89 48 40          	mov    %rcx,0x40(%rax)
   15c24:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15c28:	e8 c3 03 00 00       	call   15ff0 <yy_get_previous_state>
   15c2d:	89 45 dc             	mov    %eax,-0x24(%rbp)
   15c30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15c34:	48 8b 40 40          	mov    0x40(%rax),%rax
   15c38:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   15c3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   15c40:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   15c47:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   15c4b:	e9 d9 e4 ff ff       	jmp    14129 <yylex+0x259>
   15c50:	e9 00 00 00 00       	jmp    15c55 <yylex+0x1d85>
   15c55:	e9 10 00 00 00       	jmp    15c6a <yylex+0x1d9a>
   15c5a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   15c5e:	48 8d 3d 6c 43 00 00 	lea    0x436c(%rip),%rdi        # 19fd1 <yy_rule_can_match_eol+0x71>
   15c65:	e8 96 0c 00 00       	call   16900 <yy_fatal_error>
   15c6a:	e9 94 e3 ff ff       	jmp    14003 <yylex+0x133>
   15c6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
   15c72:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
   15c79:	5d                   	pop    %rbp
   15c7a:	c3                   	ret
   15c7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015c80 <yyensure_buffer_stack>:
   15c80:	55                   	push   %rbp
   15c81:	48 89 e5             	mov    %rsp,%rbp
   15c84:	48 83 ec 20          	sub    $0x20,%rsp
   15c88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15c8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   15c94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c98:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   15c9d:	0f 85 77 00 00 00    	jne    15d1a <yyensure_buffer_stack+0x9a>
   15ca3:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15caa:	00 
   15cab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   15caf:	48 c1 e7 03          	shl    $0x3,%rdi
   15cb3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15cb7:	e8 b4 0f 00 00       	call   16c70 <yyalloc>
   15cbc:	48 89 c1             	mov    %rax,%rcx
   15cbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15cc3:	48 89 48 28          	mov    %rcx,0x28(%rax)
   15cc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ccb:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   15cd0:	0f 85 10 00 00 00    	jne    15ce6 <yyensure_buffer_stack+0x66>
   15cd6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15cda:	48 8d 3d b5 44 00 00 	lea    0x44b5(%rip),%rdi        # 1a196 <yy_rule_can_match_eol+0x236>
   15ce1:	e8 1a 0c 00 00       	call   16900 <yy_fatal_error>
   15ce6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15cea:	48 8b 78 28          	mov    0x28(%rax),%rdi
   15cee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15cf2:	48 c1 e2 03          	shl    $0x3,%rdx
   15cf6:	31 f6                	xor    %esi,%esi
   15cf8:	e8 03 d4 fe ff       	call   3100 <memset@plt>
   15cfd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15d01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d05:	48 89 48 20          	mov    %rcx,0x20(%rax)
   15d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d0d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   15d14:	00 
   15d15:	e9 aa 00 00 00       	jmp    15dc4 <yyensure_buffer_stack+0x144>
   15d1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d1e:	48 8b 40 18          	mov    0x18(%rax),%rax
   15d22:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   15d26:	48 8b 49 20          	mov    0x20(%rcx),%rcx
   15d2a:	48 83 e9 01          	sub    $0x1,%rcx
   15d2e:	48 39 c8             	cmp    %rcx,%rax
   15d31:	0f 82 8d 00 00 00    	jb     15dc4 <yyensure_buffer_stack+0x144>
   15d37:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
   15d3e:	00 
   15d3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d43:	48 8b 40 20          	mov    0x20(%rax),%rax
   15d47:	48 03 45 e0          	add    -0x20(%rbp),%rax
   15d4b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d53:	48 8b 78 28          	mov    0x28(%rax),%rdi
   15d57:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15d5b:	48 c1 e6 03          	shl    $0x3,%rsi
   15d5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d63:	e8 38 1d 00 00       	call   17aa0 <yyrealloc>
   15d68:	48 89 c1             	mov    %rax,%rcx
   15d6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d6f:	48 89 48 28          	mov    %rcx,0x28(%rax)
   15d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d77:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   15d7c:	0f 85 10 00 00 00    	jne    15d92 <yyensure_buffer_stack+0x112>
   15d82:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15d86:	48 8d 3d 09 44 00 00 	lea    0x4409(%rip),%rdi        # 1a196 <yy_rule_can_match_eol+0x236>
   15d8d:	e8 6e 0b 00 00       	call   16900 <yy_fatal_error>
   15d92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d96:	48 8b 78 28          	mov    0x28(%rax),%rdi
   15d9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d9e:	48 8b 40 20          	mov    0x20(%rax),%rax
   15da2:	48 c1 e0 03          	shl    $0x3,%rax
   15da6:	48 01 c7             	add    %rax,%rdi
   15da9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   15dad:	48 c1 e2 03          	shl    $0x3,%rdx
   15db1:	31 f6                	xor    %esi,%esi
   15db3:	e8 48 d3 fe ff       	call   3100 <memset@plt>
   15db8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15dbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15dc0:	48 89 48 20          	mov    %rcx,0x20(%rax)
   15dc4:	48 83 c4 20          	add    $0x20,%rsp
   15dc8:	5d                   	pop    %rbp
   15dc9:	c3                   	ret
   15dca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000015dd0 <yy_create_buffer>:
   15dd0:	55                   	push   %rbp
   15dd1:	48 89 e5             	mov    %rsp,%rbp
   15dd4:	48 83 ec 20          	sub    $0x20,%rsp
   15dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15ddc:	89 75 f4             	mov    %esi,-0xc(%rbp)
   15ddf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   15de3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   15de7:	bf 40 00 00 00       	mov    $0x40,%edi
   15dec:	e8 7f 0e 00 00       	call   16c70 <yyalloc>
   15df1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   15df5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   15dfa:	0f 85 10 00 00 00    	jne    15e10 <yy_create_buffer+0x40>
   15e00:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   15e04:	48 8d 3d f9 41 00 00 	lea    0x41f9(%rip),%rdi        # 1a004 <yy_rule_can_match_eol+0xa4>
   15e0b:	e8 f0 0a 00 00       	call   16900 <yy_fatal_error>
   15e10:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   15e13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e17:	89 48 18             	mov    %ecx,0x18(%rax)
   15e1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e1e:	8b 40 18             	mov    0x18(%rax),%eax
   15e21:	83 c0 02             	add    $0x2,%eax
   15e24:	48 63 f8             	movslq %eax,%rdi
   15e27:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   15e2b:	e8 40 0e 00 00       	call   16c70 <yyalloc>
   15e30:	48 89 c1             	mov    %rax,%rcx
   15e33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e37:	48 89 48 08          	mov    %rcx,0x8(%rax)
   15e3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e3f:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   15e44:	0f 85 10 00 00 00    	jne    15e5a <yy_create_buffer+0x8a>
   15e4a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   15e4e:	48 8d 3d af 41 00 00 	lea    0x41af(%rip),%rdi        # 1a004 <yy_rule_can_match_eol+0xa4>
   15e55:	e8 a6 0a 00 00       	call   16900 <yy_fatal_error>
   15e5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e5e:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
   15e65:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15e69:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15e6d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   15e71:	e8 ba 0b 00 00       	call   16a30 <yy_init_buffer>
   15e76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15e7a:	48 83 c4 20          	add    $0x20,%rsp
   15e7e:	5d                   	pop    %rbp
   15e7f:	c3                   	ret

0000000000015e80 <yy_load_buffer_state>:
   15e80:	55                   	push   %rbp
   15e81:	48 89 e5             	mov    %rsp,%rbp
   15e84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15e88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e8c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15e90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15e94:	48 8b 40 28          	mov    0x28(%rax),%rax
   15e98:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15e9c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15ea0:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15ea4:	8b 48 1c             	mov    0x1c(%rax),%ecx
   15ea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15eab:	89 48 34             	mov    %ecx,0x34(%rax)
   15eae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15eb2:	48 8b 40 28          	mov    0x28(%rax),%rax
   15eb6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15eba:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15ebe:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15ec2:	48 8b 48 10          	mov    0x10(%rax),%rcx
   15ec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15eca:	48 89 48 40          	mov    %rcx,0x40(%rax)
   15ece:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15ed2:	48 89 88 80 00 00 00 	mov    %rcx,0x80(%rax)
   15ed9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15edd:	48 8b 40 28          	mov    0x28(%rax),%rax
   15ee1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   15ee5:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   15ee9:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   15eed:	48 8b 08             	mov    (%rax),%rcx
   15ef0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15ef4:	48 89 48 08          	mov    %rcx,0x8(%rax)
   15ef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15efc:	48 8b 40 40          	mov    0x40(%rax),%rax
   15f00:	8a 08                	mov    (%rax),%cl
   15f02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15f06:	88 48 30             	mov    %cl,0x30(%rax)
   15f09:	5d                   	pop    %rbp
   15f0a:	c3                   	ret
   15f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000015f10 <maketoken>:
   15f10:	55                   	push   %rbp
   15f11:	48 89 e5             	mov    %rsp,%rbp
   15f14:	48 83 ec 20          	sub    $0x20,%rsp
   15f18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15f1c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   15f1f:	8b 45 f4             	mov    -0xc(%rbp),%eax
   15f22:	83 c0 01             	add    $0x1,%eax
   15f25:	48 63 f8             	movslq %eax,%rdi
   15f28:	e8 03 42 ff ff       	call   a130 <slipM_malloc>
   15f2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   15f31:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   15f35:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   15f39:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
   15f3d:	e8 0e d1 fe ff       	call   3050 <strncpy@plt>
   15f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f46:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   15f4a:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   15f4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f52:	48 83 c4 20          	add    $0x20,%rsp
   15f56:	5d                   	pop    %rbp
   15f57:	c3                   	ret
   15f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   15f5f:	00 

0000000000015f60 <makestring>:
   15f60:	55                   	push   %rbp
   15f61:	48 89 e5             	mov    %rsp,%rbp
   15f64:	48 83 ec 20          	sub    $0x20,%rsp
   15f68:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   15f6c:	89 75 ec             	mov    %esi,-0x14(%rbp)
   15f6f:	89 55 e8             	mov    %edx,-0x18(%rbp)
   15f72:	8b 45 ec             	mov    -0x14(%rbp),%eax
   15f75:	2b 45 e8             	sub    -0x18(%rbp),%eax
   15f78:	83 c0 01             	add    $0x1,%eax
   15f7b:	48 63 f8             	movslq %eax,%rdi
   15f7e:	e8 ad 41 ff ff       	call   a130 <slipM_malloc>
   15f83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   15f87:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   15f8b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15f8f:	48 63 45 e8          	movslq -0x18(%rbp),%rax
   15f93:	48 01 c6             	add    %rax,%rsi
   15f96:	48 83 c6 ff          	add    $0xffffffffffffffff,%rsi
   15f9a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   15f9d:	2b 45 e8             	sub    -0x18(%rbp),%eax
   15fa0:	48 63 d0             	movslq %eax,%rdx
   15fa3:	e8 a8 d0 fe ff       	call   3050 <strncpy@plt>
   15fa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15fac:	8b 4d ec             	mov    -0x14(%rbp),%ecx
   15faf:	2b 4d e8             	sub    -0x18(%rbp),%ecx
   15fb2:	48 63 c9             	movslq %ecx,%rcx
   15fb5:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   15fb9:	83 7d e8 03          	cmpl   $0x3,-0x18(%rbp)
   15fbd:	0f 85 0d 00 00 00    	jne    15fd0 <makestring+0x70>
   15fc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15fc7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15fcb:	e9 08 00 00 00       	jmp    15fd8 <makestring+0x78>
   15fd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15fd4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fdc:	48 83 c4 20          	add    $0x20,%rsp
   15fe0:	5d                   	pop    %rbp
   15fe1:	c3                   	ret
   15fe2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   15fe9:	00 00 00 
   15fec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000015ff0 <yy_get_previous_state>:
   15ff0:	55                   	push   %rbp
   15ff1:	48 89 e5             	mov    %rsp,%rbp
   15ff4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ffc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16000:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16004:	8b 40 4c             	mov    0x4c(%rax),%eax
   16007:	89 45 f4             	mov    %eax,-0xc(%rbp)
   1600a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1600e:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   16015:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16019:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1601d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   16021:	48 3b 41 40          	cmp    0x40(%rcx),%rax
   16025:	0f 83 07 01 00 00    	jae    16132 <yy_get_previous_state+0x142>
   1602b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1602f:	0f be 00             	movsbl (%rax),%eax
   16032:	83 f8 00             	cmp    $0x0,%eax
   16035:	0f 84 1c 00 00 00    	je     16057 <yy_get_previous_state+0x67>
   1603b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1603f:	0f b6 00             	movzbl (%rax),%eax
   16042:	89 c1                	mov    %eax,%ecx
   16044:	48 8d 05 d5 39 00 00 	lea    0x39d5(%rip),%rax        # 19a20 <yy_ec>
   1604b:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
   1604f:	89 45 d8             	mov    %eax,-0x28(%rbp)
   16052:	e9 0d 00 00 00       	jmp    16064 <yy_get_previous_state+0x74>
   16057:	b8 01 00 00 00       	mov    $0x1,%eax
   1605c:	89 45 d8             	mov    %eax,-0x28(%rbp)
   1605f:	e9 00 00 00 00       	jmp    16064 <yy_get_previous_state+0x74>
   16064:	8b 45 d8             	mov    -0x28(%rbp),%eax
   16067:	88 45 df             	mov    %al,-0x21(%rbp)
   1606a:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   1606e:	48 8d 05 ab 3a 00 00 	lea    0x3aab(%rip),%rax        # 19b20 <yy_accept>
   16075:	66 83 3c 48 00       	cmpw   $0x0,(%rax,%rcx,2)
   1607a:	0f 84 16 00 00 00    	je     16096 <yy_get_previous_state+0xa6>
   16080:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   16083:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16087:	89 48 68             	mov    %ecx,0x68(%rax)
   1608a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1608e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16092:	48 89 48 70          	mov    %rcx,0x70(%rax)
   16096:	e9 00 00 00 00       	jmp    1609b <yy_get_previous_state+0xab>
   1609b:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   1609f:	48 8d 05 3a 3c 00 00 	lea    0x3c3a(%rip),%rax        # 19ce0 <yy_base>
   160a6:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   160aa:	0f b6 4d df          	movzbl -0x21(%rbp),%ecx
   160ae:	01 c8                	add    %ecx,%eax
   160b0:	48 63 c8             	movslq %eax,%rcx
   160b3:	48 8d 05 e6 3a 00 00 	lea    0x3ae6(%rip),%rax        # 19ba0 <yy_chk>
   160ba:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   160be:	3b 45 f4             	cmp    -0xc(%rbp),%eax
   160c1:	0f 84 34 00 00 00    	je     160fb <yy_get_previous_state+0x10b>
   160c7:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   160cb:	48 8d 05 9e 3c 00 00 	lea    0x3c9e(%rip),%rax        # 19d70 <yy_def>
   160d2:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   160d6:	89 45 f4             	mov    %eax,-0xc(%rbp)
   160d9:	83 7d f4 3d          	cmpl   $0x3d,-0xc(%rbp)
   160dd:	0f 8c 13 00 00 00    	jl     160f6 <yy_get_previous_state+0x106>
   160e3:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
   160e7:	89 c1                	mov    %eax,%ecx
   160e9:	48 8d 05 10 3d 00 00 	lea    0x3d10(%rip),%rax        # 19e00 <yy_meta>
   160f0:	8a 04 08             	mov    (%rax,%rcx,1),%al
   160f3:	88 45 df             	mov    %al,-0x21(%rbp)
   160f6:	e9 a0 ff ff ff       	jmp    1609b <yy_get_previous_state+0xab>
   160fb:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   160ff:	48 8d 05 da 3b 00 00 	lea    0x3bda(%rip),%rax        # 19ce0 <yy_base>
   16106:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   1610a:	0f b6 4d df          	movzbl -0x21(%rbp),%ecx
   1610e:	01 c8                	add    %ecx,%eax
   16110:	48 63 c8             	movslq %eax,%rcx
   16113:	48 8d 05 06 3d 00 00 	lea    0x3d06(%rip),%rax        # 19e20 <yy_nxt>
   1611a:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   1611e:	89 45 f4             	mov    %eax,-0xc(%rbp)
   16121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16125:	48 83 c0 01          	add    $0x1,%rax
   16129:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1612d:	e9 e7 fe ff ff       	jmp    16019 <yy_get_previous_state+0x29>
   16132:	8b 45 f4             	mov    -0xc(%rbp),%eax
   16135:	5d                   	pop    %rbp
   16136:	c3                   	ret
   16137:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1613e:	00 00 

0000000000016140 <yy_try_NUL_trans>:
   16140:	55                   	push   %rbp
   16141:	48 89 e5             	mov    %rsp,%rbp
   16144:	89 7d fc             	mov    %edi,-0x4(%rbp)
   16147:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1614b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1614f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16153:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16157:	48 8b 40 40          	mov    0x40(%rax),%rax
   1615b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1615f:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
   16163:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
   16167:	48 8d 05 b2 39 00 00 	lea    0x39b2(%rip),%rax        # 19b20 <yy_accept>
   1616e:	66 83 3c 48 00       	cmpw   $0x0,(%rax,%rcx,2)
   16173:	0f 84 16 00 00 00    	je     1618f <yy_try_NUL_trans+0x4f>
   16179:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   1617c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16180:	89 48 68             	mov    %ecx,0x68(%rax)
   16183:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   16187:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1618b:	48 89 48 70          	mov    %rcx,0x70(%rax)
   1618f:	e9 00 00 00 00       	jmp    16194 <yy_try_NUL_trans+0x54>
   16194:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
   16198:	48 8d 05 41 3b 00 00 	lea    0x3b41(%rip),%rax        # 19ce0 <yy_base>
   1619f:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   161a3:	0f b6 4d d7          	movzbl -0x29(%rbp),%ecx
   161a7:	01 c8                	add    %ecx,%eax
   161a9:	48 63 c8             	movslq %eax,%rcx
   161ac:	48 8d 05 ed 39 00 00 	lea    0x39ed(%rip),%rax        # 19ba0 <yy_chk>
   161b3:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   161b7:	3b 45 fc             	cmp    -0x4(%rbp),%eax
   161ba:	0f 84 34 00 00 00    	je     161f4 <yy_try_NUL_trans+0xb4>
   161c0:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
   161c4:	48 8d 05 a5 3b 00 00 	lea    0x3ba5(%rip),%rax        # 19d70 <yy_def>
   161cb:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   161cf:	89 45 fc             	mov    %eax,-0x4(%rbp)
   161d2:	83 7d fc 3d          	cmpl   $0x3d,-0x4(%rbp)
   161d6:	0f 8c 13 00 00 00    	jl     161ef <yy_try_NUL_trans+0xaf>
   161dc:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
   161e0:	89 c1                	mov    %eax,%ecx
   161e2:	48 8d 05 17 3c 00 00 	lea    0x3c17(%rip),%rax        # 19e00 <yy_meta>
   161e9:	8a 04 08             	mov    (%rax,%rcx,1),%al
   161ec:	88 45 d7             	mov    %al,-0x29(%rbp)
   161ef:	e9 a0 ff ff ff       	jmp    16194 <yy_try_NUL_trans+0x54>
   161f4:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
   161f8:	48 8d 05 e1 3a 00 00 	lea    0x3ae1(%rip),%rax        # 19ce0 <yy_base>
   161ff:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   16203:	0f b6 4d d7          	movzbl -0x29(%rbp),%ecx
   16207:	01 c8                	add    %ecx,%eax
   16209:	48 63 c8             	movslq %eax,%rcx
   1620c:	48 8d 05 0d 3c 00 00 	lea    0x3c0d(%rip),%rax        # 19e20 <yy_nxt>
   16213:	0f bf 04 48          	movswl (%rax,%rcx,2),%eax
   16217:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1621a:	83 7d fc 3c          	cmpl   $0x3c,-0x4(%rbp)
   1621e:	0f 94 c0             	sete   %al
   16221:	24 01                	and    $0x1,%al
   16223:	0f b6 c0             	movzbl %al,%eax
   16226:	89 45 ec             	mov    %eax,-0x14(%rbp)
   16229:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1622d:	0f 84 0a 00 00 00    	je     1623d <yy_try_NUL_trans+0xfd>
   16233:	31 c0                	xor    %eax,%eax
   16235:	89 45 d0             	mov    %eax,-0x30(%rbp)
   16238:	e9 06 00 00 00       	jmp    16243 <yy_try_NUL_trans+0x103>
   1623d:	8b 45 fc             	mov    -0x4(%rbp),%eax
   16240:	89 45 d0             	mov    %eax,-0x30(%rbp)
   16243:	8b 45 d0             	mov    -0x30(%rbp),%eax
   16246:	5d                   	pop    %rbp
   16247:	c3                   	ret
   16248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1624f:	00 

0000000000016250 <yy_get_next_buffer>:
   16250:	55                   	push   %rbp
   16251:	48 89 e5             	mov    %rsp,%rbp
   16254:	48 83 ec 60          	sub    $0x60,%rsp
   16258:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1625c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16260:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16264:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16268:	48 8b 40 28          	mov    0x28(%rax),%rax
   1626c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16270:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16274:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16278:	48 8b 40 08          	mov    0x8(%rax),%rax
   1627c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16284:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   1628b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1628f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16293:	48 8b 40 40          	mov    0x40(%rax),%rax
   16297:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1629b:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   1629f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   162a3:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   162a7:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   162ab:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   162af:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   162b3:	8b 52 34             	mov    0x34(%rdx),%edx
   162b6:	83 c2 01             	add    $0x1,%edx
   162b9:	48 63 d2             	movslq %edx,%rdx
   162bc:	48 01 d1             	add    %rdx,%rcx
   162bf:	48 39 c8             	cmp    %rcx,%rax
   162c2:	0f 86 10 00 00 00    	jbe    162d8 <yy_get_next_buffer+0x88>
   162c8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   162cc:	48 8d 3d 14 3e 00 00 	lea    0x3e14(%rip),%rdi        # 1a0e7 <yy_rule_can_match_eol+0x187>
   162d3:	e8 28 06 00 00       	call   16900 <yy_fatal_error>
   162d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162dc:	48 8b 40 28          	mov    0x28(%rax),%rax
   162e0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   162e4:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   162e8:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   162ec:	83 78 34 00          	cmpl   $0x0,0x34(%rax)
   162f0:	0f 85 3c 00 00 00    	jne    16332 <yy_get_next_buffer+0xe2>
   162f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162fa:	48 8b 40 40          	mov    0x40(%rax),%rax
   162fe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16302:	48 8b 89 80 00 00 00 	mov    0x80(%rcx),%rcx
   16309:	48 29 c8             	sub    %rcx,%rax
   1630c:	48 83 e8 00          	sub    $0x0,%rax
   16310:	48 83 f8 01          	cmp    $0x1,%rax
   16314:	0f 85 0c 00 00 00    	jne    16326 <yy_get_next_buffer+0xd6>
   1631a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   16321:	e9 c3 05 00 00       	jmp    168e9 <yy_get_next_buffer+0x699>
   16326:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
   1632d:	e9 b7 05 00 00       	jmp    168e9 <yy_get_next_buffer+0x699>
   16332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16336:	48 8b 40 40          	mov    0x40(%rax),%rax
   1633a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1633e:	48 8b 89 80 00 00 00 	mov    0x80(%rcx),%rcx
   16345:	48 29 c8             	sub    %rcx,%rax
   16348:	48 83 e8 01          	sub    $0x1,%rax
   1634c:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   1634f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
   16356:	8b 45 d0             	mov    -0x30(%rbp),%eax
   16359:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
   1635c:	0f 8d 30 00 00 00    	jge    16392 <yy_get_next_buffer+0x142>
   16362:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16366:	48 89 c1             	mov    %rax,%rcx
   16369:	48 83 c1 01          	add    $0x1,%rcx
   1636d:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   16371:	8a 08                	mov    (%rax),%cl
   16373:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16377:	48 89 c2             	mov    %rax,%rdx
   1637a:	48 83 c2 01          	add    $0x1,%rdx
   1637e:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   16382:	88 08                	mov    %cl,(%rax)
   16384:	8b 45 d0             	mov    -0x30(%rbp),%eax
   16387:	83 c0 01             	add    $0x1,%eax
   1638a:	89 45 d0             	mov    %eax,-0x30(%rbp)
   1638d:	e9 c4 ff ff ff       	jmp    16356 <yy_get_next_buffer+0x106>
   16392:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16396:	48 8b 40 28          	mov    0x28(%rax),%rax
   1639a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1639e:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   163a2:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   163a6:	83 78 38 02          	cmpl   $0x2,0x38(%rax)
   163aa:	0f 85 2b 00 00 00    	jne    163db <yy_get_next_buffer+0x18b>
   163b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163b4:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
   163bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163bf:	48 8b 40 28          	mov    0x28(%rax),%rax
   163c3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   163c7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   163cb:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   163cf:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   163d6:	e9 5c 03 00 00       	jmp    16737 <yy_get_next_buffer+0x4e7>
   163db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163df:	48 8b 40 28          	mov    0x28(%rax),%rax
   163e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   163e7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   163eb:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   163ef:	8b 40 18             	mov    0x18(%rax),%eax
   163f2:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   163f5:	83 e8 01             	sub    $0x1,%eax
   163f8:	89 45 c8             	mov    %eax,-0x38(%rbp)
   163fb:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
   163ff:	0f 8f 15 01 00 00    	jg     1651a <yy_get_next_buffer+0x2ca>
   16405:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16409:	48 8b 40 28          	mov    0x28(%rax),%rax
   1640d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16411:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16415:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16419:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1641d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16421:	48 8b 40 40          	mov    0x40(%rax),%rax
   16425:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   16429:	48 8b 49 08          	mov    0x8(%rcx),%rcx
   1642d:	48 29 c8             	sub    %rcx,%rax
   16430:	89 45 bc             	mov    %eax,-0x44(%rbp)
   16433:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16437:	83 78 20 00          	cmpl   $0x0,0x20(%rax)
   1643b:	0f 84 72 00 00 00    	je     164b3 <yy_get_next_buffer+0x263>
   16441:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16445:	8b 40 18             	mov    0x18(%rax),%eax
   16448:	c1 e0 01             	shl    $0x1,%eax
   1644b:	89 45 b8             	mov    %eax,-0x48(%rbp)
   1644e:	83 7d b8 00          	cmpl   $0x0,-0x48(%rbp)
   16452:	0f 8f 20 00 00 00    	jg     16478 <yy_get_next_buffer+0x228>
   16458:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1645c:	8b 40 18             	mov    0x18(%rax),%eax
   1645f:	b9 08 00 00 00       	mov    $0x8,%ecx
   16464:	99                   	cltd
   16465:	f7 f9                	idiv   %ecx
   16467:	89 c1                	mov    %eax,%ecx
   16469:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1646d:	03 48 18             	add    0x18(%rax),%ecx
   16470:	89 48 18             	mov    %ecx,0x18(%rax)
   16473:	e9 0d 00 00 00       	jmp    16485 <yy_get_next_buffer+0x235>
   16478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1647c:	8b 48 18             	mov    0x18(%rax),%ecx
   1647f:	c1 e1 01             	shl    $0x1,%ecx
   16482:	89 48 18             	mov    %ecx,0x18(%rax)
   16485:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16489:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1648d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   16491:	8b 40 18             	mov    0x18(%rax),%eax
   16494:	83 c0 02             	add    $0x2,%eax
   16497:	48 63 f0             	movslq %eax,%rsi
   1649a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1649e:	e8 fd 15 00 00       	call   17aa0 <yyrealloc>
   164a3:	48 89 c1             	mov    %rax,%rcx
   164a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   164aa:	48 89 48 08          	mov    %rcx,0x8(%rax)
   164ae:	e9 0c 00 00 00       	jmp    164bf <yy_get_next_buffer+0x26f>
   164b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   164b7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   164be:	00 
   164bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   164c3:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   164c8:	0f 85 10 00 00 00    	jne    164de <yy_get_next_buffer+0x28e>
   164ce:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   164d2:	48 8d 3d 46 3c 00 00 	lea    0x3c46(%rip),%rdi        # 1a11f <yy_rule_can_match_eol+0x1bf>
   164d9:	e8 22 04 00 00       	call   16900 <yy_fatal_error>
   164de:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   164e2:	48 8b 48 08          	mov    0x8(%rax),%rcx
   164e6:	48 63 45 bc          	movslq -0x44(%rbp),%rax
   164ea:	48 01 c1             	add    %rax,%rcx
   164ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164f1:	48 89 48 40          	mov    %rcx,0x40(%rax)
   164f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164f9:	48 8b 40 28          	mov    0x28(%rax),%rax
   164fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16501:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16505:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16509:	8b 40 18             	mov    0x18(%rax),%eax
   1650c:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   1650f:	83 e8 01             	sub    $0x1,%eax
   16512:	89 45 c8             	mov    %eax,-0x38(%rbp)
   16515:	e9 e1 fe ff ff       	jmp    163fb <yy_get_next_buffer+0x1ab>
   1651a:	81 7d c8 00 20 00 00 	cmpl   $0x2000,-0x38(%rbp)
   16521:	0f 8e 07 00 00 00    	jle    1652e <yy_get_next_buffer+0x2de>
   16527:	c7 45 c8 00 20 00 00 	movl   $0x2000,-0x38(%rbp)
   1652e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16532:	48 8b 40 28          	mov    0x28(%rax),%rax
   16536:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1653a:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1653e:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16542:	83 78 24 00          	cmpl   $0x0,0x24(%rax)
   16546:	0f 84 10 01 00 00    	je     1665c <yy_get_next_buffer+0x40c>
   1654c:	c7 45 b4 2a 00 00 00 	movl   $0x2a,-0x4c(%rbp)
   16553:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   1655a:	8b 4d b0             	mov    -0x50(%rbp),%ecx
   1655d:	31 c0                	xor    %eax,%eax
   1655f:	3b 4d c8             	cmp    -0x38(%rbp),%ecx
   16562:	88 45 ab             	mov    %al,-0x55(%rbp)
   16565:	0f 8d 2a 00 00 00    	jge    16595 <yy_get_next_buffer+0x345>
   1656b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1656f:	48 8b 78 08          	mov    0x8(%rax),%rdi
   16573:	e8 a8 cc fe ff       	call   3220 <getc@plt>
   16578:	89 c1                	mov    %eax,%ecx
   1657a:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
   1657d:	31 c0                	xor    %eax,%eax
   1657f:	83 f9 ff             	cmp    $0xffffffff,%ecx
   16582:	88 45 ab             	mov    %al,-0x55(%rbp)
   16585:	0f 84 0a 00 00 00    	je     16595 <yy_get_next_buffer+0x345>
   1658b:	83 7d b4 0a          	cmpl   $0xa,-0x4c(%rbp)
   1658f:	0f 95 c0             	setne  %al
   16592:	88 45 ab             	mov    %al,-0x55(%rbp)
   16595:	8a 45 ab             	mov    -0x55(%rbp),%al
   16598:	a8 01                	test   $0x1,%al
   1659a:	0f 85 05 00 00 00    	jne    165a5 <yy_get_next_buffer+0x355>
   165a0:	e9 39 00 00 00       	jmp    165de <yy_get_next_buffer+0x38e>
   165a5:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   165a8:	88 c2                	mov    %al,%dl
   165aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   165ae:	48 8b 40 28          	mov    0x28(%rax),%rax
   165b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   165b6:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   165ba:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   165be:	48 8b 40 08          	mov    0x8(%rax),%rax
   165c2:	48 63 4d d4          	movslq -0x2c(%rbp),%rcx
   165c6:	48 01 c8             	add    %rcx,%rax
   165c9:	48 63 4d b0          	movslq -0x50(%rbp),%rcx
   165cd:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   165d0:	8b 45 b0             	mov    -0x50(%rbp),%eax
   165d3:	83 c0 01             	add    $0x1,%eax
   165d6:	89 45 b0             	mov    %eax,-0x50(%rbp)
   165d9:	e9 7c ff ff ff       	jmp    1655a <yy_get_next_buffer+0x30a>
   165de:	83 7d b4 0a          	cmpl   $0xa,-0x4c(%rbp)
   165e2:	0f 85 35 00 00 00    	jne    1661d <yy_get_next_buffer+0x3cd>
   165e8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   165eb:	88 c2                	mov    %al,%dl
   165ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   165f1:	48 8b 40 28          	mov    0x28(%rax),%rax
   165f5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   165f9:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   165fd:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16601:	48 8b 40 08          	mov    0x8(%rax),%rax
   16605:	48 63 4d d4          	movslq -0x2c(%rbp),%rcx
   16609:	48 01 c8             	add    %rcx,%rax
   1660c:	8b 4d b0             	mov    -0x50(%rbp),%ecx
   1660f:	89 ce                	mov    %ecx,%esi
   16611:	83 c6 01             	add    $0x1,%esi
   16614:	89 75 b0             	mov    %esi,-0x50(%rbp)
   16617:	48 63 c9             	movslq %ecx,%rcx
   1661a:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   1661d:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%rbp)
   16621:	0f 85 26 00 00 00    	jne    1664d <yy_get_next_buffer+0x3fd>
   16627:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1662b:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1662f:	e8 3c ca fe ff       	call   3070 <ferror@plt>
   16634:	83 f8 00             	cmp    $0x0,%eax
   16637:	0f 84 10 00 00 00    	je     1664d <yy_get_next_buffer+0x3fd>
   1663d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16641:	48 8d 3d 03 3b 00 00 	lea    0x3b03(%rip),%rdi        # 1a14b <yy_rule_can_match_eol+0x1eb>
   16648:	e8 b3 02 00 00       	call   16900 <yy_fatal_error>
   1664d:	8b 4d b0             	mov    -0x50(%rbp),%ecx
   16650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16654:	89 48 34             	mov    %ecx,0x34(%rax)
   16657:	e9 bd 00 00 00       	jmp    16719 <yy_get_next_buffer+0x4c9>
   1665c:	e8 df c9 fe ff       	call   3040 <__errno_location@plt>
   16661:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   16667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1666b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1666f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16673:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16677:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1667b:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1667f:	48 63 45 d4          	movslq -0x2c(%rbp),%rax
   16683:	48 01 c7             	add    %rax,%rdi
   16686:	48 63 55 c8          	movslq -0x38(%rbp),%rdx
   1668a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1668e:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16692:	be 01 00 00 00       	mov    $0x1,%esi
   16697:	e8 f4 c9 fe ff       	call   3090 <fread@plt>
   1669c:	89 c1                	mov    %eax,%ecx
   1669e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   166a2:	89 48 34             	mov    %ecx,0x34(%rax)
   166a5:	31 c0                	xor    %eax,%eax
   166a7:	83 f9 00             	cmp    $0x0,%ecx
   166aa:	88 45 aa             	mov    %al,-0x56(%rbp)
   166ad:	0f 85 16 00 00 00    	jne    166c9 <yy_get_next_buffer+0x479>
   166b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   166b7:	48 8b 78 08          	mov    0x8(%rax),%rdi
   166bb:	e8 b0 c9 fe ff       	call   3070 <ferror@plt>
   166c0:	83 f8 00             	cmp    $0x0,%eax
   166c3:	0f 95 c0             	setne  %al
   166c6:	88 45 aa             	mov    %al,-0x56(%rbp)
   166c9:	8a 45 aa             	mov    -0x56(%rbp),%al
   166cc:	a8 01                	test   $0x1,%al
   166ce:	0f 85 05 00 00 00    	jne    166d9 <yy_get_next_buffer+0x489>
   166d4:	e9 3b 00 00 00       	jmp    16714 <yy_get_next_buffer+0x4c4>
   166d9:	e8 62 c9 fe ff       	call   3040 <__errno_location@plt>
   166de:	83 38 04             	cmpl   $0x4,(%rax)
   166e1:	0f 84 10 00 00 00    	je     166f7 <yy_get_next_buffer+0x4a7>
   166e7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   166eb:	48 8d 3d 59 3a 00 00 	lea    0x3a59(%rip),%rdi        # 1a14b <yy_rule_can_match_eol+0x1eb>
   166f2:	e8 09 02 00 00       	call   16900 <yy_fatal_error>
   166f7:	e8 44 c9 fe ff       	call   3040 <__errno_location@plt>
   166fc:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   16702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16706:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1670a:	e8 51 ca fe ff       	call   3160 <clearerr@plt>
   1670f:	e9 53 ff ff ff       	jmp    16667 <yy_get_next_buffer+0x417>
   16714:	e9 00 00 00 00       	jmp    16719 <yy_get_next_buffer+0x4c9>
   16719:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1671d:	8b 48 34             	mov    0x34(%rax),%ecx
   16720:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16724:	48 8b 40 28          	mov    0x28(%rax),%rax
   16728:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1672c:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16730:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16734:	89 48 1c             	mov    %ecx,0x1c(%rax)
   16737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1673b:	83 78 34 00          	cmpl   $0x0,0x34(%rax)
   1673f:	0f 85 4e 00 00 00    	jne    16793 <yy_get_next_buffer+0x543>
   16745:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   16749:	0f 85 1d 00 00 00    	jne    1676c <yy_get_next_buffer+0x51c>
   1674f:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%rbp)
   16756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1675a:	48 8b 78 08          	mov    0x8(%rax),%rdi
   1675e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16762:	e8 d9 01 00 00       	call   16940 <yyrestart>
   16767:	e9 22 00 00 00       	jmp    1678e <yy_get_next_buffer+0x53e>
   1676c:	c7 45 cc 02 00 00 00 	movl   $0x2,-0x34(%rbp)
   16773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16777:	48 8b 40 28          	mov    0x28(%rax),%rax
   1677b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1677f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16783:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16787:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%rax)
   1678e:	e9 07 00 00 00       	jmp    1679a <yy_get_next_buffer+0x54a>
   16793:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
   1679a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1679e:	8b 40 34             	mov    0x34(%rax),%eax
   167a1:	03 45 d4             	add    -0x2c(%rbp),%eax
   167a4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   167a8:	48 8b 49 28          	mov    0x28(%rcx),%rcx
   167ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   167b0:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   167b4:	48 8b 0c d1          	mov    (%rcx,%rdx,8),%rcx
   167b8:	3b 41 18             	cmp    0x18(%rcx),%eax
   167bb:	0f 8e a5 00 00 00    	jle    16866 <yy_get_next_buffer+0x616>
   167c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   167c5:	8b 40 34             	mov    0x34(%rax),%eax
   167c8:	03 45 d4             	add    -0x2c(%rbp),%eax
   167cb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   167cf:	8b 49 34             	mov    0x34(%rcx),%ecx
   167d2:	c1 f9 01             	sar    $0x1,%ecx
   167d5:	01 c8                	add    %ecx,%eax
   167d7:	89 45 ac             	mov    %eax,-0x54(%rbp)
   167da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   167de:	48 8b 40 28          	mov    0x28(%rax),%rax
   167e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   167e6:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   167ea:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   167ee:	48 8b 78 08          	mov    0x8(%rax),%rdi
   167f2:	48 63 75 ac          	movslq -0x54(%rbp),%rsi
   167f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   167fa:	e8 a1 12 00 00       	call   17aa0 <yyrealloc>
   167ff:	48 89 c1             	mov    %rax,%rcx
   16802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16806:	48 8b 40 28          	mov    0x28(%rax),%rax
   1680a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1680e:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16812:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16816:	48 89 48 08          	mov    %rcx,0x8(%rax)
   1681a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1681e:	48 8b 40 28          	mov    0x28(%rax),%rax
   16822:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16826:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1682a:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1682e:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
   16833:	0f 85 10 00 00 00    	jne    16849 <yy_get_next_buffer+0x5f9>
   16839:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1683d:	48 8d 3d 24 39 00 00 	lea    0x3924(%rip),%rdi        # 1a168 <yy_rule_can_match_eol+0x208>
   16844:	e8 b7 00 00 00       	call   16900 <yy_fatal_error>
   16849:	8b 4d ac             	mov    -0x54(%rbp),%ecx
   1684c:	83 e9 02             	sub    $0x2,%ecx
   1684f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16853:	48 8b 40 28          	mov    0x28(%rax),%rax
   16857:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1685b:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   1685f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16863:	89 48 18             	mov    %ecx,0x18(%rax)
   16866:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
   16869:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1686d:	03 48 34             	add    0x34(%rax),%ecx
   16870:	89 48 34             	mov    %ecx,0x34(%rax)
   16873:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16877:	48 8b 40 28          	mov    0x28(%rax),%rax
   1687b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1687f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16883:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16887:	48 8b 40 08          	mov    0x8(%rax),%rax
   1688b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1688f:	48 63 49 34          	movslq 0x34(%rcx),%rcx
   16893:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   16897:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1689b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1689f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   168a3:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   168a7:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   168ab:	48 8b 40 08          	mov    0x8(%rax),%rax
   168af:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   168b3:	8b 49 34             	mov    0x34(%rcx),%ecx
   168b6:	83 c1 01             	add    $0x1,%ecx
   168b9:	48 63 c9             	movslq %ecx,%rcx
   168bc:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   168c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   168c4:	48 8b 40 28          	mov    0x28(%rax),%rax
   168c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   168cc:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   168d0:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   168d4:	48 8b 48 08          	mov    0x8(%rax),%rcx
   168d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   168dc:	48 89 88 80 00 00 00 	mov    %rcx,0x80(%rax)
   168e3:	8b 45 cc             	mov    -0x34(%rbp),%eax
   168e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
   168e9:	8b 45 fc             	mov    -0x4(%rbp),%eax
   168ec:	48 83 c4 60          	add    $0x60,%rsp
   168f0:	5d                   	pop    %rbp
   168f1:	c3                   	ret
   168f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   168f9:	00 00 00 
   168fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016900 <yy_fatal_error>:
   16900:	55                   	push   %rbp
   16901:	48 89 e5             	mov    %rsp,%rbp
   16904:	48 83 ec 20          	sub    $0x20,%rsp
   16908:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1690c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16910:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16914:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16918:	48 8b 05 d1 96 00 00 	mov    0x96d1(%rip),%rax        # 1fff0 <stderr@GLIBC_2.2.5>
   1691f:	48 8b 38             	mov    (%rax),%rdi
   16922:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16926:	48 8d 35 12 1c 00 00 	lea    0x1c12(%rip),%rsi        # 1853f <_IO_stdin_used+0x53f>
   1692d:	b0 00                	mov    $0x0,%al
   1692f:	e8 fc c7 fe ff       	call   3130 <fprintf@plt>
   16934:	bf 02 00 00 00       	mov    $0x2,%edi
   16939:	e8 b2 c8 fe ff       	call   31f0 <exit@plt>
   1693e:	66 90                	xchg   %ax,%ax

0000000000016940 <yyrestart>:
   16940:	55                   	push   %rbp
   16941:	48 89 e5             	mov    %rsp,%rbp
   16944:	48 83 ec 20          	sub    $0x20,%rsp
   16948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1694c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16950:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16954:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16958:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1695c:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16961:	0f 84 20 00 00 00    	je     16987 <yyrestart+0x47>
   16967:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1696b:	48 8b 40 28          	mov    0x28(%rax),%rax
   1696f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16973:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16977:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   1697c:	0f 85 4a 00 00 00    	jne    169cc <yyrestart+0x8c>
   16982:	e9 0f 00 00 00       	jmp    16996 <yyrestart+0x56>
   16987:	31 c0                	xor    %eax,%eax
   16989:	a8 01                	test   $0x1,%al
   1698b:	0f 85 3b 00 00 00    	jne    169cc <yyrestart+0x8c>
   16991:	e9 00 00 00 00       	jmp    16996 <yyrestart+0x56>
   16996:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1699a:	e8 e1 f2 ff ff       	call   15c80 <yyensure_buffer_stack>
   1699f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169a3:	48 8b 78 08          	mov    0x8(%rax),%rdi
   169a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   169ab:	be 00 40 00 00       	mov    $0x4000,%esi
   169b0:	e8 1b f4 ff ff       	call   15dd0 <yy_create_buffer>
   169b5:	48 89 c2             	mov    %rax,%rdx
   169b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169bc:	48 8b 40 28          	mov    0x28(%rax),%rax
   169c0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   169c4:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   169c8:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
   169cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169d0:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   169d5:	0f 84 1d 00 00 00    	je     169f8 <yyrestart+0xb8>
   169db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169df:	48 8b 40 28          	mov    0x28(%rax),%rax
   169e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   169e7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   169eb:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   169ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   169f3:	e9 0b 00 00 00       	jmp    16a03 <yyrestart+0xc3>
   169f8:	31 c0                	xor    %eax,%eax
   169fa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   169fe:	e9 00 00 00 00       	jmp    16a03 <yyrestart+0xc3>
   16a03:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   16a07:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   16a0b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16a0f:	e8 1c 00 00 00       	call   16a30 <yy_init_buffer>
   16a14:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16a18:	e8 63 f4 ff ff       	call   15e80 <yy_load_buffer_state>
   16a1d:	48 83 c4 20          	add    $0x20,%rsp
   16a21:	5d                   	pop    %rbp
   16a22:	c3                   	ret
   16a23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16a2a:	00 00 00 
   16a2d:	0f 1f 00             	nopl   (%rax)

0000000000016a30 <yy_init_buffer>:
   16a30:	55                   	push   %rbp
   16a31:	48 89 e5             	mov    %rsp,%rbp
   16a34:	48 83 ec 40          	sub    $0x40,%rsp
   16a38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16a3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16a40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   16a44:	e8 f7 c5 fe ff       	call   3040 <__errno_location@plt>
   16a49:	8b 00                	mov    (%rax),%eax
   16a4b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   16a4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16a52:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16a56:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16a5a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   16a5e:	e8 3d 03 00 00       	call   16da0 <yy_flush_buffer>
   16a63:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a6b:	48 89 08             	mov    %rcx,(%rax)
   16a6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a72:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%rax)
   16a79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a7d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   16a81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16a85:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16a8a:	0f 84 1d 00 00 00    	je     16aad <yy_init_buffer+0x7d>
   16a90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16a94:	48 8b 40 28          	mov    0x28(%rax),%rax
   16a98:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   16a9c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16aa0:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16aa4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   16aa8:	e9 0b 00 00 00       	jmp    16ab8 <yy_init_buffer+0x88>
   16aad:	31 c0                	xor    %eax,%eax
   16aaf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   16ab3:	e9 00 00 00 00       	jmp    16ab8 <yy_init_buffer+0x88>
   16ab8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   16abc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   16ac0:	48 39 c8             	cmp    %rcx,%rax
   16ac3:	0f 84 16 00 00 00    	je     16adf <yy_init_buffer+0xaf>
   16ac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16acd:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%rax)
   16ad4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ad8:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
   16adf:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   16ae4:	0f 84 23 00 00 00    	je     16b0d <yy_init_buffer+0xdd>
   16aea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16aee:	e8 8d c6 fe ff       	call   3180 <fileno@plt>
   16af3:	89 c7                	mov    %eax,%edi
   16af5:	e8 86 c5 fe ff       	call   3080 <isatty@plt>
   16afa:	83 f8 00             	cmp    $0x0,%eax
   16afd:	0f 9f c0             	setg   %al
   16b00:	24 01                	and    $0x1,%al
   16b02:	0f b6 c0             	movzbl %al,%eax
   16b05:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   16b08:	e9 0a 00 00 00       	jmp    16b17 <yy_init_buffer+0xe7>
   16b0d:	31 c0                	xor    %eax,%eax
   16b0f:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   16b12:	e9 00 00 00 00       	jmp    16b17 <yy_init_buffer+0xe7>
   16b17:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
   16b1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b1e:	89 48 24             	mov    %ecx,0x24(%rax)
   16b21:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   16b24:	89 45 c0             	mov    %eax,-0x40(%rbp)
   16b27:	e8 14 c5 fe ff       	call   3040 <__errno_location@plt>
   16b2c:	8b 4d c0             	mov    -0x40(%rbp),%ecx
   16b2f:	89 08                	mov    %ecx,(%rax)
   16b31:	48 83 c4 40          	add    $0x40,%rsp
   16b35:	5d                   	pop    %rbp
   16b36:	c3                   	ret
   16b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16b3e:	00 00 

0000000000016b40 <yy_switch_to_buffer>:
   16b40:	55                   	push   %rbp
   16b41:	48 89 e5             	mov    %rsp,%rbp
   16b44:	48 83 ec 20          	sub    $0x20,%rsp
   16b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16b50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16b54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16b58:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16b5c:	e8 1f f1 ff ff       	call   15c80 <yyensure_buffer_stack>
   16b61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b65:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16b6a:	0f 84 1d 00 00 00    	je     16b8d <yy_switch_to_buffer+0x4d>
   16b70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b74:	48 8b 40 28          	mov    0x28(%rax),%rax
   16b78:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16b7c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16b80:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16b84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16b88:	e9 0b 00 00 00       	jmp    16b98 <yy_switch_to_buffer+0x58>
   16b8d:	31 c0                	xor    %eax,%eax
   16b8f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16b93:	e9 00 00 00 00       	jmp    16b98 <yy_switch_to_buffer+0x58>
   16b98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16b9c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   16ba0:	0f 85 05 00 00 00    	jne    16bab <yy_switch_to_buffer+0x6b>
   16ba6:	e9 b9 00 00 00       	jmp    16c64 <yy_switch_to_buffer+0x124>
   16bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16baf:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16bb4:	0f 84 20 00 00 00    	je     16bda <yy_switch_to_buffer+0x9a>
   16bba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bbe:	48 8b 40 28          	mov    0x28(%rax),%rax
   16bc2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16bc6:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16bca:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   16bcf:	0f 85 14 00 00 00    	jne    16be9 <yy_switch_to_buffer+0xa9>
   16bd5:	e9 5e 00 00 00       	jmp    16c38 <yy_switch_to_buffer+0xf8>
   16bda:	31 c0                	xor    %eax,%eax
   16bdc:	a8 01                	test   $0x1,%al
   16bde:	0f 85 05 00 00 00    	jne    16be9 <yy_switch_to_buffer+0xa9>
   16be4:	e9 4f 00 00 00       	jmp    16c38 <yy_switch_to_buffer+0xf8>
   16be9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bed:	8a 48 30             	mov    0x30(%rax),%cl
   16bf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bf4:	48 8b 40 40          	mov    0x40(%rax),%rax
   16bf8:	88 08                	mov    %cl,(%rax)
   16bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bfe:	48 8b 48 40          	mov    0x40(%rax),%rcx
   16c02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c06:	48 8b 40 28          	mov    0x28(%rax),%rax
   16c0a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16c0e:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16c12:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16c16:	48 89 48 10          	mov    %rcx,0x10(%rax)
   16c1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c1e:	8b 48 34             	mov    0x34(%rax),%ecx
   16c21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c25:	48 8b 40 28          	mov    0x28(%rax),%rax
   16c29:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16c2d:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16c31:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16c35:	89 48 1c             	mov    %ecx,0x1c(%rax)
   16c38:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16c3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c40:	48 8b 40 28          	mov    0x28(%rax),%rax
   16c44:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16c48:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16c4c:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
   16c50:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16c54:	e8 27 f2 ff ff       	call   15e80 <yy_load_buffer_state>
   16c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c5d:	c7 40 50 01 00 00 00 	movl   $0x1,0x50(%rax)
   16c64:	48 83 c4 20          	add    $0x20,%rsp
   16c68:	5d                   	pop    %rbp
   16c69:	c3                   	ret
   16c6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000016c70 <yyalloc>:
   16c70:	55                   	push   %rbp
   16c71:	48 89 e5             	mov    %rsp,%rbp
   16c74:	48 83 ec 20          	sub    $0x20,%rsp
   16c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16c80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16c84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16c88:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16c8c:	e8 ff c4 fe ff       	call   3190 <malloc@plt>
   16c91:	48 83 c4 20          	add    $0x20,%rsp
   16c95:	5d                   	pop    %rbp
   16c96:	c3                   	ret
   16c97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16c9e:	00 00 

0000000000016ca0 <yy_delete_buffer>:
   16ca0:	55                   	push   %rbp
   16ca1:	48 89 e5             	mov    %rsp,%rbp
   16ca4:	48 83 ec 30          	sub    $0x30,%rsp
   16ca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16cac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16cb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16cb4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16cb8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   16cbd:	0f 85 05 00 00 00    	jne    16cc8 <yy_delete_buffer+0x28>
   16cc3:	e9 94 00 00 00       	jmp    16d5c <yy_delete_buffer+0xbc>
   16cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ccc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16cd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16cd4:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16cd9:	0f 84 1d 00 00 00    	je     16cfc <yy_delete_buffer+0x5c>
   16cdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ce3:	48 8b 40 28          	mov    0x28(%rax),%rax
   16ce7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16ceb:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16cef:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16cf3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16cf7:	e9 0b 00 00 00       	jmp    16d07 <yy_delete_buffer+0x67>
   16cfc:	31 c0                	xor    %eax,%eax
   16cfe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16d02:	e9 00 00 00 00       	jmp    16d07 <yy_delete_buffer+0x67>
   16d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16d0b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   16d0f:	48 39 c8             	cmp    %rcx,%rax
   16d12:	0f 85 18 00 00 00    	jne    16d30 <yy_delete_buffer+0x90>
   16d18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d1c:	48 8b 40 28          	mov    0x28(%rax),%rax
   16d20:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16d24:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16d28:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
   16d2f:	00 
   16d30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d34:	83 78 20 00          	cmpl   $0x0,0x20(%rax)
   16d38:	0f 84 11 00 00 00    	je     16d4f <yy_delete_buffer+0xaf>
   16d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d42:	48 8b 78 08          	mov    0x8(%rax),%rdi
   16d46:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16d4a:	e8 21 00 00 00       	call   16d70 <yyfree>
   16d4f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16d53:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16d57:	e8 14 00 00 00       	call   16d70 <yyfree>
   16d5c:	48 83 c4 30          	add    $0x30,%rsp
   16d60:	5d                   	pop    %rbp
   16d61:	c3                   	ret
   16d62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   16d69:	00 00 00 
   16d6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000016d70 <yyfree>:
   16d70:	55                   	push   %rbp
   16d71:	48 89 e5             	mov    %rsp,%rbp
   16d74:	48 83 ec 20          	sub    $0x20,%rsp
   16d78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16d7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16d80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16d84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16d88:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   16d8c:	e8 9f c2 fe ff       	call   3030 <free@plt>
   16d91:	48 83 c4 20          	add    $0x20,%rsp
   16d95:	5d                   	pop    %rbp
   16d96:	c3                   	ret
   16d97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   16d9e:	00 00 

0000000000016da0 <yy_flush_buffer>:
   16da0:	55                   	push   %rbp
   16da1:	48 89 e5             	mov    %rsp,%rbp
   16da4:	48 83 ec 30          	sub    $0x30,%rsp
   16da8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16dac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16db0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16db4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16db8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   16dbd:	0f 85 05 00 00 00    	jne    16dc8 <yy_flush_buffer+0x28>
   16dc3:	e9 a1 00 00 00       	jmp    16e69 <yy_flush_buffer+0xc9>
   16dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dcc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   16dd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dd7:	48 8b 40 08          	mov    0x8(%rax),%rax
   16ddb:	c6 00 00             	movb   $0x0,(%rax)
   16dde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16de2:	48 8b 40 08          	mov    0x8(%rax),%rax
   16de6:	c6 40 01 00          	movb   $0x0,0x1(%rax)
   16dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dee:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16df2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16df6:	48 89 48 10          	mov    %rcx,0x10(%rax)
   16dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dfe:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%rax)
   16e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e09:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
   16e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e14:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   16e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e1c:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16e21:	0f 84 1d 00 00 00    	je     16e44 <yy_flush_buffer+0xa4>
   16e27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e2b:	48 8b 40 28          	mov    0x28(%rax),%rax
   16e2f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16e33:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16e37:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   16e3b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16e3f:	e9 0b 00 00 00       	jmp    16e4f <yy_flush_buffer+0xaf>
   16e44:	31 c0                	xor    %eax,%eax
   16e46:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   16e4a:	e9 00 00 00 00       	jmp    16e4f <yy_flush_buffer+0xaf>
   16e4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e53:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   16e57:	48 39 c8             	cmp    %rcx,%rax
   16e5a:	0f 85 09 00 00 00    	jne    16e69 <yy_flush_buffer+0xc9>
   16e60:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16e64:	e8 17 f0 ff ff       	call   15e80 <yy_load_buffer_state>
   16e69:	48 83 c4 30          	add    $0x30,%rsp
   16e6d:	5d                   	pop    %rbp
   16e6e:	c3                   	ret
   16e6f:	90                   	nop

0000000000016e70 <yypush_buffer_state>:
   16e70:	55                   	push   %rbp
   16e71:	48 89 e5             	mov    %rsp,%rbp
   16e74:	48 83 ec 20          	sub    $0x20,%rsp
   16e78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16e80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16e84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   16e88:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   16e8d:	0f 85 05 00 00 00    	jne    16e98 <yypush_buffer_state+0x28>
   16e93:	e9 10 01 00 00       	jmp    16fa8 <yypush_buffer_state+0x138>
   16e98:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16e9c:	e8 df ed ff ff       	call   15c80 <yyensure_buffer_stack>
   16ea1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ea5:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16eaa:	0f 84 20 00 00 00    	je     16ed0 <yypush_buffer_state+0x60>
   16eb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16eb4:	48 8b 40 28          	mov    0x28(%rax),%rax
   16eb8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16ebc:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16ec0:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   16ec5:	0f 85 14 00 00 00    	jne    16edf <yypush_buffer_state+0x6f>
   16ecb:	e9 5e 00 00 00       	jmp    16f2e <yypush_buffer_state+0xbe>
   16ed0:	31 c0                	xor    %eax,%eax
   16ed2:	a8 01                	test   $0x1,%al
   16ed4:	0f 85 05 00 00 00    	jne    16edf <yypush_buffer_state+0x6f>
   16eda:	e9 4f 00 00 00       	jmp    16f2e <yypush_buffer_state+0xbe>
   16edf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ee3:	8a 48 30             	mov    0x30(%rax),%cl
   16ee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16eea:	48 8b 40 40          	mov    0x40(%rax),%rax
   16eee:	88 08                	mov    %cl,(%rax)
   16ef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ef4:	48 8b 48 40          	mov    0x40(%rax),%rcx
   16ef8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16efc:	48 8b 40 28          	mov    0x28(%rax),%rax
   16f00:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16f04:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16f08:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16f0c:	48 89 48 10          	mov    %rcx,0x10(%rax)
   16f10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f14:	8b 48 34             	mov    0x34(%rax),%ecx
   16f17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f1b:	48 8b 40 28          	mov    0x28(%rax),%rax
   16f1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16f23:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   16f27:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   16f2b:	89 48 1c             	mov    %ecx,0x1c(%rax)
   16f2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f32:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16f37:	0f 84 20 00 00 00    	je     16f5d <yypush_buffer_state+0xed>
   16f3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f41:	48 8b 40 28          	mov    0x28(%rax),%rax
   16f45:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16f49:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16f4d:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   16f52:	0f 85 14 00 00 00    	jne    16f6c <yypush_buffer_state+0xfc>
   16f58:	e9 1f 00 00 00       	jmp    16f7c <yypush_buffer_state+0x10c>
   16f5d:	31 c0                	xor    %eax,%eax
   16f5f:	a8 01                	test   $0x1,%al
   16f61:	0f 85 05 00 00 00    	jne    16f6c <yypush_buffer_state+0xfc>
   16f67:	e9 10 00 00 00       	jmp    16f7c <yypush_buffer_state+0x10c>
   16f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f70:	48 8b 48 18          	mov    0x18(%rax),%rcx
   16f74:	48 83 c1 01          	add    $0x1,%rcx
   16f78:	48 89 48 18          	mov    %rcx,0x18(%rax)
   16f7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f84:	48 8b 40 28          	mov    0x28(%rax),%rax
   16f88:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16f8c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16f90:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
   16f94:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   16f98:	e8 e3 ee ff ff       	call   15e80 <yy_load_buffer_state>
   16f9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16fa1:	c7 40 50 01 00 00 00 	movl   $0x1,0x50(%rax)
   16fa8:	48 83 c4 20          	add    $0x20,%rsp
   16fac:	5d                   	pop    %rbp
   16fad:	c3                   	ret
   16fae:	66 90                	xchg   %ax,%ax

0000000000016fb0 <yypop_buffer_state>:
   16fb0:	55                   	push   %rbp
   16fb1:	48 89 e5             	mov    %rsp,%rbp
   16fb4:	48 83 ec 20          	sub    $0x20,%rsp
   16fb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16fbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fc0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16fc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16fc8:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   16fcd:	0f 84 20 00 00 00    	je     16ff3 <yypop_buffer_state+0x43>
   16fd3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16fd7:	48 8b 40 28          	mov    0x28(%rax),%rax
   16fdb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   16fdf:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   16fe3:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   16fe8:	0f 85 19 00 00 00    	jne    17007 <yypop_buffer_state+0x57>
   16fee:	e9 0f 00 00 00       	jmp    17002 <yypop_buffer_state+0x52>
   16ff3:	31 c0                	xor    %eax,%eax
   16ff5:	a8 01                	test   $0x1,%al
   16ff7:	0f 85 0a 00 00 00    	jne    17007 <yypop_buffer_state+0x57>
   16ffd:	e9 00 00 00 00       	jmp    17002 <yypop_buffer_state+0x52>
   17002:	e9 cd 00 00 00       	jmp    170d4 <yypop_buffer_state+0x124>
   17007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1700b:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   17010:	0f 84 1d 00 00 00    	je     17033 <yypop_buffer_state+0x83>
   17016:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1701a:	48 8b 40 28          	mov    0x28(%rax),%rax
   1701e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17022:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   17026:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1702a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1702e:	e9 0b 00 00 00       	jmp    1703e <yypop_buffer_state+0x8e>
   17033:	31 c0                	xor    %eax,%eax
   17035:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17039:	e9 00 00 00 00       	jmp    1703e <yypop_buffer_state+0x8e>
   1703e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   17042:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17046:	e8 55 fc ff ff       	call   16ca0 <yy_delete_buffer>
   1704b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1704f:	48 8b 40 28          	mov    0x28(%rax),%rax
   17053:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17057:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1705b:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
   17062:	00 
   17063:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17067:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
   1706c:	0f 86 10 00 00 00    	jbe    17082 <yypop_buffer_state+0xd2>
   17072:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17076:	48 8b 48 18          	mov    0x18(%rax),%rcx
   1707a:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
   1707e:	48 89 48 18          	mov    %rcx,0x18(%rax)
   17082:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17086:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   1708b:	0f 84 20 00 00 00    	je     170b1 <yypop_buffer_state+0x101>
   17091:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17095:	48 8b 40 28          	mov    0x28(%rax),%rax
   17099:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1709d:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   170a1:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   170a6:	0f 85 14 00 00 00    	jne    170c0 <yypop_buffer_state+0x110>
   170ac:	e9 23 00 00 00       	jmp    170d4 <yypop_buffer_state+0x124>
   170b1:	31 c0                	xor    %eax,%eax
   170b3:	a8 01                	test   $0x1,%al
   170b5:	0f 85 05 00 00 00    	jne    170c0 <yypop_buffer_state+0x110>
   170bb:	e9 14 00 00 00       	jmp    170d4 <yypop_buffer_state+0x124>
   170c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   170c4:	e8 b7 ed ff ff       	call   15e80 <yy_load_buffer_state>
   170c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   170cd:	c7 40 50 01 00 00 00 	movl   $0x1,0x50(%rax)
   170d4:	48 83 c4 20          	add    $0x20,%rsp
   170d8:	5d                   	pop    %rbp
   170d9:	c3                   	ret
   170da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000170e0 <yy_scan_buffer>:
   170e0:	55                   	push   %rbp
   170e1:	48 89 e5             	mov    %rsp,%rbp
   170e4:	48 83 ec 30          	sub    $0x30,%rsp
   170e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   170ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   170f0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   170f4:	48 83 7d e8 02       	cmpq   $0x2,-0x18(%rbp)
   170f9:	0f 82 32 00 00 00    	jb     17131 <yy_scan_buffer+0x51>
   170ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17103:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   17107:	48 83 e9 02          	sub    $0x2,%rcx
   1710b:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   1710f:	83 f8 00             	cmp    $0x0,%eax
   17112:	0f 85 19 00 00 00    	jne    17131 <yy_scan_buffer+0x51>
   17118:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1711c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   17120:	48 83 e9 01          	sub    $0x1,%rcx
   17124:	0f be 04 08          	movsbl (%rax,%rcx,1),%eax
   17128:	83 f8 00             	cmp    $0x0,%eax
   1712b:	0f 84 0d 00 00 00    	je     1713e <yy_scan_buffer+0x5e>
   17131:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   17138:	00 
   17139:	e9 b7 00 00 00       	jmp    171f5 <yy_scan_buffer+0x115>
   1713e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   17142:	bf 40 00 00 00       	mov    $0x40,%edi
   17147:	e8 24 fb ff ff       	call   16c70 <yyalloc>
   1714c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   17150:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   17155:	0f 85 10 00 00 00    	jne    1716b <yy_scan_buffer+0x8b>
   1715b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1715f:	48 8d 3d ca 2e 00 00 	lea    0x2eca(%rip),%rdi        # 1a030 <yy_rule_can_match_eol+0xd0>
   17166:	e8 95 f7 ff ff       	call   16900 <yy_fatal_error>
   1716b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1716f:	48 83 e8 02          	sub    $0x2,%rax
   17173:	89 c1                	mov    %eax,%ecx
   17175:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17179:	89 48 18             	mov    %ecx,0x18(%rax)
   1717c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17180:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17184:	48 89 48 08          	mov    %rcx,0x8(%rax)
   17188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1718c:	48 89 48 10          	mov    %rcx,0x10(%rax)
   17190:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17194:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
   1719b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1719f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   171a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171aa:	8b 48 18             	mov    0x18(%rax),%ecx
   171ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171b1:	89 48 1c             	mov    %ecx,0x1c(%rax)
   171b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171b8:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
   171bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171c3:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%rax)
   171ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171ce:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
   171d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171d9:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
   171e0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   171e4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   171e8:	e8 53 f9 ff ff       	call   16b40 <yy_switch_to_buffer>
   171ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   171f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   171f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171f9:	48 83 c4 30          	add    $0x30,%rsp
   171fd:	5d                   	pop    %rbp
   171fe:	c3                   	ret
   171ff:	90                   	nop

0000000000017200 <yy_scan_string>:
   17200:	55                   	push   %rbp
   17201:	48 89 e5             	mov    %rsp,%rbp
   17204:	48 83 ec 20          	sub    $0x20,%rsp
   17208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1720c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17214:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17218:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   1721c:	e8 9f be fe ff       	call   30c0 <strlen@plt>
   17221:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   17225:	89 c6                	mov    %eax,%esi
   17227:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1722b:	e8 10 00 00 00       	call   17240 <yy_scan_bytes>
   17230:	48 83 c4 20          	add    $0x20,%rsp
   17234:	5d                   	pop    %rbp
   17235:	c3                   	ret
   17236:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1723d:	00 00 00 

0000000000017240 <yy_scan_bytes>:
   17240:	55                   	push   %rbp
   17241:	48 89 e5             	mov    %rsp,%rbp
   17244:	48 83 ec 40          	sub    $0x40,%rsp
   17248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1724c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1724f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   17253:	8b 45 f4             	mov    -0xc(%rbp),%eax
   17256:	83 c0 02             	add    $0x2,%eax
   17259:	48 98                	cltq
   1725b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1725f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
   17263:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17267:	e8 04 fa ff ff       	call   16c70 <yyalloc>
   1726c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   17270:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   17275:	0f 85 10 00 00 00    	jne    1728b <yy_scan_bytes+0x4b>
   1727b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1727f:	48 8d 3d d4 2d 00 00 	lea    0x2dd4(%rip),%rdi        # 1a05a <yy_rule_can_match_eol+0xfa>
   17286:	e8 75 f6 ff ff       	call   16900 <yy_fatal_error>
   1728b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
   17292:	8b 45 cc             	mov    -0x34(%rbp),%eax
   17295:	3b 45 f4             	cmp    -0xc(%rbp),%eax
   17298:	0f 8d 24 00 00 00    	jge    172c2 <yy_scan_bytes+0x82>
   1729e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   172a2:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   172a6:	8a 14 08             	mov    (%rax,%rcx,1),%dl
   172a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   172ad:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
   172b1:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   172b4:	8b 45 cc             	mov    -0x34(%rbp),%eax
   172b7:	83 c0 01             	add    $0x1,%eax
   172ba:	89 45 cc             	mov    %eax,-0x34(%rbp)
   172bd:	e9 d0 ff ff ff       	jmp    17292 <yy_scan_bytes+0x52>
   172c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   172c6:	8b 4d f4             	mov    -0xc(%rbp),%ecx
   172c9:	83 c1 01             	add    $0x1,%ecx
   172cc:	48 63 c9             	movslq %ecx,%rcx
   172cf:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   172d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   172d7:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
   172db:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
   172df:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
   172e3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   172e7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   172eb:	e8 f0 fd ff ff       	call   170e0 <yy_scan_buffer>
   172f0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   172f4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   172f9:	0f 85 10 00 00 00    	jne    1730f <yy_scan_bytes+0xcf>
   172ff:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   17303:	48 8d 3d 79 2d 00 00 	lea    0x2d79(%rip),%rdi        # 1a083 <yy_rule_can_match_eol+0x123>
   1730a:	e8 f1 f5 ff ff       	call   16900 <yy_fatal_error>
   1730f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17313:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
   1731a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1731e:	48 83 c4 40          	add    $0x40,%rsp
   17322:	5d                   	pop    %rbp
   17323:	c3                   	ret
   17324:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1732b:	00 00 00 
   1732e:	66 90                	xchg   %ax,%ax

0000000000017330 <yyget_extra>:
   17330:	55                   	push   %rbp
   17331:	48 89 e5             	mov    %rsp,%rbp
   17334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1733c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17340:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17344:	48 8b 00             	mov    (%rax),%rax
   17347:	5d                   	pop    %rbp
   17348:	c3                   	ret
   17349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017350 <yyget_lineno>:
   17350:	55                   	push   %rbp
   17351:	48 89 e5             	mov    %rsp,%rbp
   17354:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1735c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17364:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   17369:	0f 84 20 00 00 00    	je     1738f <yyget_lineno+0x3f>
   1736f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17373:	48 8b 40 28          	mov    0x28(%rax),%rax
   17377:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1737b:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1737f:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   17384:	0f 85 20 00 00 00    	jne    173aa <yyget_lineno+0x5a>
   1738a:	e9 0f 00 00 00       	jmp    1739e <yyget_lineno+0x4e>
   1738f:	31 c0                	xor    %eax,%eax
   17391:	a8 01                	test   $0x1,%al
   17393:	0f 85 11 00 00 00    	jne    173aa <yyget_lineno+0x5a>
   17399:	e9 00 00 00 00       	jmp    1739e <yyget_lineno+0x4e>
   1739e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   173a5:	e9 1a 00 00 00       	jmp    173c4 <yyget_lineno+0x74>
   173aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173ae:	48 8b 40 28          	mov    0x28(%rax),%rax
   173b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   173b6:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   173ba:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   173be:	8b 40 2c             	mov    0x2c(%rax),%eax
   173c1:	89 45 fc             	mov    %eax,-0x4(%rbp)
   173c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
   173c7:	5d                   	pop    %rbp
   173c8:	c3                   	ret
   173c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000173d0 <yyget_column>:
   173d0:	55                   	push   %rbp
   173d1:	48 89 e5             	mov    %rsp,%rbp
   173d4:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   173d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   173dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   173e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173e4:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   173e9:	0f 84 20 00 00 00    	je     1740f <yyget_column+0x3f>
   173ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173f3:	48 8b 40 28          	mov    0x28(%rax),%rax
   173f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   173fb:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   173ff:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   17404:	0f 85 20 00 00 00    	jne    1742a <yyget_column+0x5a>
   1740a:	e9 0f 00 00 00       	jmp    1741e <yyget_column+0x4e>
   1740f:	31 c0                	xor    %eax,%eax
   17411:	a8 01                	test   $0x1,%al
   17413:	0f 85 11 00 00 00    	jne    1742a <yyget_column+0x5a>
   17419:	e9 00 00 00 00       	jmp    1741e <yyget_column+0x4e>
   1741e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   17425:	e9 1a 00 00 00       	jmp    17444 <yyget_column+0x74>
   1742a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1742e:	48 8b 40 28          	mov    0x28(%rax),%rax
   17432:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   17436:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   1743a:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   1743e:	8b 40 30             	mov    0x30(%rax),%eax
   17441:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17444:	8b 45 fc             	mov    -0x4(%rbp),%eax
   17447:	5d                   	pop    %rbp
   17448:	c3                   	ret
   17449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000017450 <yyget_in>:
   17450:	55                   	push   %rbp
   17451:	48 89 e5             	mov    %rsp,%rbp
   17454:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1745c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17464:	48 8b 40 08          	mov    0x8(%rax),%rax
   17468:	5d                   	pop    %rbp
   17469:	c3                   	ret
   1746a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017470 <yyget_out>:
   17470:	55                   	push   %rbp
   17471:	48 89 e5             	mov    %rsp,%rbp
   17474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1747c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17480:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17484:	48 8b 40 10          	mov    0x10(%rax),%rax
   17488:	5d                   	pop    %rbp
   17489:	c3                   	ret
   1748a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000017490 <yyget_leng>:
   17490:	55                   	push   %rbp
   17491:	48 89 e5             	mov    %rsp,%rbp
   17494:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17498:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1749c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   174a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174a4:	8b 40 38             	mov    0x38(%rax),%eax
   174a7:	5d                   	pop    %rbp
   174a8:	c3                   	ret
   174a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000174b0 <yyget_text>:
   174b0:	55                   	push   %rbp
   174b1:	48 89 e5             	mov    %rsp,%rbp
   174b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   174b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   174c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174c4:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
   174cb:	5d                   	pop    %rbp
   174cc:	c3                   	ret
   174cd:	0f 1f 00             	nopl   (%rax)

00000000000174d0 <yyset_extra>:
   174d0:	55                   	push   %rbp
   174d1:	48 89 e5             	mov    %rsp,%rbp
   174d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   174d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   174dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   174e4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   174e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   174ec:	48 89 08             	mov    %rcx,(%rax)
   174ef:	5d                   	pop    %rbp
   174f0:	c3                   	ret
   174f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   174f8:	00 00 00 
   174fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000017500 <yyset_lineno>:
   17500:	55                   	push   %rbp
   17501:	48 89 e5             	mov    %rsp,%rbp
   17504:	48 83 ec 20          	sub    $0x20,%rsp
   17508:	89 7d fc             	mov    %edi,-0x4(%rbp)
   1750b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1750f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17513:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17517:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1751b:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   17520:	0f 84 20 00 00 00    	je     17546 <yyset_lineno+0x46>
   17526:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1752a:	48 8b 40 28          	mov    0x28(%rax),%rax
   1752e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   17532:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   17536:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   1753b:	0f 85 24 00 00 00    	jne    17565 <yyset_lineno+0x65>
   17541:	e9 0f 00 00 00       	jmp    17555 <yyset_lineno+0x55>
   17546:	31 c0                	xor    %eax,%eax
   17548:	a8 01                	test   $0x1,%al
   1754a:	0f 85 15 00 00 00    	jne    17565 <yyset_lineno+0x65>
   17550:	e9 00 00 00 00       	jmp    17555 <yyset_lineno+0x55>
   17555:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17559:	48 8d 3d 41 2b 00 00 	lea    0x2b41(%rip),%rdi        # 1a0a1 <yy_rule_can_match_eol+0x141>
   17560:	e8 9b f3 ff ff       	call   16900 <yy_fatal_error>
   17565:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   17568:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1756c:	48 8b 40 28          	mov    0x28(%rax),%rax
   17570:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17574:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   17578:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   1757c:	89 48 2c             	mov    %ecx,0x2c(%rax)
   1757f:	48 83 c4 20          	add    $0x20,%rsp
   17583:	5d                   	pop    %rbp
   17584:	c3                   	ret
   17585:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1758c:	00 00 00 
   1758f:	90                   	nop

0000000000017590 <yyset_column>:
   17590:	55                   	push   %rbp
   17591:	48 89 e5             	mov    %rsp,%rbp
   17594:	48 83 ec 20          	sub    $0x20,%rsp
   17598:	89 7d fc             	mov    %edi,-0x4(%rbp)
   1759b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1759f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   175a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   175a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175ab:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   175b0:	0f 84 20 00 00 00    	je     175d6 <yyset_column+0x46>
   175b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175ba:	48 8b 40 28          	mov    0x28(%rax),%rax
   175be:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   175c2:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   175c6:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
   175cb:	0f 85 24 00 00 00    	jne    175f5 <yyset_column+0x65>
   175d1:	e9 0f 00 00 00       	jmp    175e5 <yyset_column+0x55>
   175d6:	31 c0                	xor    %eax,%eax
   175d8:	a8 01                	test   $0x1,%al
   175da:	0f 85 15 00 00 00    	jne    175f5 <yyset_column+0x65>
   175e0:	e9 00 00 00 00       	jmp    175e5 <yyset_column+0x55>
   175e5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   175e9:	48 8d 3d d4 2a 00 00 	lea    0x2ad4(%rip),%rdi        # 1a0c4 <yy_rule_can_match_eol+0x164>
   175f0:	e8 0b f3 ff ff       	call   16900 <yy_fatal_error>
   175f5:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   175f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175fc:	48 8b 40 28          	mov    0x28(%rax),%rax
   17600:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17604:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   17608:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
   1760c:	89 48 30             	mov    %ecx,0x30(%rax)
   1760f:	48 83 c4 20          	add    $0x20,%rsp
   17613:	5d                   	pop    %rbp
   17614:	c3                   	ret
   17615:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1761c:	00 00 00 
   1761f:	90                   	nop

0000000000017620 <yyset_in>:
   17620:	55                   	push   %rbp
   17621:	48 89 e5             	mov    %rsp,%rbp
   17624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17628:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1762c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17630:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17634:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   17638:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1763c:	48 89 48 08          	mov    %rcx,0x8(%rax)
   17640:	5d                   	pop    %rbp
   17641:	c3                   	ret
   17642:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17649:	00 00 00 
   1764c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017650 <yyset_out>:
   17650:	55                   	push   %rbp
   17651:	48 89 e5             	mov    %rsp,%rbp
   17654:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17658:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1765c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17660:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17664:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   17668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1766c:	48 89 48 10          	mov    %rcx,0x10(%rax)
   17670:	5d                   	pop    %rbp
   17671:	c3                   	ret
   17672:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17679:	00 00 00 
   1767c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017680 <yyget_debug>:
   17680:	55                   	push   %rbp
   17681:	48 89 e5             	mov    %rsp,%rbp
   17684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1768c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17694:	8b 40 7c             	mov    0x7c(%rax),%eax
   17697:	5d                   	pop    %rbp
   17698:	c3                   	ret
   17699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000176a0 <yyset_debug>:
   176a0:	55                   	push   %rbp
   176a1:	48 89 e5             	mov    %rsp,%rbp
   176a4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   176a7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   176ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   176af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   176b3:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   176b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   176ba:	89 48 7c             	mov    %ecx,0x7c(%rax)
   176bd:	5d                   	pop    %rbp
   176be:	c3                   	ret
   176bf:	90                   	nop

00000000000176c0 <yyget_lval>:
   176c0:	55                   	push   %rbp
   176c1:	48 89 e5             	mov    %rsp,%rbp
   176c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   176d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   176d4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   176db:	5d                   	pop    %rbp
   176dc:	c3                   	ret
   176dd:	0f 1f 00             	nopl   (%rax)

00000000000176e0 <yyset_lval>:
   176e0:	55                   	push   %rbp
   176e1:	48 89 e5             	mov    %rsp,%rbp
   176e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   176ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   176f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   176f4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   176f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   176fc:	48 89 88 90 00 00 00 	mov    %rcx,0x90(%rax)
   17703:	5d                   	pop    %rbp
   17704:	c3                   	ret
   17705:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1770c:	00 00 00 
   1770f:	90                   	nop

0000000000017710 <yyget_lloc>:
   17710:	55                   	push   %rbp
   17711:	48 89 e5             	mov    %rsp,%rbp
   17714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17718:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1771c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17720:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17724:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   1772b:	5d                   	pop    %rbp
   1772c:	c3                   	ret
   1772d:	0f 1f 00             	nopl   (%rax)

0000000000017730 <yyset_lloc>:
   17730:	55                   	push   %rbp
   17731:	48 89 e5             	mov    %rsp,%rbp
   17734:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17738:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1773c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17740:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   17744:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   17748:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1774c:	48 89 88 98 00 00 00 	mov    %rcx,0x98(%rax)
   17753:	5d                   	pop    %rbp
   17754:	c3                   	ret
   17755:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1775c:	00 00 00 
   1775f:	90                   	nop

0000000000017760 <yylex_init>:
   17760:	55                   	push   %rbp
   17761:	48 89 e5             	mov    %rsp,%rbp
   17764:	48 83 ec 10          	sub    $0x10,%rsp
   17768:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   1776c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   17771:	0f 85 17 00 00 00    	jne    1778e <yylex_init+0x2e>
   17777:	e8 c4 b8 fe ff       	call   3040 <__errno_location@plt>
   1777c:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
   17782:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   17789:	e9 5f 00 00 00       	jmp    177ed <yylex_init+0x8d>
   1778e:	bf a0 00 00 00       	mov    $0xa0,%edi
   17793:	31 c0                	xor    %eax,%eax
   17795:	89 c6                	mov    %eax,%esi
   17797:	e8 d4 f4 ff ff       	call   16c70 <yyalloc>
   1779c:	48 89 c1             	mov    %rax,%rcx
   1779f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177a3:	48 89 08             	mov    %rcx,(%rax)
   177a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177aa:	48 83 38 00          	cmpq   $0x0,(%rax)
   177ae:	0f 85 17 00 00 00    	jne    177cb <yylex_init+0x6b>
   177b4:	e8 87 b8 fe ff       	call   3040 <__errno_location@plt>
   177b9:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
   177bf:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   177c6:	e9 22 00 00 00       	jmp    177ed <yylex_init+0x8d>
   177cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177cf:	48 8b 38             	mov    (%rax),%rdi
   177d2:	31 f6                	xor    %esi,%esi
   177d4:	ba a0 00 00 00       	mov    $0xa0,%edx
   177d9:	e8 22 b9 fe ff       	call   3100 <memset@plt>
   177de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   177e2:	48 8b 38             	mov    (%rax),%rdi
   177e5:	e8 16 00 00 00       	call   17800 <yy_init_globals>
   177ea:	89 45 fc             	mov    %eax,-0x4(%rbp)
   177ed:	8b 45 fc             	mov    -0x4(%rbp),%eax
   177f0:	48 83 c4 10          	add    $0x10,%rsp
   177f4:	5d                   	pop    %rbp
   177f5:	c3                   	ret
   177f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   177fd:	00 00 00 

0000000000017800 <yy_init_globals>:
   17800:	55                   	push   %rbp
   17801:	48 89 e5             	mov    %rsp,%rbp
   17804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1780c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17814:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   1781b:	00 
   1781c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17820:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   17827:	00 
   17828:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1782c:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   17833:	00 
   17834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17838:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
   1783f:	00 
   17840:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17844:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%rax)
   1784b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1784f:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
   17856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1785a:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%rax)
   17861:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17865:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%rax)
   1786c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17870:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
   17877:	00 
   17878:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1787c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   17883:	00 
   17884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17888:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1788f:	00 
   17890:	31 c0                	xor    %eax,%eax
   17892:	5d                   	pop    %rbp
   17893:	c3                   	ret
   17894:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1789b:	00 00 00 
   1789e:	66 90                	xchg   %ax,%ax

00000000000178a0 <yylex_init_extra>:
   178a0:	55                   	push   %rbp
   178a1:	48 89 e5             	mov    %rsp,%rbp
   178a4:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   178ab:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   178af:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   178b3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   178b7:	48 8d b5 48 ff ff ff 	lea    -0xb8(%rbp),%rsi
   178be:	e8 0d fc ff ff       	call   174d0 <yyset_extra>
   178c3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   178c8:	0f 85 17 00 00 00    	jne    178e5 <yylex_init_extra+0x45>
   178ce:	e8 6d b7 fe ff       	call   3040 <__errno_location@plt>
   178d3:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
   178d9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   178e0:	e9 72 00 00 00       	jmp    17957 <yylex_init_extra+0xb7>
   178e5:	48 8d b5 48 ff ff ff 	lea    -0xb8(%rbp),%rsi
   178ec:	bf a0 00 00 00       	mov    $0xa0,%edi
   178f1:	e8 7a f3 ff ff       	call   16c70 <yyalloc>
   178f6:	48 89 c1             	mov    %rax,%rcx
   178f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   178fd:	48 89 08             	mov    %rcx,(%rax)
   17900:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17904:	48 83 38 00          	cmpq   $0x0,(%rax)
   17908:	0f 85 17 00 00 00    	jne    17925 <yylex_init_extra+0x85>
   1790e:	e8 2d b7 fe ff       	call   3040 <__errno_location@plt>
   17913:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
   17919:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   17920:	e9 32 00 00 00       	jmp    17957 <yylex_init_extra+0xb7>
   17925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17929:	48 8b 38             	mov    (%rax),%rdi
   1792c:	31 f6                	xor    %esi,%esi
   1792e:	ba a0 00 00 00       	mov    $0xa0,%edx
   17933:	e8 c8 b7 fe ff       	call   3100 <memset@plt>
   17938:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   1793c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17940:	48 8b 30             	mov    (%rax),%rsi
   17943:	e8 88 fb ff ff       	call   174d0 <yyset_extra>
   17948:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1794c:	48 8b 38             	mov    (%rax),%rdi
   1794f:	e8 ac fe ff ff       	call   17800 <yy_init_globals>
   17954:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17957:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1795a:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
   17961:	5d                   	pop    %rbp
   17962:	c3                   	ret
   17963:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   1796a:	00 00 00 
   1796d:	0f 1f 00             	nopl   (%rax)

0000000000017970 <yylex_destroy>:
   17970:	55                   	push   %rbp
   17971:	48 89 e5             	mov    %rsp,%rbp
   17974:	48 83 ec 20          	sub    $0x20,%rsp
   17978:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1797c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17980:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17984:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17988:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   1798d:	0f 84 1d 00 00 00    	je     179b0 <yylex_destroy+0x40>
   17993:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17997:	48 8b 40 28          	mov    0x28(%rax),%rax
   1799b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1799f:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   179a3:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   179a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   179ab:	e9 0b 00 00 00       	jmp    179bb <yylex_destroy+0x4b>
   179b0:	31 c0                	xor    %eax,%eax
   179b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   179b6:	e9 00 00 00 00       	jmp    179bb <yylex_destroy+0x4b>
   179bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   179bf:	48 83 f8 00          	cmp    $0x0,%rax
   179c3:	0f 84 6a 00 00 00    	je     17a33 <yylex_destroy+0xc3>
   179c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   179cd:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
   179d2:	0f 84 1d 00 00 00    	je     179f5 <yylex_destroy+0x85>
   179d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   179dc:	48 8b 40 28          	mov    0x28(%rax),%rax
   179e0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   179e4:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   179e8:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
   179ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   179f0:	e9 0b 00 00 00       	jmp    17a00 <yylex_destroy+0x90>
   179f5:	31 c0                	xor    %eax,%eax
   179f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   179fb:	e9 00 00 00 00       	jmp    17a00 <yylex_destroy+0x90>
   17a00:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
   17a04:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17a08:	e8 93 f2 ff ff       	call   16ca0 <yy_delete_buffer>
   17a0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a11:	48 8b 40 28          	mov    0x28(%rax),%rax
   17a15:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17a19:	48 8b 49 18          	mov    0x18(%rcx),%rcx
   17a1d:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
   17a24:	00 
   17a25:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17a29:	e8 82 f5 ff ff       	call   16fb0 <yypop_buffer_state>
   17a2e:	e9 51 ff ff ff       	jmp    17984 <yylex_destroy+0x14>
   17a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a37:	48 8b 78 28          	mov    0x28(%rax),%rdi
   17a3b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17a3f:	e8 2c f3 ff ff       	call   16d70 <yyfree>
   17a44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a48:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   17a4f:	00 
   17a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a54:	48 8b 78 60          	mov    0x60(%rax),%rdi
   17a58:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17a5c:	e8 0f f3 ff ff       	call   16d70 <yyfree>
   17a61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a65:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
   17a6c:	00 
   17a6d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17a71:	e8 8a fd ff ff       	call   17800 <yy_init_globals>
   17a76:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17a7a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   17a7e:	e8 ed f2 ff ff       	call   16d70 <yyfree>
   17a83:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   17a8a:	00 
   17a8b:	31 c0                	xor    %eax,%eax
   17a8d:	48 83 c4 20          	add    $0x20,%rsp
   17a91:	5d                   	pop    %rbp
   17a92:	c3                   	ret
   17a93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17a9a:	00 00 00 
   17a9d:	0f 1f 00             	nopl   (%rax)

0000000000017aa0 <yyrealloc>:
   17aa0:	55                   	push   %rbp
   17aa1:	48 89 e5             	mov    %rsp,%rbp
   17aa4:	48 83 ec 20          	sub    $0x20,%rsp
   17aa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17aac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17ab0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   17ab4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17ab8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   17abc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17ac0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   17ac4:	e8 e7 b6 fe ff       	call   31b0 <realloc@plt>
   17ac9:	48 83 c4 20          	add    $0x20,%rsp
   17acd:	5d                   	pop    %rbp
   17ace:	c3                   	ret
   17acf:	90                   	nop

0000000000017ad0 <slipG_create>:
   17ad0:	55                   	push   %rbp
   17ad1:	48 89 e5             	mov    %rsp,%rbp
   17ad4:	48 83 ec 10          	sub    $0x10,%rsp
   17ad8:	bf 08 00 00 00       	mov    $0x8,%edi
   17add:	e8 4e 26 ff ff       	call   a130 <slipM_malloc>
   17ae2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17aea:	48 83 c4 10          	add    $0x10,%rsp
   17aee:	5d                   	pop    %rbp
   17aef:	c3                   	ret

0000000000017af0 <slipG_release>:
   17af0:	55                   	push   %rbp
   17af1:	48 89 e5             	mov    %rsp,%rbp
   17af4:	48 83 ec 10          	sub    $0x10,%rsp
   17af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17afc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   17b00:	e8 ab 26 ff ff       	call   a1b0 <slipM_free>
   17b05:	48 83 c4 10          	add    $0x10,%rsp
   17b09:	5d                   	pop    %rbp
   17b0a:	c3                   	ret
   17b0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000017b10 <slipG_fullGC>:
   17b10:	55                   	push   %rbp
   17b11:	48 89 e5             	mov    %rsp,%rbp
   17b14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b1c:	48 8b 40 48          	mov    0x48(%rax),%rax
   17b20:	48 8b 40 28          	mov    0x28(%rax),%rax
   17b24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17b28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b2c:	83 38 02             	cmpl   $0x2,(%rax)
   17b2f:	0f 84 0d 00 00 00    	je     17b42 <slipG_fullGC+0x32>
   17b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b39:	83 38 00             	cmpl   $0x0,(%rax)
   17b3c:	0f 85 0a 00 00 00    	jne    17b4c <slipG_fullGC+0x3c>
   17b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b46:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
   17b4c:	5d                   	pop    %rbp
   17b4d:	c3                   	ret
   17b4e:	66 90                	xchg   %ax,%ax

0000000000017b50 <slipG_gc>:
   17b50:	55                   	push   %rbp
   17b51:	48 89 e5             	mov    %rsp,%rbp
   17b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b5c:	48 8b 40 48          	mov    0x48(%rax),%rax
   17b60:	48 8b 40 28          	mov    0x28(%rax),%rax
   17b64:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17b68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b6c:	83 38 00             	cmpl   $0x0,(%rax)
   17b6f:	0f 85 0a 00 00 00    	jne    17b7f <slipG_gc+0x2f>
   17b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b79:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
   17b7f:	5d                   	pop    %rbp
   17b80:	c3                   	ret
   17b81:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17b88:	00 00 00 
   17b8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000017b90 <slipG_step>:
   17b90:	55                   	push   %rbp
   17b91:	48 89 e5             	mov    %rsp,%rbp
   17b94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b9c:	48 8b 40 48          	mov    0x48(%rax),%rax
   17ba0:	48 8b 40 28          	mov    0x28(%rax),%rax
   17ba4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17ba8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17bac:	8b 40 04             	mov    0x4(%rax),%eax
   17baf:	89 45 ec             	mov    %eax,-0x14(%rbp)
   17bb2:	85 c0                	test   %eax,%eax
   17bb4:	0f 84 27 00 00 00    	je     17be1 <slipG_step+0x51>
   17bba:	e9 00 00 00 00       	jmp    17bbf <slipG_step+0x2f>
   17bbf:	8b 45 ec             	mov    -0x14(%rbp),%eax
   17bc2:	83 e8 01             	sub    $0x1,%eax
   17bc5:	0f 84 1b 00 00 00    	je     17be6 <slipG_step+0x56>
   17bcb:	e9 00 00 00 00       	jmp    17bd0 <slipG_step+0x40>
   17bd0:	8b 45 ec             	mov    -0x14(%rbp),%eax
   17bd3:	83 e8 02             	sub    $0x2,%eax
   17bd6:	0f 84 0f 00 00 00    	je     17beb <slipG_step+0x5b>
   17bdc:	e9 0f 00 00 00       	jmp    17bf0 <slipG_step+0x60>
   17be1:	e9 0a 00 00 00       	jmp    17bf0 <slipG_step+0x60>
   17be6:	e9 05 00 00 00       	jmp    17bf0 <slipG_step+0x60>
   17beb:	e9 00 00 00 00       	jmp    17bf0 <slipG_step+0x60>
   17bf0:	5d                   	pop    %rbp
   17bf1:	c3                   	ret
   17bf2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
   17bf9:	00 00 00 
   17bfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000017c00 <slipI_sprint>:
   17c00:	55                   	push   %rbp
   17c01:	48 89 e5             	mov    %rsp,%rbp
   17c04:	48 83 ec 20          	sub    $0x20,%rsp
   17c08:	89 75 f8             	mov    %esi,-0x8(%rbp)
   17c0b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
   17c0f:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
   17c13:	83 e0 3f             	and    $0x3f,%eax
   17c16:	83 c0 ff             	add    $0xffffffff,%eax
   17c19:	89 c1                	mov    %eax,%ecx
   17c1b:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   17c1f:	83 e8 22             	sub    $0x22,%eax
   17c22:	0f 87 4a 01 00 00    	ja     17d72 <slipI_sprint+0x172>
   17c28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c2c:	48 8d 0d 95 25 00 00 	lea    0x2595(%rip),%rcx        # 1a1c8 <yy_rule_can_match_eol+0x268>
   17c33:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
   17c37:	48 01 c8             	add    %rcx,%rax
   17c3a:	ff e0                	jmp    *%rax
   17c3c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17c40:	8a 45 f8             	mov    -0x8(%rbp),%al
   17c43:	24 3f                	and    $0x3f,%al
   17c45:	0f b6 c0             	movzbl %al,%eax
   17c48:	89 c0                	mov    %eax,%eax
   17c4a:	89 c1                	mov    %eax,%ecx
   17c4c:	48 8d 05 9d 86 00 00 	lea    0x869d(%rip),%rax        # 202f0 <names>
   17c53:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
   17c57:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
   17c5b:	66 c1 e8 06          	shr    $0x6,%ax
   17c5f:	0f b7 c8             	movzwl %ax,%ecx
   17c62:	44 0f b7 45 fa       	movzwl -0x6(%rbp),%r8d
   17c67:	48 8d 35 e6 25 00 00 	lea    0x25e6(%rip),%rsi        # 1a254 <yy_rule_can_match_eol+0x2f4>
   17c6e:	b0 00                	mov    $0x0,%al
   17c70:	e8 6b b5 fe ff       	call   31e0 <sprintf@plt>
   17c75:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17c78:	e9 19 01 00 00       	jmp    17d96 <slipI_sprint+0x196>
   17c7d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17c81:	8a 45 f8             	mov    -0x8(%rbp),%al
   17c84:	24 3f                	and    $0x3f,%al
   17c86:	0f b6 c0             	movzbl %al,%eax
   17c89:	89 c0                	mov    %eax,%eax
   17c8b:	89 c1                	mov    %eax,%ecx
   17c8d:	48 8d 05 5c 86 00 00 	lea    0x865c(%rip),%rax        # 202f0 <names>
   17c94:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
   17c98:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
   17c9c:	66 c1 e8 06          	shr    $0x6,%ax
   17ca0:	0f b7 c8             	movzwl %ax,%ecx
   17ca3:	44 0f b6 45 fa       	movzbl -0x6(%rbp),%r8d
   17ca8:	44 0f b6 4d fb       	movzbl -0x5(%rbp),%r9d
   17cad:	48 8d 35 a9 25 00 00 	lea    0x25a9(%rip),%rsi        # 1a25d <yy_rule_can_match_eol+0x2fd>
   17cb4:	b0 00                	mov    $0x0,%al
   17cb6:	e8 25 b5 fe ff       	call   31e0 <sprintf@plt>
   17cbb:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17cbe:	e9 d3 00 00 00       	jmp    17d96 <slipI_sprint+0x196>
   17cc3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17cc7:	8a 45 f8             	mov    -0x8(%rbp),%al
   17cca:	24 3f                	and    $0x3f,%al
   17ccc:	0f b6 c0             	movzbl %al,%eax
   17ccf:	89 c0                	mov    %eax,%eax
   17cd1:	89 c1                	mov    %eax,%ecx
   17cd3:	48 8d 05 16 86 00 00 	lea    0x8616(%rip),%rax        # 202f0 <names>
   17cda:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
   17cde:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
   17ce2:	66 c1 e8 06          	shr    $0x6,%ax
   17ce6:	0f b7 c8             	movzwl %ax,%ecx
   17ce9:	44 0f bf 45 fa       	movswl -0x6(%rbp),%r8d
   17cee:	48 8d 35 5f 25 00 00 	lea    0x255f(%rip),%rsi        # 1a254 <yy_rule_can_match_eol+0x2f4>
   17cf5:	b0 00                	mov    $0x0,%al
   17cf7:	e8 e4 b4 fe ff       	call   31e0 <sprintf@plt>
   17cfc:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17cff:	e9 92 00 00 00       	jmp    17d96 <slipI_sprint+0x196>
   17d04:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17d08:	8a 45 f8             	mov    -0x8(%rbp),%al
   17d0b:	24 3f                	and    $0x3f,%al
   17d0d:	0f b6 c0             	movzbl %al,%eax
   17d10:	89 c0                	mov    %eax,%eax
   17d12:	89 c1                	mov    %eax,%ecx
   17d14:	48 8d 05 d5 85 00 00 	lea    0x85d5(%rip),%rax        # 202f0 <names>
   17d1b:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
   17d1f:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   17d22:	c1 e9 06             	shr    $0x6,%ecx
   17d25:	48 8d 35 3d 25 00 00 	lea    0x253d(%rip),%rsi        # 1a269 <yy_rule_can_match_eol+0x309>
   17d2c:	b0 00                	mov    $0x0,%al
   17d2e:	e8 ad b4 fe ff       	call   31e0 <sprintf@plt>
   17d33:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17d36:	e9 5b 00 00 00       	jmp    17d96 <slipI_sprint+0x196>
   17d3b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17d3f:	8a 45 f8             	mov    -0x8(%rbp),%al
   17d42:	24 3f                	and    $0x3f,%al
   17d44:	0f b6 c0             	movzbl %al,%eax
   17d47:	89 c0                	mov    %eax,%eax
   17d49:	89 c1                	mov    %eax,%ecx
   17d4b:	48 8d 05 9e 85 00 00 	lea    0x859e(%rip),%rax        # 202f0 <names>
   17d52:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
   17d56:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   17d59:	c1 f9 06             	sar    $0x6,%ecx
   17d5c:	48 8d 35 06 25 00 00 	lea    0x2506(%rip),%rsi        # 1a269 <yy_rule_can_match_eol+0x309>
   17d63:	b0 00                	mov    $0x0,%al
   17d65:	e8 76 b4 fe ff       	call   31e0 <sprintf@plt>
   17d6a:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17d6d:	e9 24 00 00 00       	jmp    17d96 <slipI_sprint+0x196>
   17d72:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
   17d76:	48 8b 15 73 85 00 00 	mov    0x8573(%rip),%rdx        # 202f0 <names>
   17d7d:	8a 45 f8             	mov    -0x8(%rbp),%al
   17d80:	24 3f                	and    $0x3f,%al
   17d82:	0f b6 c8             	movzbl %al,%ecx
   17d85:	48 8d 35 dd 24 00 00 	lea    0x24dd(%rip),%rsi        # 1a269 <yy_rule_can_match_eol+0x309>
   17d8c:	b0 00                	mov    $0x0,%al
   17d8e:	e8 4d b4 fe ff       	call   31e0 <sprintf@plt>
   17d93:	89 45 fc             	mov    %eax,-0x4(%rbp)
   17d96:	8b 45 fc             	mov    -0x4(%rbp),%eax
   17d99:	48 83 c4 20          	add    $0x20,%rsp
   17d9d:	5d                   	pop    %rbp
   17d9e:	c3                   	ret

Disassembly of section .fini:

0000000000017da0 <_fini>:
   17da0:	f3 0f 1e fa          	endbr64
   17da4:	48 83 ec 08          	sub    $0x8,%rsp
   17da8:	48 83 c4 08          	add    $0x8,%rsp
   17dac:	c3                   	ret
